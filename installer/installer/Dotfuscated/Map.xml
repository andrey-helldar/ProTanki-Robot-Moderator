<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE dotfuscatorMap SYSTEM "http://www.preemptive.com/dotfuscator/dtd/dotfuscatorMap_v1.2.dtd">
<dotfuscatorMap version="1.1">
    <header>
        <timestamp>2015-09-05T00:01:15</timestamp>
        <product version="5.5.4954.46574" user="Unregistered " serial="000-00-000-391">Dotfuscator and Analytics Community Edition</product>
    </header>
    <mapping>
        <module>
            <name>AI RUS Bot-Moderator.exe</name>
            <type>
                <name>AIRUS_Bot_Moderator.Authorization</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;GetToken&gt;b__1</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;wbAuth_LoadCompleted&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>GetToken</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Windows.Markup.IComponentConnector.Connect</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Navigation.NavigationEventArgs)</signature>
                        <name>wbAuth_LoadCompleted</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Navigation.NavigatingCancelEventArgs)</signature>
                        <name>wbAuth_Navigating</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>Window_Loaded</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_contentLoaded</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Label</signature>
                        <name>lStatus</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.WebBrowser</signature>
                        <name>wbAuth</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.Data</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AccessToken</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Ban</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BanPeriod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Deactivate</name>
                    </method>
                    <method>
                        <signature>AIRUS_Bot_Moderator.Data()</signature>
                        <name>get_Default</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Delete</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_DeleteDays</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Group</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Likes</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LikesCount</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LikesOld</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Posts</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Sleep</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_SleepDefault</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Words</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AccessToken</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Ban</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BanPeriod</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Deactivate</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Delete</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_DeleteDays</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Group</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Length</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Likes</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_LikesCount</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_LikesOld</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Posts</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Sleep</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_SleepDefault</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Words</name>
                    </method>
                    <method>
                        <signature>void(object, System.Configuration.SettingChangingEventArgs)</signature>
                        <name>SettingChangingEventHandler</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.ComponentModel.CancelEventArgs)</signature>
                        <name>SettingsSavingEventHandler</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.Data</signature>
                        <name>defaultInstance</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>AccessToken</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Ban</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>BanPeriod</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Deactivate</name>
                    </property>
                    <property>
                        <signature>AIRUS_Bot_Moderator.Data()</signature>
                        <name>Default</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Delete</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>DeleteDays</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Group</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Length</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Likes</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>LikesCount</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>LikesOld</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Posts</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Sleep</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>SleepDefault</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Words</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;.ctor&gt;b__0</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;bAuthorize_Click&gt;b__24</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;bSettings_Click&gt;b__8f</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;bStartBot_Click&gt;b__68</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;bStartBot_Click&gt;b__69</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;LoadingData&gt;b__2</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void(object, System.ComponentModel.CancelEventArgs)</signature>
                        <name>&lt;LoadingData&gt;b__3</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.ComponentModel.CancelEventArgs)</signature>
                        <name>&lt;LoadingData&gt;b__4</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;LoadingData&gt;b__a</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;Log&gt;b__82</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;OpenSettings&gt;b__90</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;Timer&gt;b__8b</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallDeleteComment&gt;b__5e</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallDeleteComment&gt;b__5f</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__29</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__2a</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__2e</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__2f</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__31</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__33</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__34</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__36</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__37</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__38</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__3a</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGetComments&gt;b__52</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGetComments&gt;b__54</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>bAuthorize_Click</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>bSettings_Click</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>bStartBot_Click</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_appId</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_appSecret</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JObject()</signature>
                        <name>GetGroup</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>LoadingData</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, float64, bool, bool)</signature>
                        <name>Log</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OpenSettings</name>
                        <newname>z</newname>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>POST</name>
                    </method>
                    <method>
                        <signature>void(bool, int32)</signature>
                        <name>SetProgress</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetStatus</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SetTimer</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Windows.Markup.IComponentConnector.Connect</name>
                    </method>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>textLog</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Timer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ToBan</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ToDelete</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, Newtonsoft.Json.Linq.JToken, string)</signature>
                        <name>WallDeleteComment</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WallGet</name>
                        <newname>ac</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WallGetComments</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.ComponentModel.CancelEventArgs)</signature>
                        <name>Window_Closing</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_contentLoaded</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>APPId</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>APPSecret</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Button</signature>
                        <name>bAuthorize</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Button</signature>
                        <name>bSettings</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Button</signature>
                        <name>bStartBot</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.CancelEventHandler</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatee</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.CancelEventHandler</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatef</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>first</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>groupId</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JObject</signature>
                        <name>log</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBlock</signature>
                        <name>logAllComments</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBlock</signature>
                        <name>logAllPosts</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBlock</signature>
                        <name>logDeleted</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBlock</signature>
                        <name>logErrorDelete</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.ProgressBar</signature>
                        <name>pbStatus</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Diagnostics.Stopwatch</signature>
                        <name>sWatch</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBlock</signature>
                        <name>tbDiff</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBlock</signature>
                        <name>tbEndAt</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBox</signature>
                        <name>tbLog</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBlock</signature>
                        <name>tbStartAt</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBlock</signature>
                        <name>tbStatus</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBlock</signature>
                        <name>tbStatusBar</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>timer</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>appId</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>appSecret</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass14</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/u</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;LoadingData&gt;b__7</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;LoadingData&gt;b__9</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;LoadingData&gt;b__c</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>botBtn</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass17</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/p</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;LoadingData&gt;b__8</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass14</signature>
                        <name>CS$&lt;&gt;8__locals15</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JObject</signature>
                        <name>data</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass1a</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/j</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;LoadingData&gt;b__5</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass14</signature>
                        <name>CS$&lt;&gt;8__locals15</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass17</signature>
                        <name>CS$&lt;&gt;8__locals18</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JObject</signature>
                        <name>group</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass1d</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/v</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;LoadingData&gt;b__6</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass14</signature>
                        <name>CS$&lt;&gt;8__locals15</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass17</signature>
                        <name>CS$&lt;&gt;8__locals18</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass1a</signature>
                        <name>CS$&lt;&gt;8__locals1b</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>log</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass1f</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/l</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;LoadingData&gt;b__b</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass14</signature>
                        <name>CS$&lt;&gt;8__locals15</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass22</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/r</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;POST&gt;b__21</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass27</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;bAuthorize_Click&gt;b__25</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass48</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/k</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__30</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__32</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>res</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass4b</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__2b</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__2c</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__2d</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>count</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass48</signature>
                        <name>CS$&lt;&gt;8__locals49</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass4d</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/s</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__35</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass4f</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGet&gt;b__39</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass5a</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGetComments&gt;b__51</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGetComments&gt;b__53</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>result</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass5c</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallGetComments&gt;b__55</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass63</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/m</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WallDeleteComment&gt;b__60</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass66</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/g</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;GetGroup&gt;b__65</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass6b</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;ToDelete&gt;b__6a</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass6e</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/t</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;ToBan&gt;b__6d</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass73</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/o</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;SetStatus&gt;b__70</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;SetStatus&gt;b__71</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>block</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass73/&lt;&gt;c__DisplayClass76</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/o/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;SetStatus&gt;b__72</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass73</signature>
                        <name>CS$&lt;&gt;8__locals74</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass7a</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;SetTimer&gt;b__78</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>i</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass7e</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/w</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;SetProgress&gt;b__7c</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>set</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass7e/&lt;&gt;c__DisplayClass80</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/w/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;SetProgress&gt;b__7d</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass7e</signature>
                        <name>CS$&lt;&gt;8__locals7f</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass85</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/q</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;Log&gt;b__83</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass88</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/n</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;textLog&gt;b__87</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>ex</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.MainWindow/&lt;&gt;c__DisplayClass8d</name>
                <newname>AIRUS_Bot_Moderator.MainWindow/i</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;Timer&gt;b__8a</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.MainWindow</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>i</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.Properties.Resources</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_API</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Author</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AuthorGroup</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AuthorPost</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>get_Culture</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_OAuth</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Redirect</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Resources.ResourceManager()</signature>
                        <name>get_ResourceManager</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Version</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Globalization.CultureInfo)</signature>
                        <name>set_Culture</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Globalization.CultureInfo</signature>
                        <name>resourceCulture</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Resources.ResourceManager</signature>
                        <name>resourceMan</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>API</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Author</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>AuthorGroup</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>AuthorPost</name>
                    </property>
                    <property>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>Culture</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>OAuth</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Redirect</name>
                    </property>
                    <property>
                        <signature>System.Resources.ResourceManager()</signature>
                        <name>ResourceManager</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Version</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.Properties.Settings</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>AIRUS_Bot_Moderator.Properties.Settings()</signature>
                        <name>get_Default</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>AIRUS_Bot_Moderator.Properties.Settings</signature>
                        <name>defaultInstance</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>AIRUS_Bot_Moderator.Properties.Settings()</signature>
                        <name>Default</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>AIRUS_Bot_Moderator.Settings</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;bSaving_Click&gt;b__1</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;FormSettings_Loaded&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;LoadingData&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>bSaving_Click</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>cbBan_Click</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>cbDelete_Click</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>cbLikes_Click</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>FormSettings_Loaded</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadingData</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Windows.Markup.IComponentConnector.Connect</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_contentLoaded</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Button</signature>
                        <name>bSaving</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.CheckBox</signature>
                        <name>cbBan</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.ComboBox</signature>
                        <name>cbBanPeriod</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.CheckBox</signature>
                        <name>cbDeactivate</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.CheckBox</signature>
                        <name>cbDelete</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.CheckBox</signature>
                        <name>cbLikes</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>AIRUS_Bot_Moderator.Settings</signature>
                        <name>FormSettings</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBox</signature>
                        <name>tbDeleteDays</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBox</signature>
                        <name>tbGroup</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBox</signature>
                        <name>tbLength</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBox</signature>
                        <name>tbLikesCount</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBox</signature>
                        <name>tbLikesOld</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBox</signature>
                        <name>tbPosts</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBox</signature>
                        <name>tbSleep</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBox</signature>
                        <name>tbWords</name>
                        <newname>n</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProTanki_Robot_Moderator.App</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Main</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
        </module>
        <module>
            <name>Newtonsoft.Json.dll</name>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{2050F94B-4B51-45A2-913D-663F8B3DB301}</name>
                <newname>aa</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{2050F94B-4B51-45A2-913D-663F8B3DB301}/__StaticArrayInitTypeSize=6</signature>
                        <name>$$method0x60001f0-1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{2050F94B-4B51-45A2-913D-663F8B3DB301}/__StaticArrayInitTypeSize=28</signature>
                        <name>$$method0x6000295-1</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,int32&gt;</signature>
                        <name>$$method0x600094a-1</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{2050F94B-4B51-45A2-913D-663F8B3DB301}/__StaticArrayInitTypeSize=52</signature>
                        <name>$$method0x6000b21-1</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{2050F94B-4B51-45A2-913D-663F8B3DB301}/__StaticArrayInitTypeSize=52</signature>
                        <name>$$method0x6000b21-2</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{2050F94B-4B51-45A2-913D-663F8B3DB301}/__StaticArrayInitTypeSize=10</signature>
                        <name>$$method0x6000b6e-1</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{2050F94B-4B51-45A2-913D-663F8B3DB301}/__StaticArrayInitTypeSize=12</signature>
                        <name>$$method0x6000bf7-1</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{2050F94B-4B51-45A2-913D-663F8B3DB301}/__StaticArrayInitTypeSize=10</name>
                <newname>aa/d</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{2050F94B-4B51-45A2-913D-663F8B3DB301}/__StaticArrayInitTypeSize=12</name>
                <newname>aa/c</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{2050F94B-4B51-45A2-913D-663F8B3DB301}/__StaticArrayInitTypeSize=28</name>
                <newname>aa/a</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{2050F94B-4B51-45A2-913D-663F8B3DB301}/__StaticArrayInitTypeSize=52</name>
                <newname>aa/b</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{2050F94B-4B51-45A2-913D-663F8B3DB301}/__StaticArrayInitTypeSize=6</name>
                <newname>aa/e</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonArray</name>
                <newname>v</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonToken)</signature>
                        <name>Add</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Bson.BsonType()</signature>
                        <name>get_Type</name>
                        <newname>af</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Bson.BsonToken&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>n</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Bson.BsonToken&gt;</signature>
                        <name>_children</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonBinary</name>
                <newname>bj</newname>
                <methodlist>
                    <method>
                        <signature>void(unsigned int8[], Newtonsoft.Json.Bson.BsonBinaryType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Bson.BsonBinaryType()</signature>
                        <name>get_BinaryType</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonBinaryType)</signature>
                        <name>set_BinaryType</name>
                        <newname>n</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonBinaryType</signature>
                        <name>&lt;BinaryType&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonBinaryType</name>
                <newname>bz</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonBinaryType</signature>
                        <name>Binary</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonBinaryType</signature>
                        <name>BinaryOld</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonBinaryType</signature>
                        <name>Function</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonBinaryType</signature>
                        <name>Md5</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonBinaryType</signature>
                        <name>UserDefined</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonBinaryType</signature>
                        <name>Uuid</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonBinaryType</signature>
                        <name>UuidOld</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonBinaryWriter</name>
                <newname>g</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.BinaryWriter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>CalculateSize</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(Newtonsoft.Json.Bson.BsonToken)</signature>
                        <name>CalculateSize</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(int32, bool)</signature>
                        <name>CalculateSizeWithLength</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.DateTimeKind()</signature>
                        <name>get_DateTimeKindHandling</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTimeKind)</signature>
                        <name>set_DateTimeKindHandling</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string, int32, System.Nullable`1&lt;int32&gt;)</signature>
                        <name>WriteString</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonToken)</signature>
                        <name>WriteToken</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonToken)</signature>
                        <name>WriteTokenInternal</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(string, int32)</signature>
                        <name>WriteUtf8Bytes</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_largeByteBuffer</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.IO.BinaryWriter</signature>
                        <name>_writer</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.DateTimeKind</signature>
                        <name>&lt;DateTimeKindHandling&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Text.Encoding</signature>
                        <name>Encoding</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonObject</name>
                <newname>br</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, Newtonsoft.Json.Bson.BsonToken)</signature>
                        <name>Add</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Bson.BsonType()</signature>
                        <name>get_Type</name>
                        <newname>af</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Bson.BsonProperty&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>n</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Bson.BsonProperty&gt;</signature>
                        <name>_children</name>
                        <newname>k</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonObjectId</name>
                <methodlist>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>set_Value</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>unsigned int8[]()</signature>
                        <name>Value</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonProperty</name>
                <newname>bx</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Bson.BsonString()</signature>
                        <name>get_Name</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Bson.BsonToken()</signature>
                        <name>get_Value</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonString)</signature>
                        <name>set_Name</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonToken)</signature>
                        <name>set_Value</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonString</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonToken</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonReader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.BinaryReader)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.BinaryReader, bool, System.DateTimeKind)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, bool, System.DateTimeKind)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8)</signature>
                        <name>BytesInSequence</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>EnsureBuffers</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>System.DateTimeKind()</signature>
                        <name>get_DateTimeKindHandling</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_JsonNet35BinaryCompatibility</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReadRootValueAsArray</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>GetLastFullCharStop</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetString</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>MovePosition</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>PopContext</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonReader/ContainerContext)</signature>
                        <name>PushContext</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>ReadAsBytes</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>ReadAsDateTime</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTimeOffset&gt;()</signature>
                        <name>ReadAsDateTimeOffset</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.Decimal&gt;()</signature>
                        <name>ReadAsDecimal</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>ReadAsInt32</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadAsString</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](Newtonsoft.Json.Bson.BsonBinaryType&amp;)</signature>
                        <name>ReadBinary</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>unsigned int8()</signature>
                        <name>ReadByte</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](int32)</signature>
                        <name>ReadBytes</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ReadCodeWScope</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>ReadDouble</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadElement</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ReadInt32</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>ReadInt64</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ReadInternal</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadLengthString</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ReadNormal</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ReadReference</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadString</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Bson.BsonType()</signature>
                        <name>ReadType</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonType)</signature>
                        <name>ReadType</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTimeKind)</signature>
                        <name>set_DateTimeKindHandling</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_JsonNet35BinaryCompatibility</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ReadRootValueAsArray</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonReader/BsonReaderState</signature>
                        <name>_bsonReaderState</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_byteBuffer</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>_charBuffer</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonReader/ContainerContext</signature>
                        <name>_currentContext</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>_currentElementType</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.DateTimeKind</signature>
                        <name>_dateTimeKindHandling</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_jsonNet35BinaryCompatibility</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>System.IO.BinaryReader</signature>
                        <name>_reader</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_readRootValueAsArray</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Bson.BsonReader/ContainerContext&gt;</signature>
                        <name>_stack</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MaxCharBytesSize</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>SeqRange1</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>SeqRange2</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>SeqRange3</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>SeqRange4</name>
                        <newname>k</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.DateTimeKind()</signature>
                        <name>DateTimeKindHandling</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>JsonNet35BinaryCompatibility</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReadRootValueAsArray</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonReader/BsonReaderState</name>
                <newname>Newtonsoft.Json.Bson.BsonReader/b</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonReader/BsonReaderState</signature>
                        <name>CodeWScopeCode</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonReader/BsonReaderState</signature>
                        <name>CodeWScopeScope</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonReader/BsonReaderState</signature>
                        <name>CodeWScopeScopeEnd</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonReader/BsonReaderState</signature>
                        <name>CodeWScopeScopeObject</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonReader/BsonReaderState</signature>
                        <name>CodeWScopeStart</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonReader/BsonReaderState</signature>
                        <name>Normal</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonReader/BsonReaderState</signature>
                        <name>ReferenceId</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonReader/BsonReaderState</signature>
                        <name>ReferenceRef</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonReader/BsonReaderState</signature>
                        <name>ReferenceStart</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonReader/ContainerContext</name>
                <newname>Newtonsoft.Json.Bson.BsonReader/a</newname>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonType)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>Length</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Position</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonRegex</name>
                <newname>bn</newname>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Bson.BsonString()</signature>
                        <name>get_Options</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Bson.BsonString()</signature>
                        <name>get_Pattern</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Bson.BsonType()</signature>
                        <name>get_Type</name>
                        <newname>af</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonString)</signature>
                        <name>set_Options</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonString)</signature>
                        <name>set_Pattern</name>
                        <newname>o</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonString</signature>
                        <name>&lt;Options&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonString</signature>
                        <name>&lt;Pattern&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonString</name>
                <newname>aq</newname>
                <methodlist>
                    <method>
                        <signature>void(object, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ByteCount</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IncludeLength</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ByteCount</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IncludeLength</name>
                        <newname>n</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ByteCount&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IncludeLength&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonToken</name>
                <newname>n</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_CalculatedSize</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Bson.BsonToken()</signature>
                        <name>get_Parent</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Bson.BsonType()</signature>
                        <name>get_Type</name>
                        <newname>af</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_CalculatedSize</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonToken)</signature>
                        <name>set_Parent</name>
                        <newname>o</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;CalculatedSize&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonToken</signature>
                        <name>&lt;Parent&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonType</name>
                <newname>b9</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Array</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Binary</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Boolean</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Code</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>CodeWScope</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Date</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Integer</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Long</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>MaxKey</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>MinKey</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Null</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Number</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Object</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Oid</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Reference</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Regex</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>String</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Symbol</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>TimeStamp</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>Undefined</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int8</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonValue</name>
                <newname>b5</newname>
                <methodlist>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Bson.BsonType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Bson.BsonType()</signature>
                        <name>get_Type</name>
                        <newname>af</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Value</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonType</signature>
                        <name>_type</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_value</name>
                        <newname>l</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Bson.BsonWriter</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.BinaryWriter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonToken)</signature>
                        <name>AddParent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonToken)</signature>
                        <name>AddToken</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Bson.BsonType)</signature>
                        <name>AddValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>System.DateTimeKind()</signature>
                        <name>get_DateTimeKindHandling</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveParent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTimeKind)</signature>
                        <name>set_DateTimeKindHandling</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteComment</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken)</signature>
                        <name>WriteEnd</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteNull</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>WriteObjectId</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WritePropertyName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteRaw</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteRawValue</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>WriteRegex</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteStartArray</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteStartConstructor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteStartObject</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteUndefined</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(float32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int16)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int8)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.DateTimeOffset)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Decimal)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Guid)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Uri)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>WriteValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonToken</signature>
                        <name>_parent</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_propertyName</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonToken</signature>
                        <name>_root</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Bson.BsonBinaryWriter</signature>
                        <name>_writer</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.DateTimeKind()</signature>
                        <name>DateTimeKindHandling</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.ConstructorHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.ConstructorHandling</signature>
                        <name>AllowNonPublicDefaultConstructor</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ConstructorHandling</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.BinaryConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>EnsureReflectionObject</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](object)</signature>
                        <name>GetByteArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](Newtonsoft.Json.JsonReader)</signature>
                        <name>ReadByteArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ReflectionObject</signature>
                        <name>_reflectionObject</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BinaryToArrayName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BinaryTypeName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.BsonObjectIdConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>Newtonsoft.Json.Converters.CustomCreationConverter`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>!0(System.Type)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanWrite</name>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>CanWrite</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.DataSetConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader)</signature>
                        <name>CheckedRead</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.DataTableConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader)</signature>
                        <name>CheckedRead</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, System.Data.DataTable, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>CreateRow</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Type(Newtonsoft.Json.JsonReader)</signature>
                        <name>GetColumnDataType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.DateTimeConverterBase</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.DiscriminatedUnionConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.DiscriminatedUnionConverter/Union(System.Type)</signature>
                        <name>CreateUnion</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>CreateUnionTypeLookup</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader)</signature>
                        <name>ReadAndAssert</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>CasePropertyName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FieldsPropertyName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ThreadSafeStore`2&lt;System.Type,Newtonsoft.Json.Converters.DiscriminatedUnionConverter/Union&gt;</signature>
                        <name>UnionCache</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ThreadSafeStore`2&lt;System.Type,System.Type&gt;</signature>
                        <name>UnionTypeLookupCache</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.DiscriminatedUnionConverter/&lt;&gt;c__DisplayClass1</name>
                <newname>Newtonsoft.Json.Converters.DiscriminatedUnionConverter/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Converters.DiscriminatedUnionConverter/UnionCase)</signature>
                        <name>&lt;WriteJson&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>tag</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.DiscriminatedUnionConverter/&lt;&gt;c__DisplayClass5</name>
                <newname>Newtonsoft.Json.Converters.DiscriminatedUnionConverter/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Converters.DiscriminatedUnionConverter/UnionCase)</signature>
                        <name>&lt;ReadJson&gt;b__3</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>caseName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.DiscriminatedUnionConverter/Union</name>
                <newname>Newtonsoft.Json.Converters.DiscriminatedUnionConverter/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.FSharpFunction()</signature>
                        <name>get_TagReader</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Utilities.FSharpFunction)</signature>
                        <name>set_TagReader</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.FSharpFunction</signature>
                        <name>&lt;TagReader&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Converters.DiscriminatedUnionConverter/UnionCase&gt;</signature>
                        <name>Cases</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.DiscriminatedUnionConverter/UnionCase</name>
                <newname>Newtonsoft.Json.Converters.DiscriminatedUnionConverter/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.FSharpFunction</signature>
                        <name>Constructor</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.FSharpFunction</signature>
                        <name>FieldReader</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.PropertyInfo[]</signature>
                        <name>Fields</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Name</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Tag</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.EntityKeyMemberConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>EnsureReflectionObject</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader)</signature>
                        <name>ReadAndAssert</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, string)</signature>
                        <name>ReadAndAssertProperty</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ReflectionObject</signature>
                        <name>_reflectionObject</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>EntityKeyMemberFullTypeName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>KeyPropertyName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TypePropertyName</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ValuePropertyName</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.ExpandoObjectConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanWrite</name>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader)</signature>
                        <name>ReadList</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader)</signature>
                        <name>ReadObject</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader)</signature>
                        <name>ReadValue</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>CanWrite</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.IsoDateTimeConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>get_Culture</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DateTimeFormat</name>
                    </method>
                    <method>
                        <signature>System.Globalization.DateTimeStyles()</signature>
                        <name>get_DateTimeStyles</name>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>void(System.Globalization.CultureInfo)</signature>
                        <name>set_Culture</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DateTimeFormat</name>
                    </method>
                    <method>
                        <signature>void(System.Globalization.DateTimeStyles)</signature>
                        <name>set_DateTimeStyles</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Globalization.CultureInfo</signature>
                        <name>_culture</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_dateTimeFormat</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Globalization.DateTimeStyles</signature>
                        <name>_dateTimeStyles</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DefaultDateTimeFormat</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>Culture</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>DateTimeFormat</name>
                    </property>
                    <property>
                        <signature>System.Globalization.DateTimeStyles()</signature>
                        <name>DateTimeStyles</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.IXmlDeclaration</name>
                <newname>bq</newname>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_Encoding</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Standalone</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Version</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Encoding</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Standalone</name>
                        <newname>q</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.IXmlDocument</name>
                <newname>b</newname>
                <methodlist>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string)</signature>
                        <name>CreateAttribute</name>
                        <newname>au</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string, string)</signature>
                        <name>CreateAttribute</name>
                        <newname>av</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateCDataSection</name>
                        <newname>am</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateComment</name>
                        <newname>ak</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlElement(string)</signature>
                        <name>CreateElement</name>
                        <newname>as</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlElement(string, string)</signature>
                        <name>CreateElement</name>
                        <newname>at</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string)</signature>
                        <name>CreateProcessingInstruction</name>
                        <newname>ar</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateSignificantWhitespace</name>
                        <newname>ao</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateTextNode</name>
                        <newname>al</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateWhitespace</name>
                        <newname>an</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string, string)</signature>
                        <name>CreateXmlDeclaration</name>
                        <newname>ap</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string, string, string)</signature>
                        <name>CreateXmlDocumentType</name>
                        <newname>aq</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlElement()</signature>
                        <name>get_DocumentElement</name>
                        <newname>aw</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.IXmlDocumentType</name>
                <newname>bg</newname>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_InternalSubset</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Public</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_System</name>
                        <newname>z</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.IXmlElement</name>
                <newname>a7</newname>
                <methodlist>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEmpty</name>
                        <newname>ae</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetPrefixOfNamespace</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>SetAttributeNode</name>
                        <newname>ac</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsEmpty</name>
                        <newname>g</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.IXmlNode</name>
                <newname>cm</newname>
                <methodlist>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>AppendChild</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;()</signature>
                        <name>get_Attributes</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;()</signature>
                        <name>get_ChildNodes</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NamespaceUri</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNodeType()</signature>
                        <name>get_NodeType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode()</signature>
                        <name>get_ParentNode</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_WrappedNode</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                        <newname>g</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;()</signature>
                        <name>Attributes</name>
                        <newname>l</newname>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;()</signature>
                        <name>ChildNodes</name>
                        <newname>k</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LocalName</name>
                        <newname>h</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>NamespaceUri</name>
                        <newname>r</newname>
                    </property>
                    <property>
                        <signature>System.Xml.XmlNodeType()</signature>
                        <name>NodeType</name>
                        <newname>g</newname>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Converters.IXmlNode()</signature>
                        <name>ParentNode</name>
                        <newname>o</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Value</name>
                        <newname>q</newname>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>WrappedNode</name>
                        <newname>s</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.JavaScriptDateTimeConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.KeyValuePairConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.ReflectionObject(System.Type)</signature>
                        <name>InitializeReflectionObject</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader)</signature>
                        <name>ReadAndAssert</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>KeyName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ThreadSafeStore`2&lt;System.Type,Newtonsoft.Json.Utilities.ReflectionObject&gt;</signature>
                        <name>ReflectionObjectPerType</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ValueName</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.RegexConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>bool(System.Text.RegularExpressions.RegexOptions, System.Text.RegularExpressions.RegexOptions)</signature>
                        <name>HasFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>System.Text.RegularExpressions.Regex(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadRegexObject</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader)</signature>
                        <name>ReadRegexString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Bson.BsonWriter, System.Text.RegularExpressions.Regex)</signature>
                        <name>WriteBson</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, System.Text.RegularExpressions.Regex, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>OptionsName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PatternName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.StringEnumConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AllowIntegerValues</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CamelCaseText</name>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AllowIntegerValues</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CamelCaseText</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;AllowIntegerValues&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;CamelCaseText&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AllowIntegerValues</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>CamelCaseText</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.VersionConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XAttributeWrapper</name>
                <newname>b8</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.Linq.XAttribute)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Xml.Linq.XAttribute()</signature>
                        <name>get_Attribute</name>
                        <newname>at</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NamespaceUri</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode()</signature>
                        <name>get_ParentNode</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                        <newname>g</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>System.Xml.Linq.XAttribute()</signature>
                        <name>Attribute</name>
                        <newname>n</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LocalName</name>
                        <newname>al</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>NamespaceUri</name>
                        <newname>am</newname>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Converters.IXmlNode()</signature>
                        <name>ParentNode</name>
                        <newname>an</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Value</name>
                        <newname>ak</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XCommentWrapper</name>
                <newname>bs</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.Linq.XComment)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode()</signature>
                        <name>get_ParentNode</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>System.Xml.Linq.XComment()</signature>
                        <name>get_Text</name>
                        <newname>at</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                        <newname>g</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XContainerWrapper</name>
                <newname>ao</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.Linq.XContainer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>AppendChild</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;()</signature>
                        <name>get_ChildNodes</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Xml.Linq.XContainer()</signature>
                        <name>get_Container</name>
                        <newname>at</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode()</signature>
                        <name>get_ParentNode</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(System.Xml.Linq.XObject)</signature>
                        <name>WrapNode</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;</signature>
                        <name>_childNodes</name>
                        <newname>n</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XDeclarationWrapper</name>
                <newname>y</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.Linq.XDeclaration)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Xml.Linq.XDeclaration()</signature>
                        <name>get_Declaration</name>
                        <newname>at</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Encoding</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNodeType()</signature>
                        <name>get_NodeType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Standalone</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Version</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void(System.Xml.Linq.XDeclaration)</signature>
                        <name>set_Declaration</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Encoding</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Standalone</name>
                        <newname>q</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Xml.Linq.XDeclaration</signature>
                        <name>&lt;Declaration&gt;k__BackingField</name>
                        <newname>o</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XDocumentTypeWrapper</name>
                <newname>p</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.Linq.XDocumentType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_InternalSubset</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Public</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_System</name>
                        <newname>z</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Xml.Linq.XDocumentType</signature>
                        <name>_documentType</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XDocumentWrapper</name>
                <newname>b3</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.Linq.XDocument)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>AppendChild</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string)</signature>
                        <name>CreateAttribute</name>
                        <newname>au</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string, string)</signature>
                        <name>CreateAttribute</name>
                        <newname>av</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateCDataSection</name>
                        <newname>am</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateComment</name>
                        <newname>ak</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlElement(string)</signature>
                        <name>CreateElement</name>
                        <newname>as</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlElement(string, string)</signature>
                        <name>CreateElement</name>
                        <newname>at</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string)</signature>
                        <name>CreateProcessingInstruction</name>
                        <newname>ar</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateSignificantWhitespace</name>
                        <newname>ao</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateTextNode</name>
                        <newname>al</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateWhitespace</name>
                        <newname>an</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string, string)</signature>
                        <name>CreateXmlDeclaration</name>
                        <newname>ap</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string, string, string)</signature>
                        <name>CreateXmlDocumentType</name>
                        <newname>aq</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;()</signature>
                        <name>get_ChildNodes</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Xml.Linq.XDocument()</signature>
                        <name>get_Document</name>
                        <newname>at</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlElement()</signature>
                        <name>get_DocumentElement</name>
                        <newname>aw</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XElementWrapper</name>
                <newname>ck</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.Linq.XElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.XAttributeWrapper(System.Xml.Linq.XAttribute)</signature>
                        <name>&lt;get_Attributes&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;()</signature>
                        <name>get_Attributes</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Xml.Linq.XElement()</signature>
                        <name>get_Element</name>
                        <newname>at</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEmpty</name>
                        <newname>ae</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NamespaceUri</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetPrefixOfNamespace</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>SetAttributeNode</name>
                        <newname>ac</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;System.Xml.Linq.XAttribute,Newtonsoft.Json.Converters.XAttributeWrapper&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>n</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XmlDeclarationWrapper</name>
                <newname>f</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlDeclaration)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Encoding</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Standalone</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Version</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Encoding</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Standalone</name>
                        <newname>q</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Xml.XmlDeclaration</signature>
                        <name>_declaration</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XmlDocumentTypeWrapper</name>
                <newname>a4</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlDocumentType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_InternalSubset</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Public</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_System</name>
                        <newname>z</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Xml.XmlDocumentType</signature>
                        <name>_documentType</name>
                        <newname>m</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XmlDocumentWrapper</name>
                <newname>cd</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlDocument)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string)</signature>
                        <name>CreateAttribute</name>
                        <newname>au</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string, string)</signature>
                        <name>CreateAttribute</name>
                        <newname>av</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateCDataSection</name>
                        <newname>am</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateComment</name>
                        <newname>ak</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlElement(string)</signature>
                        <name>CreateElement</name>
                        <newname>as</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlElement(string, string)</signature>
                        <name>CreateElement</name>
                        <newname>at</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string)</signature>
                        <name>CreateProcessingInstruction</name>
                        <newname>ar</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateSignificantWhitespace</name>
                        <newname>ao</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateTextNode</name>
                        <newname>al</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string)</signature>
                        <name>CreateWhitespace</name>
                        <newname>an</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string, string)</signature>
                        <name>CreateXmlDeclaration</name>
                        <newname>ap</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(string, string, string, string)</signature>
                        <name>CreateXmlDocumentType</name>
                        <newname>aq</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlElement()</signature>
                        <name>get_DocumentElement</name>
                        <newname>aw</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Xml.XmlDocument</signature>
                        <name>_document</name>
                        <newname>y</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XmlElementWrapper</name>
                <newname>t</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEmpty</name>
                        <newname>ae</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetPrefixOfNamespace</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>SetAttributeNode</name>
                        <newname>ac</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Xml.XmlElement</signature>
                        <name>_element</name>
                        <newname>l</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XmlNodeConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>&lt;IsArray&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>&lt;ValueAttributes&gt;b__e</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)</signature>
                        <name>AddJsonArrayAttribute</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.JsonReader)</signature>
                        <name>ConvertTokenToXmlValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>CreateDocumentType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, System.Xml.XmlNamespaceManager)</signature>
                        <name>CreateElement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)</signature>
                        <name>CreateInstruction</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, System.Xml.XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>DeserializeNode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, System.Xml.XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>DeserializeValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DeserializeRootElementName</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_OmitRootObject</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_WriteArrayAttribute</name>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Converters.IXmlNode, System.Xml.XmlNamespaceManager)</signature>
                        <name>GetPropertyName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>IsArray</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(string, string&amp;)</signature>
                        <name>IsNamespaceAttribute</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Converters.IXmlNode, System.Xml.XmlNamespaceManager)</signature>
                        <name>PushParentNamespaces</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, System.Xml.XmlNamespaceManager)</signature>
                        <name>ReadArrayElements</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;(Newtonsoft.Json.JsonReader, System.Xml.XmlNamespaceManager)</signature>
                        <name>ReadAttributeElements</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, System.Xml.XmlNamespaceManager)</signature>
                        <name>ReadElement</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Converters.IXmlNode, System.Xml.XmlNamespaceManager)</signature>
                        <name>ResolveFullName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, System.Xml.XmlNamespaceManager, bool)</signature>
                        <name>SerializeGroupedNodes</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, System.Xml.XmlNamespaceManager, bool)</signature>
                        <name>SerializeNode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DeserializeRootElementName</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_OmitRootObject</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_WriteArrayAttribute</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;)</signature>
                        <name>ValueAttributes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(object)</signature>
                        <name>WrapXml</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;DeserializeRootElementName&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;OmitRootObject&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;WriteArrayAttribute&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CDataName</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CommentName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Converters.IXmlNode,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Converters.IXmlNode,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatef</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DeclarationName</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>JsonNamespaceUri</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SignificantWhitespaceName</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TextName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>WhitespaceName</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>DeserializeRootElementName</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>OmitRootObject</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>WriteArrayAttribute</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XmlNodeConverter/&lt;&gt;c__DisplayClass4</name>
                <newname>Newtonsoft.Json.Converters.XmlNodeConverter/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>&lt;SerializeNode&gt;b__2</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Converters.IXmlNode</signature>
                        <name>node</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XmlNodeConverter/&lt;&gt;c__DisplayClass8</name>
                <newname>Newtonsoft.Json.Converters.XmlNodeConverter/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Converters.IXmlElement)</signature>
                        <name>&lt;ReadArrayElements&gt;b__6</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>propertyName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XmlNodeConverter/&lt;&gt;c__DisplayClassc</name>
                <newname>Newtonsoft.Json.Converters.XmlNodeConverter/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Converters.IXmlElement)</signature>
                        <name>&lt;DeserializeNode&gt;b__a</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>propertyName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XmlNodeWrapper</name>
                <newname>bv</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlNode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>AppendChild</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;()</signature>
                        <name>get_Attributes</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;()</signature>
                        <name>get_ChildNodes</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NamespaceUri</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNodeType()</signature>
                        <name>get_NodeType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode()</signature>
                        <name>get_ParentNode</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_WrappedNode</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(System.Xml.XmlNode)</signature>
                        <name>WrapNode</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;</signature>
                        <name>_childNodes</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>System.Xml.XmlNode</signature>
                        <name>_node</name>
                        <newname>r</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XObjectWrapper</name>
                <newname>a2</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.Linq.XObject)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode(Newtonsoft.Json.Converters.IXmlNode)</signature>
                        <name>AppendChild</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;()</signature>
                        <name>get_Attributes</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Converters.IXmlNode&gt;()</signature>
                        <name>get_ChildNodes</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NamespaceUri</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNodeType()</signature>
                        <name>get_NodeType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode()</signature>
                        <name>get_ParentNode</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_WrappedNode</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                        <newname>g</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Xml.Linq.XObject</signature>
                        <name>_xmlObject</name>
                        <newname>w</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XProcessingInstructionWrapper</name>
                <newname>ab</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.Linq.XProcessingInstruction)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Xml.Linq.XProcessingInstruction()</signature>
                        <name>get_ProcessingInstruction</name>
                        <newname>at</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                        <newname>g</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Converters.XTextWrapper</name>
                <newname>a6</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.Linq.XText)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Converters.IXmlNode()</signature>
                        <name>get_ParentNode</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>System.Xml.Linq.XText()</signature>
                        <name>get_Text</name>
                        <newname>at</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                        <newname>g</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.DateFormatHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.DateFormatHandling</signature>
                        <name>IsoDateFormat</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DateFormatHandling</signature>
                        <name>MicrosoftDateFormat</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.DateParseHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.DateParseHandling</signature>
                        <name>DateTime</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DateParseHandling</signature>
                        <name>DateTimeOffset</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DateParseHandling</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.DateTimeZoneHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling</signature>
                        <name>Local</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling</signature>
                        <name>RoundtripKind</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling</signature>
                        <name>Unspecified</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling</signature>
                        <name>Utc</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.DefaultValueHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.DefaultValueHandling</signature>
                        <name>Ignore</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DefaultValueHandling</signature>
                        <name>IgnoreAndPopulate</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DefaultValueHandling</signature>
                        <name>Include</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DefaultValueHandling</signature>
                        <name>Populate</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.FloatFormatHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.FloatFormatHandling</signature>
                        <name>DefaultValue</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.FloatFormatHandling</signature>
                        <name>String</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.FloatFormatHandling</signature>
                        <name>Symbol</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.FloatParseHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.FloatParseHandling</signature>
                        <name>Decimal</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.FloatParseHandling</signature>
                        <name>Double</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Formatting</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Formatting</signature>
                        <name>Indented</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Formatting</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.IJsonLineInfo</name>
                <methodlist>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LineNumber</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LinePosition</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>HasLineInfo</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>LineNumber</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>LinePosition</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonArrayAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AllowNullItems</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AllowNullItems</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_allowNullItems</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AllowNullItems</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonConstructorAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonContainerAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Description</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Id</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReference</name>
                    </method>
                    <method>
                        <signature>object[]()</signature>
                        <name>get_ItemConverterParameters</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ItemConverterType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ItemIsReference</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling()</signature>
                        <name>get_ItemReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.TypeNameHandling()</signature>
                        <name>get_ItemTypeNameHandling</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Title</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Description</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Id</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsReference</name>
                    </method>
                    <method>
                        <signature>void(object[])</signature>
                        <name>set_ItemConverterParameters</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_ItemConverterType</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ItemIsReference</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.ReferenceLoopHandling)</signature>
                        <name>set_ItemReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.TypeNameHandling)</signature>
                        <name>set_ItemTypeNameHandling</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Title</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>_isReference</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>_itemIsReference</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;</signature>
                        <name>_itemReferenceLoopHandling</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;</signature>
                        <name>_itemTypeNameHandling</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Description&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Id&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>object[]</signature>
                        <name>&lt;ItemConverterParameters&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;ItemConverterType&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Title&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Description</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Id</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsReference</name>
                    </property>
                    <property>
                        <signature>object[]()</signature>
                        <name>ItemConverterParameters</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ItemConverterType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ItemIsReference</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling()</signature>
                        <name>ItemReferenceLoopHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.TypeNameHandling()</signature>
                        <name>ItemTypeNameHandling</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Title</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonContainerType</name>
                <newname>x</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.JsonContainerType</signature>
                        <name>Array</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonContainerType</signature>
                        <name>Constructor</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonContainerType</signature>
                        <name>None</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonContainerType</signature>
                        <name>Object</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonConvert</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string, !!0)</signature>
                        <name>DeserializeAnonymousType</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string, !!0, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>DeserializeAnonymousType</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string)</signature>
                        <name>DeserializeObject</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string, Newtonsoft.Json.JsonConverter[])</signature>
                        <name>DeserializeObject</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>DeserializeObject</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>DeserializeObject</name>
                    </method>
                    <method>
                        <signature>object(string, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>DeserializeObject</name>
                    </method>
                    <method>
                        <signature>object(string, System.Type)</signature>
                        <name>DeserializeObject</name>
                    </method>
                    <method>
                        <signature>object(string, System.Type, Newtonsoft.Json.JsonConverter[])</signature>
                        <name>DeserializeObject</name>
                    </method>
                    <method>
                        <signature>object(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>DeserializeObject</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Threading.Tasks.Task`1&lt;!!0&gt;(string)</signature>
                        <name>DeserializeObjectAsync</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Threading.Tasks.Task`1&lt;!!0&gt;(string, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>DeserializeObjectAsync</name>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task`1&lt;object&gt;(string)</signature>
                        <name>DeserializeObjectAsync</name>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task`1&lt;object&gt;(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>DeserializeObjectAsync</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlDocument(string)</signature>
                        <name>DeserializeXmlNode</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlDocument(string, string)</signature>
                        <name>DeserializeXmlNode</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlDocument(string, string, bool)</signature>
                        <name>DeserializeXmlNode</name>
                    </method>
                    <method>
                        <signature>System.Xml.Linq.XDocument(string)</signature>
                        <name>DeserializeXNode</name>
                    </method>
                    <method>
                        <signature>System.Xml.Linq.XDocument(string, string)</signature>
                        <name>DeserializeXNode</name>
                    </method>
                    <method>
                        <signature>System.Xml.Linq.XDocument(string, string, bool)</signature>
                        <name>DeserializeXNode</name>
                    </method>
                    <method>
                        <signature>string(float64, string)</signature>
                        <name>EnsureDecimalPlace</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>EnsureDecimalPlace</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(float64, string, Newtonsoft.Json.FloatFormatHandling, char, bool)</signature>
                        <name>EnsureFloatFormat</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Func`1&lt;Newtonsoft.Json.JsonSerializerSettings&gt;()</signature>
                        <name>get_DefaultSettings</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>PopulateObject</name>
                    </method>
                    <method>
                        <signature>void(string, object, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>PopulateObject</name>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task(string, object, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>PopulateObjectAsync</name>
                    </method>
                    <method>
                        <signature>string(object)</signature>
                        <name>SerializeObject</name>
                    </method>
                    <method>
                        <signature>string(object, Newtonsoft.Json.Formatting)</signature>
                        <name>SerializeObject</name>
                    </method>
                    <method>
                        <signature>string(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonConverter[])</signature>
                        <name>SerializeObject</name>
                    </method>
                    <method>
                        <signature>string(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>SerializeObject</name>
                    </method>
                    <method>
                        <signature>string(object, Newtonsoft.Json.JsonConverter[])</signature>
                        <name>SerializeObject</name>
                    </method>
                    <method>
                        <signature>string(object, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>SerializeObject</name>
                    </method>
                    <method>
                        <signature>string(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>SerializeObject</name>
                    </method>
                    <method>
                        <signature>string(object, System.Type, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>SerializeObject</name>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task`1&lt;string&gt;(object)</signature>
                        <name>SerializeObjectAsync</name>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task`1&lt;string&gt;(object, Newtonsoft.Json.Formatting)</signature>
                        <name>SerializeObjectAsync</name>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task`1&lt;string&gt;(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>SerializeObjectAsync</name>
                    </method>
                    <method>
                        <signature>string(object, System.Type, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>SerializeObjectInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(System.Xml.XmlNode)</signature>
                        <name>SerializeXmlNode</name>
                    </method>
                    <method>
                        <signature>string(System.Xml.XmlNode, Newtonsoft.Json.Formatting)</signature>
                        <name>SerializeXmlNode</name>
                    </method>
                    <method>
                        <signature>string(System.Xml.XmlNode, Newtonsoft.Json.Formatting, bool)</signature>
                        <name>SerializeXmlNode</name>
                    </method>
                    <method>
                        <signature>string(System.Xml.Linq.XObject)</signature>
                        <name>SerializeXNode</name>
                    </method>
                    <method>
                        <signature>string(System.Xml.Linq.XObject, Newtonsoft.Json.Formatting)</signature>
                        <name>SerializeXNode</name>
                    </method>
                    <method>
                        <signature>string(System.Xml.Linq.XObject, Newtonsoft.Json.Formatting, bool)</signature>
                        <name>SerializeXNode</name>
                    </method>
                    <method>
                        <signature>void(System.Func`1&lt;Newtonsoft.Json.JsonSerializerSettings&gt;)</signature>
                        <name>set_DefaultSettings</name>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(char)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(float32)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(float32, Newtonsoft.Json.FloatFormatHandling, char, bool)</signature>
                        <name>ToString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(float64)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(float64, Newtonsoft.Json.FloatFormatHandling, char, bool)</signature>
                        <name>ToString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(int16)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(int64)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(int8)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(object)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(string, char)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(string, char, Newtonsoft.Json.StringEscapeHandling)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.DateTime)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.DateTime, Newtonsoft.Json.DateFormatHandling, Newtonsoft.Json.DateTimeZoneHandling)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.DateTimeOffset)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.DateTimeOffset, Newtonsoft.Json.DateFormatHandling)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.Decimal)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.Enum)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.Guid)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.Guid, char)</signature>
                        <name>ToString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(System.TimeSpan)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.TimeSpan, char)</signature>
                        <name>ToString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(System.Uri)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.Uri, char)</signature>
                        <name>ToString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(unsigned int16)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(unsigned int32)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(unsigned int64)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.Numerics.BigInteger)</signature>
                        <name>ToStringInternal</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`1&lt;Newtonsoft.Json.JsonSerializerSettings&gt;</signature>
                        <name>&lt;DefaultSettings&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>False</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NaN</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NegativeInfinity</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Null</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PositiveInfinity</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>True</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Undefined</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Func`1&lt;Newtonsoft.Json.JsonSerializerSettings&gt;()</signature>
                        <name>DefaultSettings</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonConvert/&lt;&gt;c__DisplayClass3</name>
                <newname>Newtonsoft.Json.JsonConvert/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>&lt;SerializeObjectAsync&gt;b__2</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Formatting</signature>
                        <name>formatting</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonSerializerSettings</signature>
                        <name>settings</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>value</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.JsonConvert/&lt;&gt;c__DisplayClass7`1</name>
                <newname>Newtonsoft.Json.JsonConvert/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>&lt;DeserializeObjectAsync&gt;b__6</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.JsonSerializerSettings</signature>
                        <name>settings</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>value</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonConvert/&lt;&gt;c__DisplayClassa</name>
                <newname>Newtonsoft.Json.JsonConvert/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>&lt;DeserializeObjectAsync&gt;b__9</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.JsonSerializerSettings</signature>
                        <name>settings</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>value</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonConvert/&lt;&gt;c__DisplayClassd</name>
                <newname>Newtonsoft.Json.JsonConvert/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;PopulateObjectAsync&gt;b__c</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.JsonSerializerSettings</signature>
                        <name>settings</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>target</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>value</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvert</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanRead</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanWrite</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema()</signature>
                        <name>GetSchema</name>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ReadJson</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>WriteJson</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>CanRead</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>CanWrite</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonConverterAttribute</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Type, object[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object[]()</signature>
                        <name>get_ConverterParameters</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ConverterType</name>
                    </method>
                    <method>
                        <signature>void(object[])</signature>
                        <name>set_ConverterParameters</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>_converterType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object[]</signature>
                        <name>&lt;ConverterParameters&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object[]()</signature>
                        <name>ConverterParameters</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ConverterType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonConverterCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonDictionaryAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonException(Newtonsoft.Json.IJsonLineInfo, string, string)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonExtensionDataAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReadData</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_WriteData</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ReadData</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_WriteData</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ReadData&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;WriteData&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>ReadData</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>WriteData</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonIgnoreAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonObjectAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.MemberSerialization)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Required()</signature>
                        <name>get_ItemRequired</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.MemberSerialization()</signature>
                        <name>get_MemberSerialization</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Required)</signature>
                        <name>set_ItemRequired</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.MemberSerialization)</signature>
                        <name>set_MemberSerialization</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Required&gt;</signature>
                        <name>_itemRequired</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.MemberSerialization</signature>
                        <name>_memberSerialization</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Required()</signature>
                        <name>ItemRequired</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.MemberSerialization()</signature>
                        <name>MemberSerialization</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonPosition</name>
                <newname>h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonContainerType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.JsonPosition&gt;)</signature>
                        <name>BuildPath</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.IJsonLineInfo, string, string)</signature>
                        <name>FormatMessage</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.JsonContainerType)</signature>
                        <name>TypeHasIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder)</signature>
                        <name>WriteTo</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>HasIndex</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Position</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PropertyName</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>SpecialCharacters</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonContainerType</signature>
                        <name>Type</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonPropertyAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DefaultValueHandling()</signature>
                        <name>get_DefaultValueHandling</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReference</name>
                    </method>
                    <method>
                        <signature>object[]()</signature>
                        <name>get_ItemConverterParameters</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ItemConverterType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ItemIsReference</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling()</signature>
                        <name>get_ItemReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.TypeNameHandling()</signature>
                        <name>get_ItemTypeNameHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.NullValueHandling()</signature>
                        <name>get_NullValueHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.ObjectCreationHandling()</signature>
                        <name>get_ObjectCreationHandling</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Order</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PropertyName</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling()</signature>
                        <name>get_ReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Required()</signature>
                        <name>get_Required</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.TypeNameHandling()</signature>
                        <name>get_TypeNameHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DefaultValueHandling)</signature>
                        <name>set_DefaultValueHandling</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsReference</name>
                    </method>
                    <method>
                        <signature>void(object[])</signature>
                        <name>set_ItemConverterParameters</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_ItemConverterType</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ItemIsReference</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.ReferenceLoopHandling)</signature>
                        <name>set_ItemReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.TypeNameHandling)</signature>
                        <name>set_ItemTypeNameHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.NullValueHandling)</signature>
                        <name>set_NullValueHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.ObjectCreationHandling)</signature>
                        <name>set_ObjectCreationHandling</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Order</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PropertyName</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.ReferenceLoopHandling)</signature>
                        <name>set_ReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Required)</signature>
                        <name>set_Required</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.TypeNameHandling)</signature>
                        <name>set_TypeNameHandling</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.DefaultValueHandling&gt;</signature>
                        <name>_defaultValueHandling</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>_isReference</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>_itemIsReference</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;</signature>
                        <name>_itemReferenceLoopHandling</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;</signature>
                        <name>_itemTypeNameHandling</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.NullValueHandling&gt;</signature>
                        <name>_nullValueHandling</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ObjectCreationHandling&gt;</signature>
                        <name>_objectCreationHandling</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>_order</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;</signature>
                        <name>_referenceLoopHandling</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Required&gt;</signature>
                        <name>_required</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;</signature>
                        <name>_typeNameHandling</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>object[]</signature>
                        <name>&lt;ItemConverterParameters&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;ItemConverterType&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;PropertyName&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.DefaultValueHandling()</signature>
                        <name>DefaultValueHandling</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsReference</name>
                    </property>
                    <property>
                        <signature>object[]()</signature>
                        <name>ItemConverterParameters</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ItemConverterType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ItemIsReference</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling()</signature>
                        <name>ItemReferenceLoopHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.TypeNameHandling()</signature>
                        <name>ItemTypeNameHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.NullValueHandling()</signature>
                        <name>NullValueHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.ObjectCreationHandling()</signature>
                        <name>ObjectCreationHandling</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Order</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PropertyName</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling()</signature>
                        <name>ReferenceLoopHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Required()</signature>
                        <name>Required</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.TypeNameHandling()</signature>
                        <name>TypeNameHandling</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonReader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CloseInput</name>
                    </method>
                    <method>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>get_Culture</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonReader/State()</signature>
                        <name>get_CurrentState</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DateFormatString</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DateParseHandling()</signature>
                        <name>get_DateParseHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling()</signature>
                        <name>get_DateTimeZoneHandling</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Depth</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.FloatParseHandling()</signature>
                        <name>get_FloatParseHandling</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MaxDepth</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_QuoteChar</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_SupportMultipleContent</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonToken()</signature>
                        <name>get_TokenType</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ValueType</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonPosition(int32)</signature>
                        <name>GetPosition</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonContainerType(Newtonsoft.Json.JsonToken)</signature>
                        <name>GetTypeForCloseToken</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsWrappedInTypeObject</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonContainerType()</signature>
                        <name>Peek</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonContainerType()</signature>
                        <name>Pop</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonContainerType)</signature>
                        <name>Push</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>ReadAsBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>ReadAsBytesInternal</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>ReadAsDateTime</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>ReadAsDateTimeInternal</name>
                        <newname>ag</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTimeOffset&gt;()</signature>
                        <name>ReadAsDateTimeOffset</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTimeOffset&gt;()</signature>
                        <name>ReadAsDateTimeOffsetInternal</name>
                        <newname>ac</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.Decimal&gt;()</signature>
                        <name>ReadAsDecimal</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.Decimal&gt;()</signature>
                        <name>ReadAsDecimalInternal</name>
                        <newname>af</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>ReadAsInt32</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>ReadAsInt32Internal</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadAsString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadAsStringInternal</name>
                        <newname>ae</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ReadInternal</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CloseInput</name>
                    </method>
                    <method>
                        <signature>void(System.Globalization.CultureInfo)</signature>
                        <name>set_Culture</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DateFormatString</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DateParseHandling)</signature>
                        <name>set_DateParseHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DateTimeZoneHandling)</signature>
                        <name>set_DateTimeZoneHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.FloatParseHandling)</signature>
                        <name>set_FloatParseHandling</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MaxDepth</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>set_QuoteChar</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_SupportMultipleContent</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SetFinished</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>SetPostValueState</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SetStateBasedOnCurrent</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken)</signature>
                        <name>SetToken</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken, object)</signature>
                        <name>SetToken</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken, object, bool)</signature>
                        <name>SetToken</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Skip</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateScopeWithFinishedValue</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken)</signature>
                        <name>ValidateEnd</name>
                        <newname>h</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Globalization.CultureInfo</signature>
                        <name>_culture</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonPosition</signature>
                        <name>_currentPosition</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>_currentState</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_dateFormatString</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DateParseHandling</signature>
                        <name>_dateParseHandling</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling</signature>
                        <name>_dateTimeZoneHandling</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.FloatParseHandling</signature>
                        <name>_floatParseHandling</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_hasExceededMaxDepth</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>_maxDepth</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>char</signature>
                        <name>_quoteChar</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ReadType</signature>
                        <name>_readType</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.JsonPosition&gt;</signature>
                        <name>_stack</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>_tokenType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_value</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;CloseInput&gt;k__BackingField</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;SupportMultipleContent&gt;k__BackingField</name>
                        <newname>p</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>CloseInput</name>
                    </property>
                    <property>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>Culture</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.JsonReader/State()</signature>
                        <name>CurrentState</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>DateFormatString</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.DateParseHandling()</signature>
                        <name>DateParseHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling()</signature>
                        <name>DateTimeZoneHandling</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Depth</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.FloatParseHandling()</signature>
                        <name>FloatParseHandling</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>MaxDepth</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Path</name>
                    </property>
                    <property>
                        <signature>char()</signature>
                        <name>QuoteChar</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>SupportMultipleContent</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.JsonToken()</signature>
                        <name>TokenType</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>Value</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ValueType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonReader/State</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>Array</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>ArrayStart</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>Closed</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>Complete</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>Constructor</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>ConstructorStart</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>Finished</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>Object</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>ObjectStart</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>PostValue</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>Property</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader/State</signature>
                        <name>Start</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonReaderException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception, string, int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonReaderException(Newtonsoft.Json.IJsonLineInfo, string, string, System.Exception)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonReaderException(Newtonsoft.Json.JsonReader, string)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonReaderException(Newtonsoft.Json.JsonReader, string, System.Exception)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LineNumber</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LinePosition</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_LineNumber</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_LinePosition</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Path</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;LineNumber&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;LinePosition&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Path&gt;k__BackingField</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>LineNumber</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>LinePosition</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Path</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonRequiredAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonSerializationException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonSerializationException(Newtonsoft.Json.IJsonLineInfo, string, string, System.Exception)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonSerializationException(Newtonsoft.Json.JsonReader, string)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonSerializationException(Newtonsoft.Json.JsonReader, string, System.Exception)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Newtonsoft.Json.Serialization.ErrorEventArgs&gt;)</signature>
                        <name>add_Error</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonSerializer, Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>ApplySerializerSettings</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonSerializer()</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonSerializer(Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonSerializer()</signature>
                        <name>CreateDefault</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonSerializer(Newtonsoft.Json.JsonSerializerSettings)</signature>
                        <name>CreateDefault</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(Newtonsoft.Json.JsonReader)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <signature>object(System.IO.TextReader, System.Type)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type)</signature>
                        <name>DeserializeInternal</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.SerializationBinder()</signature>
                        <name>get_Binder</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CheckAdditionalContent</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.ConstructorHandling()</signature>
                        <name>get_ConstructorHandling</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.StreamingContext()</signature>
                        <name>get_Context</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.IContractResolver()</signature>
                        <name>get_ContractResolver</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverterCollection()</signature>
                        <name>get_Converters</name>
                    </method>
                    <method>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>get_Culture</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DateFormatHandling()</signature>
                        <name>get_DateFormatHandling</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DateFormatString</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DateParseHandling()</signature>
                        <name>get_DateParseHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling()</signature>
                        <name>get_DateTimeZoneHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DefaultValueHandling()</signature>
                        <name>get_DefaultValueHandling</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEqualityComparer()</signature>
                        <name>get_EqualityComparer</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.FloatFormatHandling()</signature>
                        <name>get_FloatFormatHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.FloatParseHandling()</signature>
                        <name>get_FloatParseHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Formatting()</signature>
                        <name>get_Formatting</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MaxDepth</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.MetadataPropertyHandling()</signature>
                        <name>get_MetadataPropertyHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.MissingMemberHandling()</signature>
                        <name>get_MissingMemberHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.NullValueHandling()</signature>
                        <name>get_NullValueHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.ObjectCreationHandling()</signature>
                        <name>get_ObjectCreationHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.PreserveReferencesHandling()</signature>
                        <name>get_PreserveReferencesHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling()</signature>
                        <name>get_ReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.IReferenceResolver()</signature>
                        <name>get_ReferenceResolver</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.StringEscapeHandling()</signature>
                        <name>get_StringEscapeHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ITraceWriter()</signature>
                        <name>get_TraceWriter</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.Formatters.FormatterAssemblyStyle()</signature>
                        <name>get_TypeNameAssemblyFormat</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.TypeNameHandling()</signature>
                        <name>get_TypeNameHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverter(System.Collections.Generic.IList`1&lt;Newtonsoft.Json.JsonConverter&gt;, System.Type)</signature>
                        <name>GetMatchingConverter</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverter(System.Type)</signature>
                        <name>GetMatchingConverter</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.IReferenceResolver()</signature>
                        <name>GetReferenceResolver</name>
                        <newname>af</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsCheckAdditionalContentSet</name>
                        <newname>ae</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.ErrorEventArgs)</signature>
                        <name>OnError</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, object)</signature>
                        <name>Populate</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextReader, object)</signature>
                        <name>Populate</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, object)</signature>
                        <name>PopulateInternal</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Newtonsoft.Json.Serialization.ErrorEventArgs&gt;)</signature>
                        <name>remove_Error</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, System.Globalization.CultureInfo, System.Nullable`1&lt;Newtonsoft.Json.DateTimeZoneHandling&gt;, System.Nullable`1&lt;Newtonsoft.Json.DateParseHandling&gt;, System.Nullable`1&lt;Newtonsoft.Json.FloatParseHandling&gt;, System.Nullable`1&lt;int32&gt;, string)</signature>
                        <name>ResetReader</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, System.Type)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object, System.Type)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, System.Type)</signature>
                        <name>SerializeInternal</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationBinder)</signature>
                        <name>set_Binder</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CheckAdditionalContent</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.ConstructorHandling)</signature>
                        <name>set_ConstructorHandling</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.StreamingContext)</signature>
                        <name>set_Context</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.IContractResolver)</signature>
                        <name>set_ContractResolver</name>
                    </method>
                    <method>
                        <signature>void(System.Globalization.CultureInfo)</signature>
                        <name>set_Culture</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DateFormatHandling)</signature>
                        <name>set_DateFormatHandling</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DateFormatString</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DateParseHandling)</signature>
                        <name>set_DateParseHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DateTimeZoneHandling)</signature>
                        <name>set_DateTimeZoneHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DefaultValueHandling)</signature>
                        <name>set_DefaultValueHandling</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.IEqualityComparer)</signature>
                        <name>set_EqualityComparer</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.FloatFormatHandling)</signature>
                        <name>set_FloatFormatHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.FloatParseHandling)</signature>
                        <name>set_FloatParseHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Formatting)</signature>
                        <name>set_Formatting</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MaxDepth</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.MetadataPropertyHandling)</signature>
                        <name>set_MetadataPropertyHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.MissingMemberHandling)</signature>
                        <name>set_MissingMemberHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.NullValueHandling)</signature>
                        <name>set_NullValueHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.ObjectCreationHandling)</signature>
                        <name>set_ObjectCreationHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.PreserveReferencesHandling)</signature>
                        <name>set_PreserveReferencesHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.ReferenceLoopHandling)</signature>
                        <name>set_ReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.IReferenceResolver)</signature>
                        <name>set_ReferenceResolver</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.StringEscapeHandling)</signature>
                        <name>set_StringEscapeHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.ITraceWriter)</signature>
                        <name>set_TraceWriter</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle)</signature>
                        <name>set_TypeNameAssemblyFormat</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.TypeNameHandling)</signature>
                        <name>set_TypeNameHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, System.Globalization.CultureInfo&amp;, System.Nullable`1&lt;Newtonsoft.Json.DateTimeZoneHandling&gt;&amp;, System.Nullable`1&lt;Newtonsoft.Json.DateParseHandling&gt;&amp;, System.Nullable`1&lt;Newtonsoft.Json.FloatParseHandling&gt;&amp;, System.Nullable`1&lt;int32&gt;&amp;, string&amp;)</signature>
                        <name>SetupReader</name>
                        <newname>ad</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Runtime.Serialization.SerializationBinder</signature>
                        <name>_binder</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>_checkAdditionalContent</name>
                        <newname>ab</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ConstructorHandling</signature>
                        <name>_constructorHandling</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.Serialization.StreamingContext</signature>
                        <name>_context</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.IContractResolver</signature>
                        <name>_contractResolver</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonConverterCollection</signature>
                        <name>_converters</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Globalization.CultureInfo</signature>
                        <name>_culture</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.DateFormatHandling&gt;</signature>
                        <name>_dateFormatHandling</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_dateFormatString</name>
                        <newname>ac</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_dateFormatStringSet</name>
                        <newname>ad</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.DateParseHandling&gt;</signature>
                        <name>_dateParseHandling</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.DateTimeZoneHandling&gt;</signature>
                        <name>_dateTimeZoneHandling</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DefaultValueHandling</signature>
                        <name>_defaultValueHandling</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.IEqualityComparer</signature>
                        <name>_equalityComparer</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.FloatFormatHandling&gt;</signature>
                        <name>_floatFormatHandling</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.FloatParseHandling&gt;</signature>
                        <name>_floatParseHandling</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Formatting&gt;</signature>
                        <name>_formatting</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>_maxDepth</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_maxDepthSet</name>
                        <newname>aa</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.MetadataPropertyHandling</signature>
                        <name>_metadataPropertyHandling</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.MissingMemberHandling</signature>
                        <name>_missingMemberHandling</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.NullValueHandling</signature>
                        <name>_nullValueHandling</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ObjectCreationHandling</signature>
                        <name>_objectCreationHandling</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.PreserveReferencesHandling</signature>
                        <name>_preserveReferencesHandling</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling</signature>
                        <name>_referenceLoopHandling</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.IReferenceResolver</signature>
                        <name>_referenceResolver</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.StringEscapeHandling&gt;</signature>
                        <name>_stringEscapeHandling</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ITraceWriter</signature>
                        <name>_traceWriter</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.Serialization.Formatters.FormatterAssemblyStyle</signature>
                        <name>_typeNameAssemblyFormat</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.TypeNameHandling</signature>
                        <name>_typeNameHandling</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;Newtonsoft.Json.Serialization.ErrorEventArgs&gt;</signature>
                        <name>Error</name>
                        <newname>ae</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Runtime.Serialization.SerializationBinder()</signature>
                        <name>Binder</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>CheckAdditionalContent</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.ConstructorHandling()</signature>
                        <name>ConstructorHandling</name>
                    </property>
                    <property>
                        <signature>System.Runtime.Serialization.StreamingContext()</signature>
                        <name>Context</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.IContractResolver()</signature>
                        <name>ContractResolver</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.JsonConverterCollection()</signature>
                        <name>Converters</name>
                    </property>
                    <property>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>Culture</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.DateFormatHandling()</signature>
                        <name>DateFormatHandling</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>DateFormatString</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.DateParseHandling()</signature>
                        <name>DateParseHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling()</signature>
                        <name>DateTimeZoneHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.DefaultValueHandling()</signature>
                        <name>DefaultValueHandling</name>
                    </property>
                    <property>
                        <signature>System.Collections.IEqualityComparer()</signature>
                        <name>EqualityComparer</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.FloatFormatHandling()</signature>
                        <name>FloatFormatHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.FloatParseHandling()</signature>
                        <name>FloatParseHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Formatting()</signature>
                        <name>Formatting</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>MaxDepth</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.MetadataPropertyHandling()</signature>
                        <name>MetadataPropertyHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.MissingMemberHandling()</signature>
                        <name>MissingMemberHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.NullValueHandling()</signature>
                        <name>NullValueHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.ObjectCreationHandling()</signature>
                        <name>ObjectCreationHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.PreserveReferencesHandling()</signature>
                        <name>PreserveReferencesHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling()</signature>
                        <name>ReferenceLoopHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.IReferenceResolver()</signature>
                        <name>ReferenceResolver</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.StringEscapeHandling()</signature>
                        <name>StringEscapeHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.ITraceWriter()</signature>
                        <name>TraceWriter</name>
                    </property>
                    <property>
                        <signature>System.Runtime.Serialization.Formatters.FormatterAssemblyStyle()</signature>
                        <name>TypeNameAssemblyFormat</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.TypeNameHandling()</signature>
                        <name>TypeNameHandling</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>System.EventHandler`1&lt;Newtonsoft.Json.Serialization.ErrorEventArgs&gt;</signature>
                        <name>Error</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>Newtonsoft.Json.JsonSerializerSettings</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.SerializationBinder()</signature>
                        <name>get_Binder</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CheckAdditionalContent</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.ConstructorHandling()</signature>
                        <name>get_ConstructorHandling</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.StreamingContext()</signature>
                        <name>get_Context</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.IContractResolver()</signature>
                        <name>get_ContractResolver</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.JsonConverter&gt;()</signature>
                        <name>get_Converters</name>
                    </method>
                    <method>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>get_Culture</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DateFormatHandling()</signature>
                        <name>get_DateFormatHandling</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DateFormatString</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DateParseHandling()</signature>
                        <name>get_DateParseHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling()</signature>
                        <name>get_DateTimeZoneHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DefaultValueHandling()</signature>
                        <name>get_DefaultValueHandling</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEqualityComparer()</signature>
                        <name>get_EqualityComparer</name>
                    </method>
                    <method>
                        <signature>System.EventHandler`1&lt;Newtonsoft.Json.Serialization.ErrorEventArgs&gt;()</signature>
                        <name>get_Error</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.FloatFormatHandling()</signature>
                        <name>get_FloatFormatHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.FloatParseHandling()</signature>
                        <name>get_FloatParseHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Formatting()</signature>
                        <name>get_Formatting</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MaxDepth</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.MetadataPropertyHandling()</signature>
                        <name>get_MetadataPropertyHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.MissingMemberHandling()</signature>
                        <name>get_MissingMemberHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.NullValueHandling()</signature>
                        <name>get_NullValueHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.ObjectCreationHandling()</signature>
                        <name>get_ObjectCreationHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.PreserveReferencesHandling()</signature>
                        <name>get_PreserveReferencesHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling()</signature>
                        <name>get_ReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.IReferenceResolver()</signature>
                        <name>get_ReferenceResolver</name>
                    </method>
                    <method>
                        <signature>System.Func`1&lt;Newtonsoft.Json.Serialization.IReferenceResolver&gt;()</signature>
                        <name>get_ReferenceResolverProvider</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.StringEscapeHandling()</signature>
                        <name>get_StringEscapeHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ITraceWriter()</signature>
                        <name>get_TraceWriter</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.Formatters.FormatterAssemblyStyle()</signature>
                        <name>get_TypeNameAssemblyFormat</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.TypeNameHandling()</signature>
                        <name>get_TypeNameHandling</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationBinder)</signature>
                        <name>set_Binder</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CheckAdditionalContent</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.ConstructorHandling)</signature>
                        <name>set_ConstructorHandling</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.StreamingContext)</signature>
                        <name>set_Context</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.IContractResolver)</signature>
                        <name>set_ContractResolver</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;Newtonsoft.Json.JsonConverter&gt;)</signature>
                        <name>set_Converters</name>
                    </method>
                    <method>
                        <signature>void(System.Globalization.CultureInfo)</signature>
                        <name>set_Culture</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DateFormatHandling)</signature>
                        <name>set_DateFormatHandling</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DateFormatString</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DateParseHandling)</signature>
                        <name>set_DateParseHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DateTimeZoneHandling)</signature>
                        <name>set_DateTimeZoneHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DefaultValueHandling)</signature>
                        <name>set_DefaultValueHandling</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.IEqualityComparer)</signature>
                        <name>set_EqualityComparer</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Newtonsoft.Json.Serialization.ErrorEventArgs&gt;)</signature>
                        <name>set_Error</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.FloatFormatHandling)</signature>
                        <name>set_FloatFormatHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.FloatParseHandling)</signature>
                        <name>set_FloatParseHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Formatting)</signature>
                        <name>set_Formatting</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MaxDepth</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.MetadataPropertyHandling)</signature>
                        <name>set_MetadataPropertyHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.MissingMemberHandling)</signature>
                        <name>set_MissingMemberHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.NullValueHandling)</signature>
                        <name>set_NullValueHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.ObjectCreationHandling)</signature>
                        <name>set_ObjectCreationHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.PreserveReferencesHandling)</signature>
                        <name>set_PreserveReferencesHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.ReferenceLoopHandling)</signature>
                        <name>set_ReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.IReferenceResolver)</signature>
                        <name>set_ReferenceResolver</name>
                    </method>
                    <method>
                        <signature>void(System.Func`1&lt;Newtonsoft.Json.Serialization.IReferenceResolver&gt;)</signature>
                        <name>set_ReferenceResolverProvider</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.StringEscapeHandling)</signature>
                        <name>set_StringEscapeHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.ITraceWriter)</signature>
                        <name>set_TraceWriter</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle)</signature>
                        <name>set_TypeNameAssemblyFormat</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.TypeNameHandling)</signature>
                        <name>set_TypeNameHandling</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>_checkAdditionalContent</name>
                        <newname>ae</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ConstructorHandling&gt;</signature>
                        <name>_constructorHandling</name>
                        <newname>ar</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;System.Runtime.Serialization.StreamingContext&gt;</signature>
                        <name>_context</name>
                        <newname>aq</newname>
                    </field>
                    <field>
                        <signature>System.Globalization.CultureInfo</signature>
                        <name>_culture</name>
                        <newname>ad</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.DateFormatHandling&gt;</signature>
                        <name>_dateFormatHandling</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_dateFormatString</name>
                        <newname>ah</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_dateFormatStringSet</name>
                        <newname>ai</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.DateParseHandling&gt;</signature>
                        <name>_dateParseHandling</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.DateTimeZoneHandling&gt;</signature>
                        <name>_dateTimeZoneHandling</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.DefaultValueHandling&gt;</signature>
                        <name>_defaultValueHandling</name>
                        <newname>ak</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.FloatFormatHandling&gt;</signature>
                        <name>_floatFormatHandling</name>
                        <newname>aa</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.FloatParseHandling&gt;</signature>
                        <name>_floatParseHandling</name>
                        <newname>ab</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Formatting&gt;</signature>
                        <name>_formatting</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>_maxDepth</name>
                        <newname>af</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_maxDepthSet</name>
                        <newname>ag</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.MetadataPropertyHandling&gt;</signature>
                        <name>_metadataPropertyHandling</name>
                        <newname>at</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.MissingMemberHandling&gt;</signature>
                        <name>_missingMemberHandling</name>
                        <newname>ao</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.NullValueHandling&gt;</signature>
                        <name>_nullValueHandling</name>
                        <newname>am</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ObjectCreationHandling&gt;</signature>
                        <name>_objectCreationHandling</name>
                        <newname>an</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.PreserveReferencesHandling&gt;</signature>
                        <name>_preserveReferencesHandling</name>
                        <newname>al</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;</signature>
                        <name>_referenceLoopHandling</name>
                        <newname>ap</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.StringEscapeHandling&gt;</signature>
                        <name>_stringEscapeHandling</name>
                        <newname>ac</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;System.Runtime.Serialization.Formatters.FormatterAssemblyStyle&gt;</signature>
                        <name>_typeNameAssemblyFormat</name>
                        <newname>aj</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;</signature>
                        <name>_typeNameHandling</name>
                        <newname>as</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.Serialization.SerializationBinder</signature>
                        <name>&lt;Binder&gt;k__BackingField</name>
                        <newname>az</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.IContractResolver</signature>
                        <name>&lt;ContractResolver&gt;k__BackingField</name>
                        <newname>av</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.JsonConverter&gt;</signature>
                        <name>&lt;Converters&gt;k__BackingField</name>
                        <newname>au</newname>
                    </field>
                    <field>
                        <signature>System.Collections.IEqualityComparer</signature>
                        <name>&lt;EqualityComparer&gt;k__BackingField</name>
                        <newname>aw</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;Newtonsoft.Json.Serialization.ErrorEventArgs&gt;</signature>
                        <name>&lt;Error&gt;k__BackingField</name>
                        <newname>a0</newname>
                    </field>
                    <field>
                        <signature>System.Func`1&lt;Newtonsoft.Json.Serialization.IReferenceResolver&gt;</signature>
                        <name>&lt;ReferenceResolverProvider&gt;k__BackingField</name>
                        <newname>ax</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ITraceWriter</signature>
                        <name>&lt;TraceWriter&gt;k__BackingField</name>
                        <newname>ay</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>DefaultCheckAdditionalContent</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ConstructorHandling</signature>
                        <name>DefaultConstructorHandling</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.Serialization.StreamingContext</signature>
                        <name>DefaultContext</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>System.Globalization.CultureInfo</signature>
                        <name>DefaultCulture</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DateFormatHandling</signature>
                        <name>DefaultDateFormatHandling</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DefaultDateFormatString</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DateParseHandling</signature>
                        <name>DefaultDateParseHandling</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling</signature>
                        <name>DefaultDateTimeZoneHandling</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DefaultValueHandling</signature>
                        <name>DefaultDefaultValueHandling</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.FloatFormatHandling</signature>
                        <name>DefaultFloatFormatHandling</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.FloatParseHandling</signature>
                        <name>DefaultFloatParseHandling</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.Serialization.Formatters.FormatterAssemblyStyle</signature>
                        <name>DefaultFormatterAssemblyStyle</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Formatting</signature>
                        <name>DefaultFormatting</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.MetadataPropertyHandling</signature>
                        <name>DefaultMetadataPropertyHandling</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.MissingMemberHandling</signature>
                        <name>DefaultMissingMemberHandling</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.NullValueHandling</signature>
                        <name>DefaultNullValueHandling</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ObjectCreationHandling</signature>
                        <name>DefaultObjectCreationHandling</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.PreserveReferencesHandling</signature>
                        <name>DefaultPreserveReferencesHandling</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling</signature>
                        <name>DefaultReferenceLoopHandling</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.StringEscapeHandling</signature>
                        <name>DefaultStringEscapeHandling</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.Serialization.Formatters.FormatterAssemblyStyle</signature>
                        <name>DefaultTypeNameAssemblyFormat</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.TypeNameHandling</signature>
                        <name>DefaultTypeNameHandling</name>
                        <newname>h</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Runtime.Serialization.SerializationBinder()</signature>
                        <name>Binder</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>CheckAdditionalContent</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.ConstructorHandling()</signature>
                        <name>ConstructorHandling</name>
                    </property>
                    <property>
                        <signature>System.Runtime.Serialization.StreamingContext()</signature>
                        <name>Context</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.IContractResolver()</signature>
                        <name>ContractResolver</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.JsonConverter&gt;()</signature>
                        <name>Converters</name>
                    </property>
                    <property>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>Culture</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.DateFormatHandling()</signature>
                        <name>DateFormatHandling</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>DateFormatString</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.DateParseHandling()</signature>
                        <name>DateParseHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling()</signature>
                        <name>DateTimeZoneHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.DefaultValueHandling()</signature>
                        <name>DefaultValueHandling</name>
                    </property>
                    <property>
                        <signature>System.Collections.IEqualityComparer()</signature>
                        <name>EqualityComparer</name>
                    </property>
                    <property>
                        <signature>System.EventHandler`1&lt;Newtonsoft.Json.Serialization.ErrorEventArgs&gt;()</signature>
                        <name>Error</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.FloatFormatHandling()</signature>
                        <name>FloatFormatHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.FloatParseHandling()</signature>
                        <name>FloatParseHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Formatting()</signature>
                        <name>Formatting</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>MaxDepth</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.MetadataPropertyHandling()</signature>
                        <name>MetadataPropertyHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.MissingMemberHandling()</signature>
                        <name>MissingMemberHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.NullValueHandling()</signature>
                        <name>NullValueHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.ObjectCreationHandling()</signature>
                        <name>ObjectCreationHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.PreserveReferencesHandling()</signature>
                        <name>PreserveReferencesHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling()</signature>
                        <name>ReferenceLoopHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.IReferenceResolver()</signature>
                        <name>ReferenceResolver</name>
                    </property>
                    <property>
                        <signature>System.Func`1&lt;Newtonsoft.Json.Serialization.IReferenceResolver&gt;()</signature>
                        <name>ReferenceResolverProvider</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.StringEscapeHandling()</signature>
                        <name>StringEscapeHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.ITraceWriter()</signature>
                        <name>TraceWriter</name>
                    </property>
                    <property>
                        <signature>System.Runtime.Serialization.Formatters.FormatterAssemblyStyle()</signature>
                        <name>TypeNameAssemblyFormat</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.TypeNameHandling()</signature>
                        <name>TypeNameHandling</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonSerializerSettings/&lt;&gt;c__DisplayClass1</name>
                <newname>Newtonsoft.Json.JsonSerializerSettings/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.IReferenceResolver()</signature>
                        <name>&lt;set_ReferenceResolver&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.IReferenceResolver</signature>
                        <name>value</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonTextReader</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.TextReader)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(string, System.Globalization.CultureInfo)</signature>
                        <name>BigIntegerParse</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(char[], int32, char[], int32, int32)</signature>
                        <name>BlockCopyChars</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearRecentString</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>bool(bool)</signature>
                        <name>EatWhitespace</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(int32, bool)</signature>
                        <name>EnsureChars</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LineNumber</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LinePosition</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.StringBuffer()</signature>
                        <name>GetBuffer</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>HasLineInfo</name>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>IsSeparator</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>MatchValue</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>MatchValueWithTrailingSeparator</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>OnNewLine</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ParseComment</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ParseConstructor</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ParseFalse</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ParseNull</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ParseNumber</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ParseNumberNaN</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ParseNumberNegativeInfinity</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ParseNumberPositiveInfinity</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ParseObject</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ParsePostValue</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ParseProperty</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>ParseString</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ParseTrue</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ParseUndefined</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>ParseUnicode</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ParseUnquotedProperty</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ParseValue</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>ProcessCarriageReturn</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ProcessLineFeed</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>ReadAsBytes</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>ReadAsDateTime</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTimeOffset&gt;()</signature>
                        <name>ReadAsDateTimeOffset</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.Decimal&gt;()</signature>
                        <name>ReadAsDecimal</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>ReadAsInt32</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadAsString</name>
                    </method>
                    <method>
                        <signature>bool(int32, bool)</signature>
                        <name>ReadChars</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>int32(bool)</signature>
                        <name>ReadData</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>int32(bool, int32)</signature>
                        <name>ReadData</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ReadInternal</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReadNumberIntoBuffer</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>ReadStringIntoBuffer</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ShiftBufferIfNeeded</name>
                        <newname>z</newname>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>ValidIdentifierChar</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Utilities.StringBuffer, char, int32, int32)</signature>
                        <name>WriteCharToBuffer</name>
                        <newname>g</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.StringBuffer</signature>
                        <name>_buffer</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_charPos</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>_chars</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_charsUsed</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_isEndOfFile</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_lineNumber</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_lineStartPos</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.IO.TextReader</signature>
                        <name>_reader</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.StringReference</signature>
                        <name>_stringReference</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MaximumJavascriptIntegerCharacterLength</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PropertyNameTable</signature>
                        <name>NameTable</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>char</signature>
                        <name>UnicodeReplacementChar</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>LineNumber</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>LinePosition</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonTextWriter</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.TextWriter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>EnsureWriteBuffer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.Base64Encoder()</signature>
                        <name>get_Base64Encoder</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Indentation</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_IndentChar</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_QuoteChar</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_QuoteName</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnStringEscapeHandlingChanged</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Indentation</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>set_IndentChar</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>set_QuoteChar</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_QuoteName</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateCharEscapeFlags</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteComment</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken)</signature>
                        <name>WriteEnd</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>WriteEscapedString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteIndent</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteIndentSpace</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>WriteIntegerValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int64)</signature>
                        <name>WriteIntegerValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteNull</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WritePropertyName</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>WritePropertyName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteRaw</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteStartArray</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteStartConstructor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteStartObject</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteUndefined</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(float32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int16)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int8)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.DateTimeOffset)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Decimal)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Guid)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float32&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Uri)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteValueDelimiter</name>
                    </method>
                    <method>
                        <signature>void(string, Newtonsoft.Json.JsonToken)</signature>
                        <name>WriteValueInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteWhitespace</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.Base64Encoder</signature>
                        <name>_base64Encoder</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool[]</signature>
                        <name>_charEscapeFlags</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_indentation</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>char</signature>
                        <name>_indentChar</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>_indentChars</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>char</signature>
                        <name>_quoteChar</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_quoteName</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>_writeBuffer</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.IO.TextWriter</signature>
                        <name>_writer</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Utilities.Base64Encoder()</signature>
                        <name>Base64Encoder</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Indentation</name>
                    </property>
                    <property>
                        <signature>char()</signature>
                        <name>IndentChar</name>
                    </property>
                    <property>
                        <signature>char()</signature>
                        <name>QuoteChar</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>QuoteName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonToken</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>Boolean</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>Bytes</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>Comment</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>Date</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>EndArray</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>EndConstructor</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>EndObject</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>Float</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>Integer</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>Null</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>PropertyName</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>Raw</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>StartArray</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>StartConstructor</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>StartObject</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>String</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonToken</signature>
                        <name>Undefined</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonValidatingReader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.KeyValuePair`2&lt;string,bool&gt;)</signature>
                        <name>&lt;ValidateEndObject&gt;b__6</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>string(System.Collections.Generic.KeyValuePair`2&lt;string,bool&gt;)</signature>
                        <name>&lt;ValidateEndObject&gt;b__7</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>&lt;WriteToken&gt;b__0</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>&lt;WriteToken&gt;b__1</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>&lt;WriteToken&gt;b__2</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.ValidationEventHandler)</signature>
                        <name>add_ValidationEventHandler</name>
                    </method>
                    <method>
                        <signature>float64(float64, float64)</signature>
                        <name>FloatingPointRemainder</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaModel&gt;()</signature>
                        <name>get_CurrentMemberSchemas</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaModel&gt;()</signature>
                        <name>get_CurrentSchemas</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Depth</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_QuoteChar</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonReader()</signature>
                        <name>get_Reader</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema()</signature>
                        <name>get_Schema</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonToken()</signature>
                        <name>get_TokenType</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ValueType</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Schema.JsonSchemaType&gt;()</signature>
                        <name>GetCurrentNodeSchemaType</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Schema.JsonSchemaModel, string)</signature>
                        <name>IsPropertyDefinied</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(float64)</signature>
                        <name>IsZero</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.get_LineNumber</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.get_LinePosition</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.HasLineInfo</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaException)</signature>
                        <name>OnValidationEvent</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonValidatingReader/SchemaScope()</signature>
                        <name>Pop</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ProcessValue</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonValidatingReader/SchemaScope)</signature>
                        <name>Push</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(string, Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>RaiseError</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>ReadAsBytes</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>ReadAsDateTime</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTimeOffset&gt;()</signature>
                        <name>ReadAsDateTimeOffset</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.Decimal&gt;()</signature>
                        <name>ReadAsDecimal</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>ReadAsInt32</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadAsString</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.ValidationEventHandler)</signature>
                        <name>remove_ValidationEventHandler</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>set_QuoteChar</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>set_Schema</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)</signature>
                        <name>TestType</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>ValidateArray</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>ValidateBoolean</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ValidateCurrentToken</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>ValidateEndArray</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>ValidateEndObject</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>ValidateFloat</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>ValidateInteger</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>ValidateNotDisallowed</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>ValidateNull</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>ValidateObject</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>ValidatePropertyName</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>ValidateString</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaModel&gt;)</signature>
                        <name>WriteToken</name>
                        <newname>g</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.JsonValidatingReader/SchemaScope</signature>
                        <name>_currentScope</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaModel</signature>
                        <name>_model</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader</signature>
                        <name>_reader</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchema</signature>
                        <name>_schema</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Stack`1&lt;Newtonsoft.Json.JsonValidatingReader/SchemaScope&gt;</signature>
                        <name>_stack</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Schema.JsonSchemaModel,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Schema.JsonSchemaModel,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate4</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Schema.JsonSchemaModel,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.KeyValuePair`2&lt;string,bool&gt;,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate8</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.KeyValuePair`2&lt;string,bool&gt;,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate9</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaModel&gt;</signature>
                        <name>EmptySchemaList</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.ValidationEventHandler</signature>
                        <name>ValidationEventHandler</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaModel&gt;()</signature>
                        <name>CurrentMemberSchemas</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaModel&gt;()</signature>
                        <name>CurrentSchemas</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Depth</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.LineNumber</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.LinePosition</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Path</name>
                    </property>
                    <property>
                        <signature>char()</signature>
                        <name>QuoteChar</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.JsonReader()</signature>
                        <name>Reader</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Schema.JsonSchema()</signature>
                        <name>Schema</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.JsonToken()</signature>
                        <name>TokenType</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>Value</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ValueType</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>Newtonsoft.Json.Schema.ValidationEventHandler</signature>
                        <name>ValidationEventHandler</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>Newtonsoft.Json.JsonValidatingReader/SchemaScope</name>
                <newname>Newtonsoft.Json.JsonValidatingReader/a</newname>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaModel&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>&lt;.ctor&gt;b__a</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;.ctor&gt;b__b</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>&lt;.ctor&gt;b__c</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaModel&gt;)</signature>
                        <name>&lt;GetRequiredProperties&gt;b__10</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>string(System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaModel&gt;)</signature>
                        <name>&lt;GetRequiredProperties&gt;b__11</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ArrayItemCount</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JTokenWriter()</signature>
                        <name>get_CurrentItemWriter</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_CurrentPropertyName</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsUniqueArray</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,bool&gt;()</signature>
                        <name>get_RequiredProperties</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaModel&gt;()</signature>
                        <name>get_Schemas</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JTokenType()</signature>
                        <name>get_TokenType</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>get_UniqueArrayItems</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>GetRequiredProperties</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ArrayItemCount</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JTokenWriter)</signature>
                        <name>set_CurrentItemWriter</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_CurrentPropertyName</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsUniqueArray</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;)</signature>
                        <name>set_UniqueArrayItems</name>
                        <newname>i</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,bool&gt;</signature>
                        <name>_requiredProperties</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaModel&gt;</signature>
                        <name>_schemas</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>_tokenType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ArrayItemCount&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenWriter</signature>
                        <name>&lt;CurrentItemWriter&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;CurrentPropertyName&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsUniqueArray&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;UniqueArrayItems&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaModel&gt;,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate12</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaModel&gt;,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate13</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegated</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatee</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Schema.JsonSchemaModel,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatef</name>
                        <newname>k</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonWriter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken)</signature>
                        <name>AutoComplete</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AutoCompleteAll</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonContainerType)</signature>
                        <name>AutoCompleteClose</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonWriter/State[][]()</signature>
                        <name>BuildStateArray</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonWriterException(Newtonsoft.Json.JsonWriter, object)</signature>
                        <name>CreateUnsupportedTypeException</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CloseOutput</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ContainerPath</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>get_Culture</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DateFormatHandling()</signature>
                        <name>get_DateFormatHandling</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DateFormatString</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling()</signature>
                        <name>get_DateTimeZoneHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.FloatFormatHandling()</signature>
                        <name>get_FloatFormatHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Formatting()</signature>
                        <name>get_Formatting</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.StringEscapeHandling()</signature>
                        <name>get_StringEscapeHandling</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Top</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.WriteState()</signature>
                        <name>get_WriteState</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonToken(Newtonsoft.Json.JsonContainerType)</signature>
                        <name>GetCloseTokenForType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InternalWriteComment</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonContainerType)</signature>
                        <name>InternalWriteEnd</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>InternalWritePropertyName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InternalWriteRaw</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken, Newtonsoft.Json.JsonContainerType)</signature>
                        <name>InternalWriteStart</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken)</signature>
                        <name>InternalWriteValue</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>InternalWriteWhitespace</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnStringEscapeHandlingChanged</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonContainerType()</signature>
                        <name>Peek</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonContainerType()</signature>
                        <name>Pop</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonContainerType)</signature>
                        <name>Push</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CloseOutput</name>
                    </method>
                    <method>
                        <signature>void(System.Globalization.CultureInfo)</signature>
                        <name>set_Culture</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DateFormatHandling)</signature>
                        <name>set_DateFormatHandling</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DateFormatString</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DateTimeZoneHandling)</signature>
                        <name>set_DateTimeZoneHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.FloatFormatHandling)</signature>
                        <name>set_FloatFormatHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Formatting)</signature>
                        <name>set_Formatting</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.StringEscapeHandling)</signature>
                        <name>set_StringEscapeHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken, object)</signature>
                        <name>SetWriteState</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateScopeWithFinishedValue</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteComment</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader)</signature>
                        <name>WriteConstructorDate</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteEnd</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonContainerType)</signature>
                        <name>WriteEnd</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken)</signature>
                        <name>WriteEnd</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteEndArray</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteEndConstructor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteEndObject</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteIndent</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteIndentSpace</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteNull</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WritePropertyName</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>WritePropertyName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteRaw</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteRawValue</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteStartArray</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteStartConstructor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteStartObject</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader)</signature>
                        <name>WriteToken</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, bool)</signature>
                        <name>WriteToken</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, bool, bool)</signature>
                        <name>WriteToken</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, int32, bool, bool)</signature>
                        <name>WriteToken</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken)</signature>
                        <name>WriteToken</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken, object)</signature>
                        <name>WriteToken</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken, object)</signature>
                        <name>WriteTokenInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteUndefined</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(float32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int16)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int8)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Utilities.PrimitiveTypeCode, object)</signature>
                        <name>WriteValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.DateTimeOffset)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Decimal)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Guid)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;char&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float32&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int16&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int64&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int8&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTimeOffset&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.Decimal&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.Guid&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.TimeSpan&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;unsigned int16&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;unsigned int32&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;unsigned int64&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;unsigned int8&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Uri)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteValueDelimiter</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteWhitespace</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Globalization.CultureInfo</signature>
                        <name>_culture</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonPosition</signature>
                        <name>_currentPosition</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter/State</signature>
                        <name>_currentState</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DateFormatHandling</signature>
                        <name>_dateFormatHandling</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_dateFormatString</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling</signature>
                        <name>_dateTimeZoneHandling</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.FloatFormatHandling</signature>
                        <name>_floatFormatHandling</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Formatting</signature>
                        <name>_formatting</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.JsonPosition&gt;</signature>
                        <name>_stack</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.StringEscapeHandling</signature>
                        <name>_stringEscapeHandling</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;CloseOutput&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter/State[][]</signature>
                        <name>StateArray</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter/State[][]</signature>
                        <name>StateArrayTempate</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>CloseOutput</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ContainerPath</name>
                    </property>
                    <property>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>Culture</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.DateFormatHandling()</signature>
                        <name>DateFormatHandling</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>DateFormatString</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling()</signature>
                        <name>DateTimeZoneHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.FloatFormatHandling()</signature>
                        <name>FloatFormatHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Formatting()</signature>
                        <name>Formatting</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Path</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.StringEscapeHandling()</signature>
                        <name>StringEscapeHandling</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Top</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.WriteState()</signature>
                        <name>WriteState</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonWriter/State</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter/State</signature>
                        <name>Array</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter/State</signature>
                        <name>ArrayStart</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter/State</signature>
                        <name>Closed</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter/State</signature>
                        <name>Constructor</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter/State</signature>
                        <name>ConstructorStart</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter/State</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter/State</signature>
                        <name>Object</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter/State</signature>
                        <name>ObjectStart</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter/State</signature>
                        <name>Property</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter/State</signature>
                        <name>Start</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.JsonWriterException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonWriterException(Newtonsoft.Json.JsonWriter, string, System.Exception)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonWriterException(string, string, System.Exception)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Path</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Path&gt;k__BackingField</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Path</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.Extensions</name>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(!!0)</signature>
                        <name>&lt;Ancestors&gt;b__0</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(!!0)</signature>
                        <name>&lt;AncestorsAndSelf&gt;b__1</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(!!0)</signature>
                        <name>&lt;Children&gt;b__10</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(!!0)</signature>
                        <name>&lt;Descendants&gt;b__2</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(!!0)</signature>
                        <name>&lt;DescendantsAndSelf&gt;b__3</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JProperty&gt;(Newtonsoft.Json.Linq.JObject)</signature>
                        <name>&lt;Properties&gt;b__4</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>Ancestors</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>AncestorsAndSelf</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>AsJEnumerable</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;)</signature>
                        <name>AsJEnumerable</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>Children</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!1&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>Children</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>!!1(!!0)</signature>
                        <name>Convert</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!1&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>Convert</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>Descendants</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>DescendantsAndSelf</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JProperty&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JObject&gt;)</signature>
                        <name>Properties</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;)</signature>
                        <name>Value</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>!!1(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>Value</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;)</signature>
                        <name>Values</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;, object)</signature>
                        <name>Values</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;)</signature>
                        <name>Values</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;, object)</signature>
                        <name>Values</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!1&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, object)</signature>
                        <name>Values</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Linq.JObject,System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JProperty&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>U</name>
                    <newname>b</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Linq.Extensions/&lt;Convert&gt;d__11`2</name>
                <newname>Newtonsoft.Json.Linq.Extensions/b</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally14</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!1&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;U&gt;.GetEnumerator</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;U&gt;.get_Current</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>j</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__source</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;7__wrap13</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;token&gt;5__12</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>source</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>U</name>
                    <newname>b</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Linq.Extensions/&lt;Values&gt;d__6`2</name>
                <newname>Newtonsoft.Json.Linq.Extensions/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finallyb</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finallyd</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!1&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;U&gt;.GetEnumerator</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;U&gt;.get_Current</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;3__key</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__source</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;7__wrapa</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;7__wrapc</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;t&gt;5__8</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;token&gt;5__7</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;value&gt;5__9</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>key</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>source</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>Newtonsoft.Json.Linq.IJEnumerable`1</name>
                <methodlist>
                    <method>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(object)</signature>
                        <name>get_Item</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(object)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JArray</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JArray)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>CloneToken</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>DeepEquals</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JArray(object)</signature>
                        <name>FromObject</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JArray(object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>FromObject</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>get_ChildrenTokens</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(object)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JTokenType()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetDeepHashCode</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>Insert</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JArray(Newtonsoft.Json.JsonReader)</signature>
                        <name>Load</name>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Linq.JsonMergeSettings)</signature>
                        <name>MergeItem</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JArray(string)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter[])</signature>
                        <name>WriteTo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>_values</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>ChildrenTokens</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsReadOnly</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken(int32)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken(object)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JTokenType()</signature>
                        <name>Type</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JConstructor</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JConstructor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>CloneToken</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>DeepEquals</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>get_ChildrenTokens</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(object)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JTokenType()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetDeepHashCode</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JConstructor(Newtonsoft.Json.JsonReader)</signature>
                        <name>Load</name>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Linq.JsonMergeSettings)</signature>
                        <name>MergeItem</name>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter[])</signature>
                        <name>WriteTo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>_values</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>ChildrenTokens</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken(object)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JTokenType()</signature>
                        <name>Type</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JContainer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JContainer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.AddingNewEventHandler)</signature>
                        <name>add_AddingNew</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Specialized.NotifyCollectionChangedEventHandler)</signature>
                        <name>add_CollectionChanged</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.ListChangedEventHandler)</signature>
                        <name>add_ListChanged</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>AddAndSkipParentCheck</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>AddFirst</name>
                    </method>
                    <method>
                        <signature>void(int32, object, bool)</signature>
                        <name>AddInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CheckReentrancy</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>Children</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearItems</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ContainsItem</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JContainer)</signature>
                        <name>ContentsEqual</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ContentsHashCode</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>CopyItemsTo</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>CreateChildrenCollection</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(object)</signature>
                        <name>CreateFromContent</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonWriter()</signature>
                        <name>CreateWriter</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>Descendants</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>DescendantsAndSelf</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(Newtonsoft.Json.Linq.JToken, bool)</signature>
                        <name>EnsureParentToken</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(object)</signature>
                        <name>EnsureValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>get_ChildrenTokens</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>get_First</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasValues</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>get_Last</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(bool)</signature>
                        <name>GetDescendants</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(int32)</signature>
                        <name>GetItem</name>
                    </method>
                    <method>
                        <signature>int32(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>IndexOfItem</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32, Newtonsoft.Json.Linq.JToken, bool)</signature>
                        <name>InsertItem</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>IsMultiContent</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>IsTokenUnchanged</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Merge</name>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Linq.JsonMergeSettings)</signature>
                        <name>Merge</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JContainer, System.Collections.IEnumerable, Newtonsoft.Json.Linq.JsonMergeSettings)</signature>
                        <name>MergeEnumerableContent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Linq.JsonMergeSettings)</signature>
                        <name>MergeItem</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.AddingNewEventArgs)</signature>
                        <name>OnAddingNew</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Specialized.NotifyCollectionChangedEventArgs)</signature>
                        <name>OnCollectionChanged</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.ListChangedEventArgs)</signature>
                        <name>OnListChanged</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader)</signature>
                        <name>ReadContentFrom</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader)</signature>
                        <name>ReadTokenFrom</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.AddingNewEventHandler)</signature>
                        <name>remove_AddingNew</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Specialized.NotifyCollectionChangedEventHandler)</signature>
                        <name>remove_CollectionChanged</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.ListChangedEventHandler)</signature>
                        <name>remove_ListChanged</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveAll</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>RemoveItem</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveItemAt</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>ReplaceAll</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ReplaceItem</name>
                    </method>
                    <method>
                        <signature>void(int32, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>SetItem</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.Clear</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.Contains</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken[], int32)</signature>
                        <name>System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.CopyTo</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.Remove</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(int32)</signature>
                        <name>System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Item</name>
                    </method>
                    <method>
                        <signature>int32(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.Insert</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.set_Item</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>System.Collections.ICollection.CopyTo</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.ICollection.get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.ICollection.get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.Collections.IList.Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IList.Clear</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>System.Collections.IList.Contains</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.IList.get_IsFixedSize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.IList.get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>System.Collections.IList.get_Item</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.Collections.IList.IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Collections.IList.Insert</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>System.Collections.IList.Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>System.Collections.IList.RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Collections.IList.set_Item</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.PropertyDescriptor)</signature>
                        <name>System.ComponentModel.IBindingList.AddIndex</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.ComponentModel.IBindingList.AddNew</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)</signature>
                        <name>System.ComponentModel.IBindingList.ApplySort</name>
                    </method>
                    <method>
                        <signature>int32(System.ComponentModel.PropertyDescriptor, object)</signature>
                        <name>System.ComponentModel.IBindingList.Find</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.get_AllowEdit</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.get_AllowNew</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.get_AllowRemove</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.get_IsSorted</name>
                    </method>
                    <method>
                        <signature>System.ComponentModel.ListSortDirection()</signature>
                        <name>System.ComponentModel.IBindingList.get_SortDirection</name>
                    </method>
                    <method>
                        <signature>System.ComponentModel.PropertyDescriptor()</signature>
                        <name>System.ComponentModel.IBindingList.get_SortProperty</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.get_SupportsChangeNotification</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.get_SupportsSearching</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.get_SupportsSorting</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.PropertyDescriptor)</signature>
                        <name>System.ComponentModel.IBindingList.RemoveIndex</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.ComponentModel.IBindingList.RemoveSort</name>
                    </method>
                    <method>
                        <signature>System.ComponentModel.PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor[])</signature>
                        <name>System.ComponentModel.ITypedList.GetItemProperties</name>
                    </method>
                    <method>
                        <signature>string(System.ComponentModel.PropertyDescriptor[])</signature>
                        <name>System.ComponentModel.ITypedList.GetListName</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ValidateToken</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;()</signature>
                        <name>Values</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.ComponentModel.AddingNewEventHandler</signature>
                        <name>_addingNew</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_busy</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.NotifyCollectionChangedEventHandler</signature>
                        <name>_collectionChanged</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.ListChangedEventHandler</signature>
                        <name>_listChanged</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_syncRoot</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>ChildrenTokens</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Count</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>First</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasValues</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>Last</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.IsReadOnly</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken(int32)</signature>
                        <name>System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.Item</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.Collections.ICollection.IsSynchronized</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>System.Collections.ICollection.SyncRoot</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.Collections.IList.IsFixedSize</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.Collections.IList.IsReadOnly</name>
                    </property>
                    <property>
                        <signature>object(int32)</signature>
                        <name>System.Collections.IList.Item</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.AllowEdit</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.AllowNew</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.AllowRemove</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.IsSorted</name>
                    </property>
                    <property>
                        <signature>System.ComponentModel.ListSortDirection()</signature>
                        <name>System.ComponentModel.IBindingList.SortDirection</name>
                    </property>
                    <property>
                        <signature>System.ComponentModel.PropertyDescriptor()</signature>
                        <name>System.ComponentModel.IBindingList.SortProperty</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.SupportsChangeNotification</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.SupportsSearching</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.ComponentModel.IBindingList.SupportsSorting</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>System.ComponentModel.AddingNewEventHandler</signature>
                        <name>AddingNew</name>
                    </event>
                    <event>
                        <signature>System.Collections.Specialized.NotifyCollectionChangedEventHandler</signature>
                        <name>CollectionChanged</name>
                    </event>
                    <event>
                        <signature>System.ComponentModel.ListChangedEventHandler</signature>
                        <name>ListChanged</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JContainer/&lt;GetDescendants&gt;d__0</name>
                <newname>Newtonsoft.Json.Linq.JContainer/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally5</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally7</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Current</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>m</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;3__self</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JContainer</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;7__wrap4</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;7__wrap6</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JContainer</signature>
                        <name>&lt;c&gt;5__2</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;d&gt;5__3</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;o&gt;5__1</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>self</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JContainer/JTokenReferenceEqualityComparer</name>
                <newname>Newtonsoft.Json.Linq.JContainer/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>GetHashCode</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JContainer/JTokenReferenceEqualityComparer</signature>
                        <name>Instance</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>Newtonsoft.Json.Linq.JEnumerable`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JEnumerable`1&lt;!0&gt;)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(object)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>_enumerable</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JEnumerable`1&lt;!0&gt;</signature>
                        <name>Empty</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(object)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JObject</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JObject)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(Newtonsoft.Json.Linq.JProperty)</signature>
                        <name>&lt;PropertyValues&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.PropertyChangedEventHandler)</signature>
                        <name>add_PropertyChanged</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.PropertyChangingEventHandler)</signature>
                        <name>add_PropertyChanging</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>CloneToken</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>DeepEquals</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JObject(object)</signature>
                        <name>FromObject</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JObject(object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>FromObject</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>get_ChildrenTokens</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(object)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JTokenType()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetDeepHashCode</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Linq.JToken&gt;&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Linq.Expressions.Expression)</signature>
                        <name>GetMetaObject</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(string)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(string, System.StringComparison)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>void(int32, Newtonsoft.Json.Linq.JToken, bool)</signature>
                        <name>InsertItem</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JProperty)</signature>
                        <name>InternalPropertyChanged</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JProperty)</signature>
                        <name>InternalPropertyChanging</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JObject(Newtonsoft.Json.JsonReader)</signature>
                        <name>Load</name>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Linq.JsonMergeSettings)</signature>
                        <name>MergeItem</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>OnPropertyChanged</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>OnPropertyChanging</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JObject(string)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JProperty&gt;()</signature>
                        <name>Properties</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JProperty(string)</signature>
                        <name>Property</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>PropertyValues</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.PropertyChangedEventHandler)</signature>
                        <name>remove_PropertyChanged</name>
                    </method>
                    <method>
                        <signature>void(System.ComponentModel.PropertyChangingEventHandler)</signature>
                        <name>remove_PropertyChanging</name>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(string, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Linq.JToken&gt;)</signature>
                        <name>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Clear</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Linq.JToken&gt;)</signature>
                        <name>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Contains</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Linq.JToken&gt;[], int32)</signature>
                        <name>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.CopyTo</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Linq.JToken&gt;)</signature>
                        <name>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Remove</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>System.Collections.Generic.IDictionary&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.ContainsKey</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.ICollection`1&lt;string&gt;()</signature>
                        <name>System.Collections.Generic.IDictionary&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.get_Keys</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.ICollection`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IDictionary&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.get_Values</name>
                    </method>
                    <method>
                        <signature>System.ComponentModel.AttributeCollection()</signature>
                        <name>System.ComponentModel.ICustomTypeDescriptor.GetAttributes</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>System.ComponentModel.ICustomTypeDescriptor.GetClassName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>System.ComponentModel.ICustomTypeDescriptor.GetComponentName</name>
                    </method>
                    <method>
                        <signature>System.ComponentModel.TypeConverter()</signature>
                        <name>System.ComponentModel.ICustomTypeDescriptor.GetConverter</name>
                    </method>
                    <method>
                        <signature>System.ComponentModel.EventDescriptor()</signature>
                        <name>System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent</name>
                    </method>
                    <method>
                        <signature>System.ComponentModel.PropertyDescriptor()</signature>
                        <name>System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty</name>
                    </method>
                    <method>
                        <signature>object(System.Type)</signature>
                        <name>System.ComponentModel.ICustomTypeDescriptor.GetEditor</name>
                    </method>
                    <method>
                        <signature>System.ComponentModel.EventDescriptorCollection()</signature>
                        <name>System.ComponentModel.ICustomTypeDescriptor.GetEvents</name>
                    </method>
                    <method>
                        <signature>System.ComponentModel.EventDescriptorCollection(System.Attribute[])</signature>
                        <name>System.ComponentModel.ICustomTypeDescriptor.GetEvents</name>
                    </method>
                    <method>
                        <signature>System.ComponentModel.PropertyDescriptorCollection()</signature>
                        <name>System.ComponentModel.ICustomTypeDescriptor.GetProperties</name>
                    </method>
                    <method>
                        <signature>System.ComponentModel.PropertyDescriptorCollection(System.Attribute[])</signature>
                        <name>System.ComponentModel.ICustomTypeDescriptor.GetProperties</name>
                    </method>
                    <method>
                        <signature>object(System.ComponentModel.PropertyDescriptor)</signature>
                        <name>System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner</name>
                    </method>
                    <method>
                        <signature>bool(string, Newtonsoft.Json.Linq.JToken&amp;)</signature>
                        <name>TryGetValue</name>
                    </method>
                    <method>
                        <signature>bool(string, System.StringComparison, Newtonsoft.Json.Linq.JToken&amp;)</signature>
                        <name>TryGetValue</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ValidateToken</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter[])</signature>
                        <name>WriteTo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JPropertyKeyedCollection</signature>
                        <name>_properties</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Linq.JProperty,Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.PropertyChangedEventHandler</signature>
                        <name>PropertyChanged</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.PropertyChangingEventHandler</signature>
                        <name>PropertyChanging</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>ChildrenTokens</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken(object)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken(string)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.IsReadOnly</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.ICollection`1&lt;string&gt;()</signature>
                        <name>System.Collections.Generic.IDictionary&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.Keys</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.ICollection`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IDictionary&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.Values</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JTokenType()</signature>
                        <name>Type</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>System.ComponentModel.PropertyChangedEventHandler</signature>
                        <name>PropertyChanged</name>
                    </event>
                    <event>
                        <signature>System.ComponentModel.PropertyChangingEventHandler</signature>
                        <name>PropertyChanging</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JObject/&lt;GetEnumerator&gt;d__2</name>
                <newname>Newtonsoft.Json.Linq.JObject/b</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally5</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.get_Current</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>f</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JObject</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;7__wrap4</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JProperty</signature>
                        <name>&lt;property&gt;5__3</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JObject/JObjectDynamicProxy</name>
                <newname>Newtonsoft.Json.Linq.JObject/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Linq.JProperty)</signature>
                        <name>&lt;GetDynamicMemberNames&gt;b__7</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;(Newtonsoft.Json.Linq.JObject)</signature>
                        <name>GetDynamicMemberNames</name>
                        <newname>az</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JObject, System.Dynamic.GetMemberBinder, object&amp;)</signature>
                        <name>TryGetMember</name>
                        <newname>ax</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JObject, System.Dynamic.SetMemberBinder, object)</signature>
                        <name>TrySetMember</name>
                        <newname>ay</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Linq.JProperty,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate8</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JProperty</name>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JProperty)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearItems</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>CloneToken</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ContainsItem</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>DeepEquals</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>get_ChildrenTokens</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JTokenType()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetDeepHashCode</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(int32)</signature>
                        <name>GetItem</name>
                    </method>
                    <method>
                        <signature>void(int32, Newtonsoft.Json.Linq.JToken, bool)</signature>
                        <name>InsertItem</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JProperty(Newtonsoft.Json.JsonReader)</signature>
                        <name>Load</name>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Linq.JsonMergeSettings)</signature>
                        <name>MergeItem</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>RemoveItem</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveItemAt</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>set_Value</name>
                    </method>
                    <method>
                        <signature>void(int32, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>SetItem</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter[])</signature>
                        <name>WriteTo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JProperty/JPropertyList</signature>
                        <name>_content</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_name</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>ChildrenTokens</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JTokenType()</signature>
                        <name>Type</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>Value</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JProperty/JPropertyList</name>
                <newname>Newtonsoft.Json.Linq.JProperty/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>Insert</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>_token</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken(int32)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JProperty/JPropertyList/&lt;GetEnumerator&gt;d__0</name>
                <newname>Newtonsoft.Json.Linq.JProperty/a/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Current</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JProperty/JPropertyList</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JPropertyDescriptor</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>CanResetValue</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JObject(object)</signature>
                        <name>CastInstance</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ComponentType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NameHashCode</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_PropertyType</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>ResetValue</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>SetValue</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>ShouldSerializeValue</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ComponentType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsReadOnly</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>NameHashCode</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>PropertyType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JPropertyKeyedCollection</name>
                <newname>ac</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>AddKey</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken, string)</signature>
                        <name>ChangeItemKey</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearItems</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JPropertyKeyedCollection)</signature>
                        <name>Compare</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Contains</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ContainsItem</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>EnsureDictionary</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(string)</signature>
                        <name>get_Item</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.ICollection`1&lt;string&gt;()</signature>
                        <name>get_Keys</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.ICollection`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>get_Values</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>GetKeyForItem</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int32, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>InsertItem</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Remove</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveItem</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RemoveKey</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int32, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>SetItem</name>
                    </method>
                    <method>
                        <signature>bool(string, Newtonsoft.Json.Linq.JToken&amp;)</signature>
                        <name>TryGetValue</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>_dictionary</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEqualityComparer`1&lt;string&gt;</signature>
                        <name>Comparer</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken(string)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JRaw</name>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JRaw)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>CloneToken</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JRaw(Newtonsoft.Json.JsonReader)</signature>
                        <name>Create</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonMergeSettings</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.MergeArrayHandling()</signature>
                        <name>get_MergeArrayHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.MergeArrayHandling)</signature>
                        <name>set_MergeArrayHandling</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Linq.MergeArrayHandling</signature>
                        <name>_mergeArrayHandling</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Linq.MergeArrayHandling()</signature>
                        <name>MergeArrayHandling</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter</name>
                <newname>bt</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;, bool)</signature>
                        <name>ExecuteFilter</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_Index</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_Index</name>
                        <newname>j</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;Index&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter/&lt;ExecuteFilter&gt;d__0</name>
                <newname>bt/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally5</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally7</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Current</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>o</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;3__current</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;3__errorWhenNoMatch</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;7__wrap4</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;7__wrap6</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;t&gt;5__1</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;v&gt;5__2</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;v&gt;5__3</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>current</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>errorWhenNoMatch</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter</name>
                <newname>ci</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;, bool)</signature>
                        <name>ExecuteFilter</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;int32&gt;()</signature>
                        <name>get_Indexes</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;int32&gt;)</signature>
                        <name>set_Indexes</name>
                        <newname>j</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;int32&gt;</signature>
                        <name>&lt;Indexes&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter/&lt;ExecuteFilter&gt;d__0</name>
                <newname>ci/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally5</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally7</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Current</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>o</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;3__current</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;3__errorWhenNoMatch</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;7__wrap4</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1/Enumerator&lt;int32&gt;</signature>
                        <name>&lt;&gt;7__wrap6</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;i&gt;5__2</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;t&gt;5__1</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;v&gt;5__3</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>current</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>errorWhenNoMatch</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter</name>
                <newname>m</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;, bool)</signature>
                        <name>ExecuteFilter</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_End</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_Start</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_Step</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32, bool)</signature>
                        <name>IsValid</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_End</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_Start</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_Step</name>
                        <newname>k</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;End&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;Start&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;Step&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter/&lt;ExecuteFilter&gt;d__0</name>
                <newname>m/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally9</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Current</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>q</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;3__current</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;3__errorWhenNoMatch</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;7__wrap8</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JArray</signature>
                        <name>&lt;a&gt;5__2</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;i&gt;5__7</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;positiveStep&gt;5__6</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;startIndex&gt;5__4</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;stepCount&gt;5__3</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;stopIndex&gt;5__5</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;t&gt;5__1</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>current</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>errorWhenNoMatch</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression</name>
                <newname>a1</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Linq.JsonPath.PathFilter&gt;()</signature>
                        <name>get_Path</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JValue()</signature>
                        <name>get_Value</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>IsMatch</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;Newtonsoft.Json.Linq.JsonPath.PathFilter&gt;)</signature>
                        <name>set_Path</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JValue)</signature>
                        <name>set_Value</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Linq.JsonPath.PathFilter&gt;</signature>
                        <name>&lt;Path&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JValue</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.CompositeExpression</name>
                <newname>c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Linq.JsonPath.QueryExpression&gt;()</signature>
                        <name>get_Expressions</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>IsMatch</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;Newtonsoft.Json.Linq.JsonPath.QueryExpression&gt;)</signature>
                        <name>set_Expressions</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Linq.JsonPath.QueryExpression&gt;</signature>
                        <name>&lt;Expressions&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.FieldFilter</name>
                <newname>a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;, bool)</signature>
                        <name>ExecuteFilter</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>j</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.FieldFilter/&lt;ExecuteFilter&gt;d__0</name>
                <newname>a/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally6</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally8</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Current</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;3__current</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;3__errorWhenNoMatch</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.FieldFilter</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;7__wrap5</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Linq.JToken&gt;&gt;</signature>
                        <name>&lt;&gt;7__wrap7</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JObject</signature>
                        <name>&lt;o&gt;5__2</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;p&gt;5__4</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;t&gt;5__1</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;v&gt;5__3</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>current</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>errorWhenNoMatch</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter</name>
                <newname>ak</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>&lt;ExecuteFilter&gt;b__0</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;, bool)</signature>
                        <name>ExecuteFilter</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Names</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Names</name>
                        <newname>j</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>&lt;Names&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter/&lt;ExecuteFilter&gt;d__2</name>
                <newname>ak/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally8</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finallya</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Current</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;3__current</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;3__errorWhenNoMatch</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;7__wrap7</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1/Enumerator&lt;string&gt;</signature>
                        <name>&lt;&gt;7__wrap9</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;name&gt;5__5</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JObject</signature>
                        <name>&lt;o&gt;5__4</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;t&gt;5__3</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;v&gt;5__6</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>current</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>errorWhenNoMatch</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.JPath</name>
                <newname>aw</newname>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>EatWhitespace</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>EnsureLength</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(Newtonsoft.Json.Linq.JToken, bool)</signature>
                        <name>Evaluate</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.List`1&lt;Newtonsoft.Json.Linq.JsonPath.PathFilter&gt;, Newtonsoft.Json.Linq.JToken, bool)</signature>
                        <name>Evaluate</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Linq.JsonPath.PathFilter&gt;()</signature>
                        <name>get_Filters</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Match</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JsonPath.PathFilter(char)</signature>
                        <name>ParseArrayIndexer</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryExpression()</signature>
                        <name>ParseExpression</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JsonPath.PathFilter(char)</signature>
                        <name>ParseIndexer</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ParseMain</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryOperator()</signature>
                        <name>ParseOperator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.List`1&lt;Newtonsoft.Json.Linq.JsonPath.PathFilter&gt;, int32, bool)</signature>
                        <name>ParsePath</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JsonPath.PathFilter(char)</signature>
                        <name>ParseQuery</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JsonPath.PathFilter(char)</signature>
                        <name>ParseQuotedField</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>ParseValue</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadQuotedString</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;Newtonsoft.Json.Linq.JsonPath.PathFilter&gt;)</signature>
                        <name>set_Filters</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>_currentIndex</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_expression</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Linq.JsonPath.PathFilter&gt;</signature>
                        <name>&lt;Filters&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.PathFilter</name>
                <newname>b2</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;, bool)</signature>
                        <name>ExecuteFilter</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(Newtonsoft.Json.Linq.JToken, bool, int32)</signature>
                        <name>GetTokenIndex</name>
                        <newname>j</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.QueryExpression</name>
                <newname>a9</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryOperator()</signature>
                        <name>get_Operator</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>IsMatch</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JsonPath.QueryOperator)</signature>
                        <name>set_Operator</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryOperator</signature>
                        <name>&lt;Operator&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.QueryFilter</name>
                <newname>a0</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;, bool)</signature>
                        <name>ExecuteFilter</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryExpression()</signature>
                        <name>get_Expression</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JsonPath.QueryExpression)</signature>
                        <name>set_Expression</name>
                        <newname>j</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryExpression</signature>
                        <name>&lt;Expression&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.QueryFilter/&lt;ExecuteFilter&gt;d__0</name>
                <newname>a0/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally4</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally6</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Current</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>l</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;3__current</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryFilter</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;7__wrap3</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;7__wrap5</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;t&gt;5__1</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;v&gt;5__2</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>current</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.QueryOperator</name>
                <newname>az</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryOperator</signature>
                        <name>And</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryOperator</signature>
                        <name>Equals</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryOperator</signature>
                        <name>Exists</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryOperator</signature>
                        <name>GreaterThan</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryOperator</signature>
                        <name>GreaterThanOrEquals</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryOperator</signature>
                        <name>LessThan</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryOperator</signature>
                        <name>LessThanOrEquals</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryOperator</signature>
                        <name>None</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryOperator</signature>
                        <name>NotEquals</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.QueryOperator</signature>
                        <name>Or</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.ScanFilter</name>
                <newname>ay</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;, bool)</signature>
                        <name>ExecuteFilter</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>j</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JsonPath.ScanFilter/&lt;ExecuteFilter&gt;d__0</name>
                <newname>ay/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally6</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Current</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>l</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;3__current</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JsonPath.ScanFilter</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;&gt;7__wrap5</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;container&gt;5__3</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JProperty</signature>
                        <name>&lt;e&gt;5__4</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;root&gt;5__1</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;value&gt;5__2</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>current</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JToken</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>AddAfterSelf</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>AddAnnotation</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>AddBeforeSelf</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>AfterSelf</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>Ancestors</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>AncestorsAndSelf</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0()</signature>
                        <name>Annotation</name>
                    </method>
                    <method>
                        <signature>object(System.Type)</signature>
                        <name>Annotation</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;()</signature>
                        <name>Annotations</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;object&gt;(System.Type)</signature>
                        <name>Annotations</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>BeforeSelf</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>Newtonsoft.Json.Linq.JEnumerable`1&lt;!!0&gt;()</signature>
                        <name>Children</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>Children</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>CloneToken</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonReader()</signature>
                        <name>CreateReader</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>DeepClone</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>DeepEquals</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>DeepEquals</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JValue(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>EnsureValue</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(object)</signature>
                        <name>FromObject</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>FromObject</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(object, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>FromObjectInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JTokenEqualityComparer()</signature>
                        <name>get_EqualityComparer</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>get_First</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasValues</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(object)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>get_Last</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>get_Next</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JContainer()</signature>
                        <name>get_Parent</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>get_Previous</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>get_Root</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JTokenType()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(bool)</signature>
                        <name>GetAncestors</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetDeepHashCode</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Linq.Expressions.Expression)</signature>
                        <name>GetMetaObject</name>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>GetType</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(Newtonsoft.Json.JsonReader)</signature>
                        <name>Load</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.get_LineNumber</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.get_LinePosition</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.HasLineInfo</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(object)</signature>
                        <name>Newtonsoft.Json.Linq.IJEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Item</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>char(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>float32(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>float64(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>int16(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>int32(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>int64(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>int8(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.DateTime(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.DateTimeOffset(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Decimal(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Guid(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;char&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float32&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int16&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int64&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int8&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTimeOffset&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.Decimal&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.Guid&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.TimeSpan&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;unsigned int16&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;unsigned int32&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;unsigned int64&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;unsigned int8&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.TimeSpan(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>System.Uri(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>unsigned int16(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>unsigned int32(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>unsigned int64(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>unsigned int8(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](Newtonsoft.Json.Linq.JToken)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(bool)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(float32)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(float64)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(int16)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(int32)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(int64)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(int8)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(string)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.DateTime)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.DateTimeOffset)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Decimal)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Guid)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;float32&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;int16&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;int64&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;int8&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;System.DateTimeOffset&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;System.Decimal&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;System.Guid&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;System.TimeSpan&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;unsigned int16&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;unsigned int32&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;unsigned int64&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Nullable`1&lt;unsigned int8&gt;)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.TimeSpan)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(System.Uri)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(unsigned int16)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(unsigned int32)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(unsigned int64)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(unsigned int8)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(unsigned int8[])</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(string)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(Newtonsoft.Json.JsonReader)</signature>
                        <name>ReadFrom</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void()</signature>
                        <name>RemoveAnnotations</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>RemoveAnnotations</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>Replace</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(string)</signature>
                        <name>SelectToken</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(string, bool)</signature>
                        <name>SelectToken</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(string)</signature>
                        <name>SelectTokens</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(string, bool)</signature>
                        <name>SelectTokens</name>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>set_Next</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JContainer)</signature>
                        <name>set_Parent</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>set_Previous</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>SetLineInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.IJsonLineInfo)</signature>
                        <name>SetLineInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Linq.Expressions.Expression)</signature>
                        <name>System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.ICloneable.Clone</name>
                    </method>
                    <method>
                        <signature>System.Numerics.BigInteger(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ToBigInteger</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.Numerics.BigInteger&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ToBigIntegerNullable</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0()</signature>
                        <name>ToObject</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ToObject</name>
                    </method>
                    <method>
                        <signature>object(System.Type)</signature>
                        <name>ToObject</name>
                    </method>
                    <method>
                        <signature>object(System.Type, Newtonsoft.Json.JsonSerializer)</signature>
                        <name>ToObject</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonConverter[])</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JTokenType[], bool)</signature>
                        <name>ValidateToken</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object)</signature>
                        <name>Value</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;()</signature>
                        <name>Values</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter[])</signature>
                        <name>WriteTo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>_annotations</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenEqualityComparer</signature>
                        <name>_equalityComparer</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>_next</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JContainer</signature>
                        <name>_parent</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>_previous</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType[]</signature>
                        <name>BigIntegerTypes</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType[]</signature>
                        <name>BooleanTypes</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType[]</signature>
                        <name>BytesTypes</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType[]</signature>
                        <name>CharTypes</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType[]</signature>
                        <name>DateTimeTypes</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType[]</signature>
                        <name>GuidTypes</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType[]</signature>
                        <name>NumberTypes</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType[]</signature>
                        <name>StringTypes</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType[]</signature>
                        <name>TimeSpanTypes</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType[]</signature>
                        <name>UriTypes</name>
                        <newname>l</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JTokenEqualityComparer()</signature>
                        <name>EqualityComparer</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>First</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasValues</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken(object)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>Last</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.LineNumber</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.LinePosition</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.IJEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;(object)</signature>
                        <name>Newtonsoft.Json.Linq.IJEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.Item</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>Next</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JContainer()</signature>
                        <name>Parent</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Path</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>Previous</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>Root</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JTokenType()</signature>
                        <name>Type</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JToken/&lt;AfterSelf&gt;d__6</name>
                <newname>Newtonsoft.Json.Linq.JToken/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Current</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;o&gt;5__7</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JToken/&lt;Annotations&gt;d__16</name>
                <newname>Newtonsoft.Json.Linq.JToken/f</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;object&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.Object&gt;.GetEnumerator</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>k</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;&gt;3__type</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>object[]</signature>
                        <name>&lt;annotations&gt;5__17</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;i&gt;5__18</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;o&gt;5__19</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Linq.JToken/&lt;Annotations&gt;d__e`1</name>
                <newname>Newtonsoft.Json.Linq.JToken/b</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;annotation&gt;5__13</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>object[]</signature>
                        <name>&lt;annotations&gt;5__f</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;casted&gt;5__12</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;i&gt;5__10</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;o&gt;5__11</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JToken/&lt;BeforeSelf&gt;d__a</name>
                <newname>Newtonsoft.Json.Linq.JToken/e</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Current</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;o&gt;5__b</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JToken/&lt;GetAncestors&gt;d__2</name>
                <newname>Newtonsoft.Json.Linq.JToken/c</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Current</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;3__self</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;current&gt;5__3</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>self</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JToken/LineInfoAnnotation</name>
                <newname>Newtonsoft.Json.Linq.JToken/d</newname>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>LineNumber</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LinePosition</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JTokenEqualityComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>GetHashCode</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JTokenReader</name>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>get_CurrentToken</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.JsonToken&gt;(Newtonsoft.Json.Linq.JContainer)</signature>
                        <name>GetEndToken</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.get_LineNumber</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.get_LinePosition</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.HasLineInfo</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>ReadAsBytes</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>ReadAsDateTime</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTimeOffset&gt;()</signature>
                        <name>ReadAsDateTimeOffset</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.Decimal&gt;()</signature>
                        <name>ReadAsDecimal</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>ReadAsInt32</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadAsString</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ReadInternal</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JContainer)</signature>
                        <name>ReadInto</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ReadOver</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ReadToEnd</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>string(object)</signature>
                        <name>SafeToString</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JContainer)</signature>
                        <name>SetEnd</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>SetToken</name>
                        <newname>g</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>_current</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_initialPath</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>_parent</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>_root</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>CurrentToken</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.LineNumber</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.LinePosition</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Path</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JTokenType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Array</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Boolean</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Bytes</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Comment</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Constructor</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Date</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Float</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Guid</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Integer</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Null</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Object</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Property</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Raw</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>String</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>TimeSpan</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Undefined</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>Uri</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JTokenWriter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JContainer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JContainer)</signature>
                        <name>AddParent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JValue, Newtonsoft.Json.JsonToken)</signature>
                        <name>AddValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.JsonToken)</signature>
                        <name>AddValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>get_CurrentToken</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>get_Token</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveParent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteComment</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonToken)</signature>
                        <name>WriteEnd</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteNull</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WritePropertyName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteRaw</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteStartArray</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteStartConstructor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteStartObject</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteUndefined</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(float32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int16)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int8)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.DateTimeOffset)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Decimal)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Guid)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Uri)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>WriteValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>_current</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JContainer</signature>
                        <name>_parent</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JContainer</signature>
                        <name>_token</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JValue</signature>
                        <name>_value</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>CurrentToken</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>Token</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JValue</name>
                <methodlist>
                    <method>
                        <signature>void(bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JValue)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Linq.JTokenType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.DateTimeOffset)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Decimal)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Guid)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Uri)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>CloneToken</name>
                    </method>
                    <method>
                        <signature>int32(Newtonsoft.Json.Linq.JTokenType, object, object)</signature>
                        <name>Compare</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(System.Numerics.BigInteger, object)</signature>
                        <name>CompareBigInteger</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(object, object)</signature>
                        <name>CompareFloat</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(Newtonsoft.Json.Linq.JValue)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JValue(string)</signature>
                        <name>CreateComment</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JValue()</signature>
                        <name>CreateNull</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JValue(string)</signature>
                        <name>CreateString</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JValue()</signature>
                        <name>CreateUndefined</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>DeepEquals</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JValue)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasValues</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JTokenType()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetDeepHashCode</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Linq.Expressions.Expression)</signature>
                        <name>GetMetaObject</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JTokenType(System.Nullable`1&lt;Newtonsoft.Json.Linq.JTokenType&gt;)</signature>
                        <name>GetStringValueType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JTokenType(System.Nullable`1&lt;Newtonsoft.Json.Linq.JTokenType&gt;, object)</signature>
                        <name>GetValueType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Linq.Expressions.ExpressionType, object, object, object&amp;)</signature>
                        <name>Operation</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Value</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.IComparable.CompareTo</name>
                    </method>
                    <method>
                        <signature>System.TypeCode()</signature>
                        <name>System.IConvertible.GetTypeCode</name>
                    </method>
                    <method>
                        <signature>bool(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToBoolean</name>
                    </method>
                    <method>
                        <signature>unsigned int8(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToByte</name>
                    </method>
                    <method>
                        <signature>char(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToChar</name>
                    </method>
                    <method>
                        <signature>System.DateTime(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToDateTime</name>
                    </method>
                    <method>
                        <signature>System.Decimal(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToDecimal</name>
                    </method>
                    <method>
                        <signature>float64(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToDouble</name>
                    </method>
                    <method>
                        <signature>int16(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToInt16</name>
                    </method>
                    <method>
                        <signature>int32(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToInt32</name>
                    </method>
                    <method>
                        <signature>int64(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToInt64</name>
                    </method>
                    <method>
                        <signature>int8(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToSByte</name>
                    </method>
                    <method>
                        <signature>float32(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToSingle</name>
                    </method>
                    <method>
                        <signature>object(System.Type, System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToType</name>
                    </method>
                    <method>
                        <signature>unsigned int16(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToUInt16</name>
                    </method>
                    <method>
                        <signature>unsigned int32(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToUInt32</name>
                    </method>
                    <method>
                        <signature>unsigned int64(System.IFormatProvider)</signature>
                        <name>System.IConvertible.ToUInt64</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(string, System.IFormatProvider)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.IFormatProvider)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JValue, Newtonsoft.Json.Linq.JValue)</signature>
                        <name>ValuesEquals</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter[])</signature>
                        <name>WriteTo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>_value</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JTokenType</signature>
                        <name>_valueType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>HasValues</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JTokenType()</signature>
                        <name>Type</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>Value</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.JValue/JValueDynamicProxy</name>
                <newname>Newtonsoft.Json.Linq.JValue/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, object&amp;)</signature>
                        <name>TryBinaryOperation</name>
                        <newname>aj</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, object&amp;)</signature>
                        <name>TryConvert</name>
                        <newname>ai</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Linq.MergeArrayHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Linq.MergeArrayHandling</signature>
                        <name>Concat</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.MergeArrayHandling</signature>
                        <name>Merge</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.MergeArrayHandling</signature>
                        <name>Replace</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.MergeArrayHandling</signature>
                        <name>Union</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.MemberSerialization</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.MemberSerialization</signature>
                        <name>Fields</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.MemberSerialization</signature>
                        <name>OptIn</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.MemberSerialization</signature>
                        <name>OptOut</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.MetadataPropertyHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.MetadataPropertyHandling</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.MetadataPropertyHandling</signature>
                        <name>Ignore</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.MetadataPropertyHandling</signature>
                        <name>ReadAhead</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.MissingMemberHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.MissingMemberHandling</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.MissingMemberHandling</signature>
                        <name>Ignore</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.NullValueHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.NullValueHandling</signature>
                        <name>Ignore</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.NullValueHandling</signature>
                        <name>Include</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.ObjectCreationHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.ObjectCreationHandling</signature>
                        <name>Auto</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ObjectCreationHandling</signature>
                        <name>Replace</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ObjectCreationHandling</signature>
                        <name>Reuse</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.PreserveReferencesHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.PreserveReferencesHandling</signature>
                        <name>All</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.PreserveReferencesHandling</signature>
                        <name>Arrays</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.PreserveReferencesHandling</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.PreserveReferencesHandling</signature>
                        <name>Objects</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.ReadType</name>
                <newname>a3</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.ReadType</signature>
                        <name>Read</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ReadType</signature>
                        <name>ReadAsBytes</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ReadType</signature>
                        <name>ReadAsDateTime</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ReadType</signature>
                        <name>ReadAsDateTimeOffset</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ReadType</signature>
                        <name>ReadAsDecimal</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ReadType</signature>
                        <name>ReadAsInt32</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ReadType</signature>
                        <name>ReadAsString</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.ReferenceLoopHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling</signature>
                        <name>Ignore</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling</signature>
                        <name>Serialize</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Required</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Required</signature>
                        <name>AllowNull</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Required</signature>
                        <name>Always</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Required</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.Extensions</name>
                <methodlist>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Schema.JsonSchema, System.Collections.Generic.IList`1&lt;string&gt;&amp;)</signature>
                        <name>IsValid</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>Validate</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Schema.JsonSchema, Newtonsoft.Json.Schema.ValidationEventHandler)</signature>
                        <name>Validate</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.Extensions/&lt;&gt;c__DisplayClass1</name>
                <newname>Newtonsoft.Json.Schema.Extensions/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Schema.ValidationEventArgs)</signature>
                        <name>&lt;IsValid&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>valid</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.Extensions/&lt;&gt;c__DisplayClass4</name>
                <newname>Newtonsoft.Json.Schema.Extensions/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Schema.ValidationEventArgs)</signature>
                        <name>&lt;IsValid&gt;b__3</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;string&gt;</signature>
                        <name>errors</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchema</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema()</signature>
                        <name>get_AdditionalItems</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema()</signature>
                        <name>get_AdditionalProperties</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AllowAdditionalItems</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AllowAdditionalProperties</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>get_Default</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DeferredReference</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Description</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Schema.JsonSchemaType&gt;()</signature>
                        <name>get_Disallow</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>get_DivisibleBy</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>get_Enum</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>get_ExclusiveMaximum</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>get_ExclusiveMinimum</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;()</signature>
                        <name>get_Extends</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Format</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>get_Hidden</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Id</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_InternalId</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;()</signature>
                        <name>get_Items</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Location</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>get_Maximum</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MaximumItems</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MaximumLength</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>get_Minimum</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MinimumItems</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MinimumLength</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Pattern</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchema&gt;()</signature>
                        <name>get_PatternProperties</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_PositionalItemsValidation</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchema&gt;()</signature>
                        <name>get_Properties</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>get_ReadOnly</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReferencesResolved</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>get_Required</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Requires</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Title</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>get_Transient</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Schema.JsonSchemaType&gt;()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UniqueItems</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema(string)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema(string, Newtonsoft.Json.Schema.JsonSchemaResolver)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema(Newtonsoft.Json.JsonReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Schema.JsonSchemaResolver)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>set_AdditionalItems</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>set_AdditionalProperties</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AllowAdditionalItems</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AllowAdditionalProperties</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>set_Default</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DeferredReference</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Description</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;Newtonsoft.Json.Schema.JsonSchemaType&gt;)</signature>
                        <name>set_Disallow</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>set_DivisibleBy</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;)</signature>
                        <name>set_Enum</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>set_ExclusiveMaximum</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>set_ExclusiveMinimum</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;)</signature>
                        <name>set_Extends</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Format</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>set_Hidden</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Id</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;)</signature>
                        <name>set_Items</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Location</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>set_Maximum</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MaximumItems</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MaximumLength</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>set_Minimum</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MinimumItems</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MinimumLength</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Pattern</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchema&gt;)</signature>
                        <name>set_PatternProperties</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_PositionalItemsValidation</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchema&gt;)</signature>
                        <name>set_Properties</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>set_ReadOnly</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ReferencesResolved</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>set_Required</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Requires</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Title</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>set_Transient</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;Newtonsoft.Json.Schema.JsonSchemaType&gt;)</signature>
                        <name>set_Type</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UniqueItems</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter)</signature>
                        <name>WriteTo</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaResolver)</signature>
                        <name>WriteTo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_internalId</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchema</signature>
                        <name>&lt;AdditionalItems&gt;k__BackingField</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchema</signature>
                        <name>&lt;AdditionalProperties&gt;k__BackingField</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;AllowAdditionalItems&gt;k__BackingField</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;AllowAdditionalProperties&gt;k__BackingField</name>
                        <newname>ab</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JToken</signature>
                        <name>&lt;Default&gt;k__BackingField</name>
                        <newname>af</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;DeferredReference&gt;k__BackingField</name>
                        <newname>aj</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Description&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Schema.JsonSchemaType&gt;</signature>
                        <name>&lt;Disallow&gt;k__BackingField</name>
                        <newname>ae</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>&lt;DivisibleBy&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;Enum&gt;k__BackingField</name>
                        <newname>ad</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>&lt;ExclusiveMaximum&gt;k__BackingField</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>&lt;ExclusiveMinimum&gt;k__BackingField</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;</signature>
                        <name>&lt;Extends&gt;k__BackingField</name>
                        <newname>ag</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Format&gt;k__BackingField</name>
                        <newname>ah</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>&lt;Hidden&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Id&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;</signature>
                        <name>&lt;Items&gt;k__BackingField</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Location&gt;k__BackingField</name>
                        <newname>ai</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>&lt;Maximum&gt;k__BackingField</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;MaximumItems&gt;k__BackingField</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;MaximumLength&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>&lt;Minimum&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;MinimumItems&gt;k__BackingField</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;MinimumLength&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Pattern&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchema&gt;</signature>
                        <name>&lt;PatternProperties&gt;k__BackingField</name>
                        <newname>aa</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;PositionalItemsValidation&gt;k__BackingField</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchema&gt;</signature>
                        <name>&lt;Properties&gt;k__BackingField</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>&lt;ReadOnly&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ReferencesResolved&gt;k__BackingField</name>
                        <newname>ak</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>&lt;Required&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Requires&gt;k__BackingField</name>
                        <newname>ac</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Title&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>&lt;Transient&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Schema.JsonSchemaType&gt;</signature>
                        <name>&lt;Type&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;UniqueItems&gt;k__BackingField</name>
                        <newname>x</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Schema.JsonSchema()</signature>
                        <name>AdditionalItems</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Schema.JsonSchema()</signature>
                        <name>AdditionalProperties</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>AllowAdditionalItems</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>AllowAdditionalProperties</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Linq.JToken()</signature>
                        <name>Default</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>DeferredReference</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Description</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Schema.JsonSchemaType&gt;()</signature>
                        <name>Disallow</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>DivisibleBy</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>Enum</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>ExclusiveMaximum</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>ExclusiveMinimum</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;()</signature>
                        <name>Extends</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Format</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>Hidden</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Id</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>InternalId</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;()</signature>
                        <name>Items</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Location</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>Maximum</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>MaximumItems</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>MaximumLength</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>Minimum</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>MinimumItems</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>MinimumLength</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Pattern</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchema&gt;()</signature>
                        <name>PatternProperties</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>PositionalItemsValidation</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchema&gt;()</signature>
                        <name>Properties</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>ReadOnly</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReferencesResolved</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>Required</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Requires</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Title</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>Transient</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Schema.JsonSchemaType&gt;()</signature>
                        <name>Type</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>UniqueItems</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaBuilder</name>
                <newname>b7</newname>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaResolver)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>BuildSchema</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema()</signature>
                        <name>get_CurrentSchema</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType(string)</signature>
                        <name>MapType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Schema.JsonSchemaType)</signature>
                        <name>MapType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema()</signature>
                        <name>Pop</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ProcessAdditionalItems</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ProcessAdditionalProperties</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ProcessEnum</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ProcessExtends</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ProcessItems</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchema&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ProcessProperties</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Linq.JObject)</signature>
                        <name>ProcessSchemaProperties</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Schema.JsonSchemaType&gt;(Newtonsoft.Json.Linq.JToken)</signature>
                        <name>ProcessType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>Push</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema(Newtonsoft.Json.JsonReader)</signature>
                        <name>Read</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>ResolveReferences</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>UnescapeReference</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchema</signature>
                        <name>_currentSchema</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchema&gt;</signature>
                        <name>_documentSchemas</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaResolver</signature>
                        <name>_resolver</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Linq.JObject</signature>
                        <name>_rootSchema</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;</signature>
                        <name>_stack</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaBuilder/&lt;&gt;c__DisplayClass2</name>
                <newname>b7/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.KeyValuePair`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaType&gt;)</signature>
                        <name>&lt;MapType&gt;b__1</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType</signature>
                        <name>type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaConstants</name>
                <newname>an</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>AdditionalItemsPropertyName</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>AdditionalPropertiesPropertyName</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DefaultPropertyName</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DescriptionPropertyName</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DisallowPropertyName</name>
                        <newname>aa</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DivisibleByPropertyName</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>EnumPropertyName</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ExclusiveMaximumPropertyName</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ExclusiveMinimumPropertyName</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ExtendsPropertyName</name>
                        <newname>ab</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FormatPropertyName</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>HiddenPropertyName</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>IdPropertyName</name>
                        <newname>ac</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ItemsPropertyName</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaType&gt;</signature>
                        <name>JsonSchemaTypeMapping</name>
                        <newname>ag</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>MaximumItemsPropertyName</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>MaximumLengthPropertyName</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>MaximumPropertyName</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>MinimumItemsPropertyName</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>MinimumLengthPropertyName</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>MinimumPropertyName</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OptionLabelPropertyName</name>
                        <newname>af</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OptionValuePropertyName</name>
                        <newname>ae</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PatternPropertiesPropertyName</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PatternPropertyName</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PropertiesPropertyName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ReadOnlyPropertyName</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RequiredPropertyName</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RequiresPropertyName</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TitlePropertyName</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TransientPropertyName</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TypePropertyName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>UniqueItemsPropertyName</name>
                        <newname>ad</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception, string, int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LineNumber</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LinePosition</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_LineNumber</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_LinePosition</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Path</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;LineNumber&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;LinePosition&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Path&gt;k__BackingField</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>LineNumber</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>LinePosition</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Path</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaGenerator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType(Newtonsoft.Json.Schema.JsonSchemaType, Newtonsoft.Json.Required)</signature>
                        <name>AddNullType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema(System.Type)</signature>
                        <name>Generate</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema(System.Type, bool)</signature>
                        <name>Generate</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema(System.Type, Newtonsoft.Json.Schema.JsonSchemaResolver)</signature>
                        <name>Generate</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema(System.Type, Newtonsoft.Json.Schema.JsonSchemaResolver, bool)</signature>
                        <name>Generate</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema(System.Type, Newtonsoft.Json.Required, bool)</signature>
                        <name>GenerateInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Type, Newtonsoft.Json.Serialization.JsonISerializableContract)</signature>
                        <name>GenerateISerializableContract</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Type, Newtonsoft.Json.Serialization.JsonObjectContract)</signature>
                        <name>GenerateObjectSchema</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.IContractResolver()</signature>
                        <name>get_ContractResolver</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema()</signature>
                        <name>get_CurrentSchema</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.UndefinedSchemaIdHandling()</signature>
                        <name>get_UndefinedSchemaIdHandling</name>
                    </method>
                    <method>
                        <signature>string(System.Type)</signature>
                        <name>GetDescription</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType(System.Type, Newtonsoft.Json.Required)</signature>
                        <name>GetJsonSchemaType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(System.Type)</signature>
                        <name>GetTitle</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(System.Type, bool)</signature>
                        <name>GetTypeId</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.DefaultValueHandling, Newtonsoft.Json.DefaultValueHandling)</signature>
                        <name>HasFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Nullable`1&lt;Newtonsoft.Json.Schema.JsonSchemaType&gt;, Newtonsoft.Json.Schema.JsonSchemaType)</signature>
                        <name>HasFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaGenerator/TypeSchema()</signature>
                        <name>Pop</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaGenerator/TypeSchema)</signature>
                        <name>Push</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.IContractResolver)</signature>
                        <name>set_ContractResolver</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.UndefinedSchemaIdHandling)</signature>
                        <name>set_UndefinedSchemaIdHandling</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.IContractResolver</signature>
                        <name>_contractResolver</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchema</signature>
                        <name>_currentSchema</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaResolver</signature>
                        <name>_resolver</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaGenerator/TypeSchema&gt;</signature>
                        <name>_stack</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.UndefinedSchemaIdHandling</signature>
                        <name>&lt;UndefinedSchemaIdHandling&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.IContractResolver()</signature>
                        <name>ContractResolver</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Schema.JsonSchema()</signature>
                        <name>CurrentSchema</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Schema.UndefinedSchemaIdHandling()</signature>
                        <name>UndefinedSchemaIdHandling</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaGenerator/&lt;&gt;c__DisplayClass1</name>
                <newname>Newtonsoft.Json.Schema.JsonSchemaGenerator/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Schema.JsonSchemaGenerator/TypeSchema)</signature>
                        <name>&lt;GenerateInternal&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaGenerator/TypeSchema</name>
                <newname>Newtonsoft.Json.Schema.JsonSchemaGenerator/a</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Type, Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema()</signature>
                        <name>get_Schema</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_Type</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>set_Schema</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_Type</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchema</signature>
                        <name>&lt;Schema&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;Type&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Schema.JsonSchema()</signature>
                        <name>Schema</name>
                        <newname>b</newname>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>Type</name>
                        <newname>a</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaModel</name>
                <newname>bh</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>Combine</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaModel(System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;)</signature>
                        <name>Create</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaModel()</signature>
                        <name>get_AdditionalItems</name>
                        <newname>ar</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaModel()</signature>
                        <name>get_AdditionalProperties</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AllowAdditionalItems</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AllowAdditionalProperties</name>
                        <newname>ap</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType()</signature>
                        <name>get_Disallow</name>
                        <newname>ah</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>get_DivisibleBy</name>
                        <newname>ai</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>get_Enum</name>
                        <newname>as</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ExclusiveMaximum</name>
                        <newname>at</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ExclusiveMinimum</name>
                        <newname>af</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaModel&gt;()</signature>
                        <name>get_Items</name>
                        <newname>aj</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>get_Maximum</name>
                        <newname>ae</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MaximumItems</name>
                        <newname>aq</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MaximumLength</name>
                        <newname>ag</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>get_Minimum</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MinimumItems</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MinimumLength</name>
                        <newname>ao</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaModel&gt;()</signature>
                        <name>get_PatternProperties</name>
                        <newname>ac</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;string&gt;()</signature>
                        <name>get_Patterns</name>
                        <newname>z</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_PositionalItemsValidation</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaModel&gt;()</signature>
                        <name>get_Properties</name>
                        <newname>an</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Required</name>
                        <newname>am</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType()</signature>
                        <name>get_Type</name>
                        <newname>al</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UniqueItems</name>
                        <newname>ak</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>set_AdditionalItems</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaModel)</signature>
                        <name>set_AdditionalProperties</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AllowAdditionalItems</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AllowAdditionalProperties</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaType)</signature>
                        <name>set_Disallow</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>set_DivisibleBy</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;)</signature>
                        <name>set_Enum</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ExclusiveMaximum</name>
                        <newname>z</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ExclusiveMinimum</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaModel&gt;)</signature>
                        <name>set_Items</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>set_Maximum</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MaximumItems</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MaximumLength</name>
                        <newname>z</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>set_Minimum</name>
                        <newname>z</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MinimumItems</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MinimumLength</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaModel&gt;)</signature>
                        <name>set_PatternProperties</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;string&gt;)</signature>
                        <name>set_Patterns</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_PositionalItemsValidation</name>
                        <newname>ac</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaModel&gt;)</signature>
                        <name>set_Properties</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Required</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaType)</signature>
                        <name>set_Type</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UniqueItems</name>
                        <newname>aa</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaModel</signature>
                        <name>&lt;AdditionalItems&gt;k__BackingField</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaModel</signature>
                        <name>&lt;AdditionalProperties&gt;k__BackingField</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;AllowAdditionalItems&gt;k__BackingField</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;AllowAdditionalProperties&gt;k__BackingField</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType</signature>
                        <name>&lt;Disallow&gt;k__BackingField</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>&lt;DivisibleBy&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;</signature>
                        <name>&lt;Enum&gt;k__BackingField</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ExclusiveMaximum&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ExclusiveMinimum&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaModel&gt;</signature>
                        <name>&lt;Items&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>&lt;Maximum&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;MaximumItems&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;MaximumLength&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>&lt;Minimum&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;MinimumItems&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;MinimumLength&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaModel&gt;</signature>
                        <name>&lt;PatternProperties&gt;k__BackingField</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;string&gt;</signature>
                        <name>&lt;Patterns&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;PositionalItemsValidation&gt;k__BackingField</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaModel&gt;</signature>
                        <name>&lt;Properties&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Required&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType</signature>
                        <name>&lt;Type&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;UniqueItems&gt;k__BackingField</name>
                        <newname>u</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaModel()</signature>
                        <name>AdditionalItems</name>
                        <newname>q</newname>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaModel()</signature>
                        <name>AdditionalProperties</name>
                        <newname>p</newname>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>AllowAdditionalItems</name>
                        <newname>t</newname>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>AllowAdditionalProperties</name>
                        <newname>s</newname>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType()</signature>
                        <name>Disallow</name>
                        <newname>w</newname>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>DivisibleBy</name>
                        <newname>e</newname>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;()</signature>
                        <name>Enum</name>
                        <newname>v</newname>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ExclusiveMaximum</name>
                        <newname>i</newname>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ExclusiveMinimum</name>
                        <newname>h</newname>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchemaModel&gt;()</signature>
                        <name>Items</name>
                        <newname>m</newname>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>Maximum</name>
                        <newname>g</newname>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>MaximumItems</name>
                        <newname>k</newname>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>MaximumLength</name>
                        <newname>d</newname>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>Minimum</name>
                        <newname>f</newname>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>MinimumItems</name>
                        <newname>j</newname>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>MinimumLength</name>
                        <newname>c</newname>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaModel&gt;()</signature>
                        <name>PatternProperties</name>
                        <newname>o</newname>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;string&gt;()</signature>
                        <name>Patterns</name>
                        <newname>l</newname>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>PositionalItemsValidation</name>
                        <newname>r</newname>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaModel&gt;()</signature>
                        <name>Properties</name>
                        <newname>n</newname>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Required</name>
                        <newname>a</newname>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType()</signature>
                        <name>Type</name>
                        <newname>b</newname>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>UniqueItems</name>
                        <newname>u</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaModelBuilder</name>
                <newname>i</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>AddAdditionalItems</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>AddAdditionalProperties</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaNode, int32, Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>AddItem</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchema&gt;, System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaNode&gt;)</signature>
                        <name>AddProperties</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaNode&gt;, string, Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>AddProperty</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaNode(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>AddSchema</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaModel(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>Build</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaModel(Newtonsoft.Json.Schema.JsonSchemaNode)</signature>
                        <name>BuildNodeModel</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaNode</signature>
                        <name>_node</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;Newtonsoft.Json.Schema.JsonSchemaNode,Newtonsoft.Json.Schema.JsonSchemaModel&gt;</signature>
                        <name>_nodeModels</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaNodeCollection</signature>
                        <name>_nodes</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaNode</name>
                <newname>ad</newname>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>&lt;GetId&gt;b__0</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>&lt;GetId&gt;b__1</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaNode(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>Combine</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaNode()</signature>
                        <name>get_AdditionalItems</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaNode()</signature>
                        <name>get_AdditionalProperties</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Id</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Schema.JsonSchemaNode&gt;()</signature>
                        <name>get_Items</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaNode&gt;()</signature>
                        <name>get_PatternProperties</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaNode&gt;()</signature>
                        <name>get_Properties</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;()</signature>
                        <name>get_Schemas</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>string(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;)</signature>
                        <name>GetId</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaNode)</signature>
                        <name>set_AdditionalItems</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaNode)</signature>
                        <name>set_AdditionalProperties</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Id</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;Newtonsoft.Json.Schema.JsonSchemaNode&gt;)</signature>
                        <name>set_Items</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaNode&gt;)</signature>
                        <name>set_PatternProperties</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaNode&gt;)</signature>
                        <name>set_Properties</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.ObjectModel.ReadOnlyCollection`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;)</signature>
                        <name>set_Schemas</name>
                        <newname>h</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaNode</signature>
                        <name>&lt;AdditionalItems&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaNode</signature>
                        <name>&lt;AdditionalProperties&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Id&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Schema.JsonSchemaNode&gt;</signature>
                        <name>&lt;Items&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaNode&gt;</signature>
                        <name>&lt;PatternProperties&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchemaNode&gt;</signature>
                        <name>&lt;Properties&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;</signature>
                        <name>&lt;Schemas&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Schema.JsonSchema,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>i</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaNodeCollection</name>
                <newname>z</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Schema.JsonSchemaNode)</signature>
                        <name>GetKeyForItem</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaResolver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;()</signature>
                        <name>get_LoadedSchemas</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchema(string)</signature>
                        <name>GetSchema</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;)</signature>
                        <name>set_LoadedSchemas</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;</signature>
                        <name>&lt;LoadedSchemas&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Schema.JsonSchema&gt;()</signature>
                        <name>LoadedSchemas</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaResolver/&lt;&gt;c__DisplayClass2</name>
                <newname>Newtonsoft.Json.Schema.JsonSchemaResolver/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>&lt;GetSchema&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>&lt;GetSchema&gt;b__1</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>reference</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType</signature>
                        <name>Any</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType</signature>
                        <name>Array</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType</signature>
                        <name>Boolean</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType</signature>
                        <name>Float</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType</signature>
                        <name>Integer</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType</signature>
                        <name>Null</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType</signature>
                        <name>Object</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaType</signature>
                        <name>String</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.JsonSchemaWriter</name>
                <newname>af</newname>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaResolver)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Schema.JsonSchemaType)</signature>
                        <name>&lt;WriteType&gt;b__1</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>ReferenceOrWriteSchema</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>WriteItems</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, string, object)</signature>
                        <name>WritePropertyIfNotNull</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchema)</signature>
                        <name>WriteSchema</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, string, System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Schema.JsonSchema&gt;)</signature>
                        <name>WriteSchemaDictionaryIfNotNull</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)</signature>
                        <name>WriteType</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaResolver</signature>
                        <name>_resolver</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter</signature>
                        <name>_writer</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Schema.JsonSchemaType,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.UndefinedSchemaIdHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Schema.UndefinedSchemaIdHandling</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.UndefinedSchemaIdHandling</signature>
                        <name>UseAssemblyQualifiedName</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Schema.UndefinedSchemaIdHandling</signature>
                        <name>UseTypeName</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.ValidationEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.Schema.JsonSchemaException)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaException()</signature>
                        <name>get_Exception</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Message</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaException</signature>
                        <name>_ex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Schema.JsonSchemaException()</signature>
                        <name>Exception</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Message</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Path</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Schema.ValidationEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, Newtonsoft.Json.Schema.ValidationEventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Schema.ValidationEventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Serialization.CachedAttributeGetter`1</name>
                <newname>e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>!0(object)</signature>
                        <name>GetAttribute</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ThreadSafeStore`2&lt;object,!0&gt;</signature>
                        <name>TypeAttributeCache</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ResolvePropertyName</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.DefaultContractResolver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>&lt;CreateProperties&gt;b__10</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.ConstructorInfo)</signature>
                        <name>&lt;GetAttributeConstructor&gt;b__d</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Reflection.MemberInfo&gt;(System.Type)</signature>
                        <name>&lt;GetExtensionDataMemberForType&gt;b__5</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;GetExtensionDataMemberForType&gt;b__6</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;GetSerializableMembers&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;GetSerializableMembers&gt;b__2</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvertToString</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonArrayContract(System.Type)</signature>
                        <name>CreateArrayContract</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.JsonProperty&gt;(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)</signature>
                        <name>CreateConstructorParameters</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonContract(System.Type)</signature>
                        <name>CreateContract</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonDictionaryContract(System.Type)</signature>
                        <name>CreateDictionaryContract</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonDynamicContract(System.Type)</signature>
                        <name>CreateDynamicContract</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonISerializableContract(System.Type)</signature>
                        <name>CreateISerializableContract</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonLinqContract(System.Type)</signature>
                        <name>CreateLinqContract</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.IValueProvider(System.Reflection.MemberInfo)</signature>
                        <name>CreateMemberValueProvider</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonObjectContract(System.Type)</signature>
                        <name>CreateObjectContract</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonPrimitiveContract(System.Type)</signature>
                        <name>CreatePrimitiveContract</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.JsonProperty&gt;(System.Type, Newtonsoft.Json.MemberSerialization)</signature>
                        <name>CreateProperties</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)</signature>
                        <name>CreateProperty</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonProperty(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)</signature>
                        <name>CreatePropertyFromConstructorParameter</name>
                    </method>
                    <method>
                        <signature>System.Predicate`1&lt;object&gt;(System.Reflection.MemberInfo)</signature>
                        <name>CreateShouldSerializeTest</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonStringContract(System.Type)</signature>
                        <name>CreateStringContract</name>
                    </method>
                    <method>
                        <signature>System.Reflection.BindingFlags()</signature>
                        <name>get_DefaultMembersSearchFlags</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_DynamicCodeGeneration</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IgnoreSerializableAttribute</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IgnoreSerializableInterface</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.IContractResolver()</signature>
                        <name>get_Instance</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_SerializeCompilerGeneratedMembers</name>
                    </method>
                    <method>
                        <signature>System.Reflection.ConstructorInfo(System.Type)</signature>
                        <name>GetAttributeConstructor</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void(System.Type, System.Collections.Generic.List`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;&amp;, System.Collections.Generic.List`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;&amp;, System.Collections.Generic.List`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;&amp;, System.Collections.Generic.List`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;&amp;, System.Collections.Generic.List`1&lt;Newtonsoft.Json.Serialization.SerializationErrorCallback&gt;&amp;)</signature>
                        <name>GetCallbackMethodsForType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;System.Type&gt;(System.Type)</signature>
                        <name>GetClassHierarchyForType</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>string(System.Type)</signature>
                        <name>GetClrTypeFullName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Func`1&lt;object&gt;(System.Type)</signature>
                        <name>GetDefaultCreator</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.MemberInfo(System.Type)</signature>
                        <name>GetExtensionDataMemberForType</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.ConstructorInfo(System.Type)</signature>
                        <name>GetParametrizedConstructor</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetResolvedPropertyName</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;System.Reflection.MemberInfo&gt;(System.Type)</signature>
                        <name>GetSerializableMembers</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.DefaultContractResolverState()</signature>
                        <name>GetState</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonContract)</signature>
                        <name>InitializeContract</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsIConvertible</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsJsonPrimitiveType</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, System.Type&amp;)</signature>
                        <name>IsValidCallback</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonContract, System.Type)</signature>
                        <name>ResolveCallbackMethods</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonContract(System.Type)</signature>
                        <name>ResolveContract</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverter(System.Type)</signature>
                        <name>ResolveContractConverter</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ResolveDictionaryKey</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ResolvePropertyName</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.BindingFlags)</signature>
                        <name>set_DefaultMembersSearchFlags</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IgnoreSerializableAttribute</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IgnoreSerializableInterface</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_SerializeCompilerGeneratedMembers</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)</signature>
                        <name>SetExtensionDataDelegates</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)</signature>
                        <name>SetIsSpecifiedActions</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, bool&amp;)</signature>
                        <name>SetPropertySettingsFromAttributes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>ShouldSerializeEntityMember</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>ShouldSkipDeserialized</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>ShouldSkipSerializing</name>
                        <newname>g</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.IContractResolver</signature>
                        <name>_instance</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.DefaultContractResolverState</signature>
                        <name>_instanceState</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_sharedCache</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.DefaultContractResolverState</signature>
                        <name>_sharedState</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.BindingFlags</signature>
                        <name>&lt;DefaultMembersSearchFlags&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IgnoreSerializableAttribute&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IgnoreSerializableInterface&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;SerializeCompilerGeneratedMembers&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonConverter[]</signature>
                        <name>BuiltInConverters</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Serialization.JsonProperty,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate11</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.MemberInfo,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.MemberInfo,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate4</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Type,System.Collections.Generic.IEnumerable`1&lt;System.Reflection.MemberInfo&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate7</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.MemberInfo,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate8</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.ConstructorInfo,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatee</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>TypeContractCacheLock</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Reflection.BindingFlags()</signature>
                        <name>DefaultMembersSearchFlags</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>DynamicCodeGeneration</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IgnoreSerializableAttribute</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IgnoreSerializableInterface</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.IContractResolver()</signature>
                        <name>Instance</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>SerializeCompilerGeneratedMembers</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.DefaultContractResolver/&lt;&gt;c__DisplayClass13</name>
                <newname>Newtonsoft.Json.Serialization.DefaultContractResolver/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>&lt;CreateShouldSerializeTest&gt;b__12</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>shouldSerializeCall</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.DefaultContractResolver/&lt;&gt;c__DisplayClass16</name>
                <newname>Newtonsoft.Json.Serialization.DefaultContractResolver/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>&lt;SetIsSpecifiedActions&gt;b__15</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;object,object&gt;</signature>
                        <name>specifiedPropertyGet</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.DefaultContractResolver/&lt;&gt;c__DisplayClassb</name>
                <newname>Newtonsoft.Json.Serialization.DefaultContractResolver/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, string, object)</signature>
                        <name>&lt;SetExtensionDataDelegates&gt;b__9</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;object,object&gt;&gt;(object)</signature>
                        <name>&lt;SetExtensionDataDelegates&gt;b__a</name>
                        <newname>h</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;</signature>
                        <name>createEnumerableWrapper</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Func`1&lt;object&gt;</signature>
                        <name>createExtensionDataDictionary</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;object,object&gt;</signature>
                        <name>getExtensionDataDictionary</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isJTokenValueType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MemberInfo</signature>
                        <name>member</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Action`2&lt;object,object&gt;</signature>
                        <name>setExtensionDataDictionary</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>setExtensionDataDictionaryValue</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TEnumeratorKey</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TEnumeratorValue</name>
                    <newname>b</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Serialization.DefaultContractResolver/DictionaryEnumerator`2</name>
                <newname>Newtonsoft.Json.Serialization.DefaultContractResolver/b</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.KeyValuePair`2&lt;object,object&gt;()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.KeyValuePair`2&lt;object,object&gt;&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;&gt;</signature>
                        <name>_e</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.DefaultContractResolverState</name>
                <newname>w</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;Newtonsoft.Json.Serialization.ResolverContractKey,Newtonsoft.Json.Serialization.JsonContract&gt;</signature>
                        <name>ContractCache</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PropertyNameTable</signature>
                        <name>NameTable</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.DefaultReferenceResolver</name>
                <newname>bo</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, string, object)</signature>
                        <name>AddReference</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.BidirectionalDictionary`2&lt;string,object&gt;(object)</signature>
                        <name>GetMappings</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(object, object)</signature>
                        <name>GetReference</name>
                    </method>
                    <method>
                        <signature>bool(object, object)</signature>
                        <name>IsReferenced</name>
                    </method>
                    <method>
                        <signature>object(object, string)</signature>
                        <name>ResolveReference</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>_referenceCount</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.DefaultSerializationBinder</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Type, string&amp;, string&amp;)</signature>
                        <name>BindToName</name>
                    </method>
                    <method>
                        <signature>System.Type(string, string)</signature>
                        <name>BindToType</name>
                    </method>
                    <method>
                        <signature>System.Type(Newtonsoft.Json.Serialization.DefaultSerializationBinder/TypeNameKey)</signature>
                        <name>GetTypeFromTypeNameKey</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ThreadSafeStore`2&lt;Newtonsoft.Json.Serialization.DefaultSerializationBinder/TypeNameKey,System.Type&gt;</signature>
                        <name>_typeCache</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.DefaultSerializationBinder</signature>
                        <name>Instance</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.DefaultSerializationBinder/TypeNameKey</name>
                <newname>Newtonsoft.Json.Serialization.DefaultSerializationBinder/a</newname>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Serialization.DefaultSerializationBinder/TypeNameKey)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>AssemblyName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TypeName</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.DiagnosticsTraceWriter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Diagnostics.TraceLevel()</signature>
                        <name>get_LevelFilter</name>
                    </method>
                    <method>
                        <signature>System.Diagnostics.TraceEventType(System.Diagnostics.TraceLevel)</signature>
                        <name>GetTraceEventType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Diagnostics.TraceLevel)</signature>
                        <name>set_LevelFilter</name>
                    </method>
                    <method>
                        <signature>void(System.Diagnostics.TraceLevel, string, System.Exception)</signature>
                        <name>Trace</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Diagnostics.TraceLevel</signature>
                        <name>&lt;LevelFilter&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Diagnostics.TraceLevel()</signature>
                        <name>LevelFilter</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.DynamicValueProvider</name>
                <methodlist>
                    <method>
                        <signature>void(System.Reflection.MemberInfo)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>SetValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;object,object&gt;</signature>
                        <name>_getter</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MemberInfo</signature>
                        <name>_memberInfo</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Action`2&lt;object,object&gt;</signature>
                        <name>_setter</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.ErrorContext</name>
                <methodlist>
                    <method>
                        <signature>void(object, object, string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Exception()</signature>
                        <name>get_Error</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Handled</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Member</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_OriginalObject</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Traced</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>set_Error</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Handled</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Member</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_OriginalObject</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Path</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Traced</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Exception</signature>
                        <name>&lt;Error&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Handled&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;Member&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;OriginalObject&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Path&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Traced&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Exception()</signature>
                        <name>Error</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Handled</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>Member</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>OriginalObject</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Path</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Traced</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.ErrorEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Serialization.ErrorContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_CurrentObject</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ErrorContext()</signature>
                        <name>get_ErrorContext</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_CurrentObject</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.ErrorContext)</signature>
                        <name>set_ErrorContext</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>&lt;CurrentObject&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ErrorContext</signature>
                        <name>&lt;ErrorContext&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>CurrentObject</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.ErrorContext()</signature>
                        <name>ErrorContext</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.ExpressionValueProvider</name>
                <methodlist>
                    <method>
                        <signature>void(System.Reflection.MemberInfo)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>SetValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;object,object&gt;</signature>
                        <name>_getter</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MemberInfo</signature>
                        <name>_memberInfo</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Action`2&lt;object,object&gt;</signature>
                        <name>_setter</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.ExtensionDataGetter</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;object,object&gt;&gt;(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;object,object&gt;&gt;(object)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.ExtensionDataSetter</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, string, object, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, string, object)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.IAttributeProvider</name>
                <methodlist>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;System.Attribute&gt;(bool)</signature>
                        <name>GetAttributes</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;System.Attribute&gt;(System.Type, bool)</signature>
                        <name>GetAttributes</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.IContractResolver</name>
                <methodlist>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonContract(System.Type)</signature>
                        <name>ResolveContract</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.IReferenceResolver</name>
                <methodlist>
                    <method>
                        <signature>void(object, string, object)</signature>
                        <name>AddReference</name>
                    </method>
                    <method>
                        <signature>string(object, object)</signature>
                        <name>GetReference</name>
                    </method>
                    <method>
                        <signature>bool(object, object)</signature>
                        <name>IsReferenced</name>
                    </method>
                    <method>
                        <signature>object(object, string)</signature>
                        <name>ResolveReference</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.ITraceWriter</name>
                <methodlist>
                    <method>
                        <signature>System.Diagnostics.TraceLevel()</signature>
                        <name>get_LevelFilter</name>
                    </method>
                    <method>
                        <signature>void(System.Diagnostics.TraceLevel, string, System.Exception)</signature>
                        <name>Trace</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>System.Diagnostics.TraceLevel()</signature>
                        <name>LevelFilter</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.IValueProvider</name>
                <methodlist>
                    <method>
                        <signature>object(object)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>SetValue</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonArrayContract</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>CreateTemporaryCollection</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.IWrappedCollection(object)</signature>
                        <name>CreateWrapper</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanDeserialize</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_CollectionItemType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasParametrizedCreator</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsArray</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsMultidimensionalArray</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;()</signature>
                        <name>get_ParametrizedCreator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ShouldCreateWrapper</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CanDeserialize</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_CollectionItemType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsArray</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsMultidimensionalArray</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ShouldCreateWrapper</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>_genericCollectionDefinitionType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`1&lt;object&gt;</signature>
                        <name>_genericTemporaryCollectionCreator</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;</signature>
                        <name>_genericWrapperCreator</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>_genericWrapperType</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.ConstructorInfo</signature>
                        <name>_parametrizedConstructor</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;</signature>
                        <name>_parametrizedCreator</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;CanDeserialize&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;CollectionItemType&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsArray&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsMultidimensionalArray&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ShouldCreateWrapper&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>CanDeserialize</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>CollectionItemType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasParametrizedCreator</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsArray</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsMultidimensionalArray</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;()</signature>
                        <name>ParametrizedCreator</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ShouldCreateWrapper</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonContainerContract</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonContract()</signature>
                        <name>get_FinalItemContract</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonContract()</signature>
                        <name>get_ItemContract</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverter()</signature>
                        <name>get_ItemConverter</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>get_ItemIsReference</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;()</signature>
                        <name>get_ItemReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;()</signature>
                        <name>get_ItemTypeNameHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonContract)</signature>
                        <name>set_ItemContract</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonConverter)</signature>
                        <name>set_ItemConverter</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>set_ItemIsReference</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;)</signature>
                        <name>set_ItemReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;)</signature>
                        <name>set_ItemTypeNameHandling</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContract</signature>
                        <name>_finalItemContract</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContract</signature>
                        <name>_itemContract</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonConverter</signature>
                        <name>&lt;ItemConverter&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>&lt;ItemIsReference&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;</signature>
                        <name>&lt;ItemReferenceLoopHandling&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;</signature>
                        <name>&lt;ItemTypeNameHandling&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.JsonContract()</signature>
                        <name>FinalItemContract</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.JsonContract()</signature>
                        <name>ItemContract</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.JsonConverter()</signature>
                        <name>ItemConverter</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>ItemIsReference</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;()</signature>
                        <name>ItemReferenceLoopHandling</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;()</signature>
                        <name>ItemTypeNameHandling</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonContract</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.SerializationCallback(System.Reflection.MethodInfo)</signature>
                        <name>CreateSerializationCallback</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.SerializationErrorCallback(System.Reflection.MethodInfo)</signature>
                        <name>CreateSerializationErrorCallback</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverter()</signature>
                        <name>get_Converter</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_CreatedType</name>
                    </method>
                    <method>
                        <signature>System.Func`1&lt;object&gt;()</signature>
                        <name>get_DefaultCreator</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_DefaultCreatorNonPublic</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverter()</signature>
                        <name>get_InternalConverter</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>get_IsReference</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>get_OnDeserialized</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;()</signature>
                        <name>get_OnDeserializedCallbacks</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>get_OnDeserializing</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;()</signature>
                        <name>get_OnDeserializingCallbacks</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>get_OnError</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationErrorCallback&gt;()</signature>
                        <name>get_OnErrorCallbacks</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>get_OnSerialized</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;()</signature>
                        <name>get_OnSerializedCallbacks</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>get_OnSerializing</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;()</signature>
                        <name>get_OnSerializingCallbacks</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_UnderlyingType</name>
                    </method>
                    <method>
                        <signature>void(object, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>InvokeOnDeserialized</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>InvokeOnDeserializing</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext)</signature>
                        <name>InvokeOnError</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>InvokeOnSerialized</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>InvokeOnSerializing</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonConverter)</signature>
                        <name>set_Converter</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_CreatedType</name>
                    </method>
                    <method>
                        <signature>void(System.Func`1&lt;object&gt;)</signature>
                        <name>set_DefaultCreator</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_DefaultCreatorNonPublic</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonConverter)</signature>
                        <name>set_InternalConverter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>set_IsReference</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo)</signature>
                        <name>set_OnDeserialized</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo)</signature>
                        <name>set_OnDeserializing</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo)</signature>
                        <name>set_OnError</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo)</signature>
                        <name>set_OnSerialized</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo)</signature>
                        <name>set_OnSerializing</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_UnderlyingType</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>_createdType</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;</signature>
                        <name>_onDeserializedCallbacks</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;</signature>
                        <name>_onDeserializingCallbacks</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationErrorCallback&gt;</signature>
                        <name>_onErrorCallbacks</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;</signature>
                        <name>_onSerializedCallbacks</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;</signature>
                        <name>_onSerializingCallbacks</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonConverter</signature>
                        <name>&lt;Converter&gt;k__BackingField</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Func`1&lt;object&gt;</signature>
                        <name>&lt;DefaultCreator&gt;k__BackingField</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;DefaultCreatorNonPublic&gt;k__BackingField</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonConverter</signature>
                        <name>&lt;InternalConverter&gt;k__BackingField</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>&lt;IsReference&gt;k__BackingField</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;UnderlyingType&gt;k__BackingField</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContractType</signature>
                        <name>ContractType</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.ReadType</signature>
                        <name>InternalReadType</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>IsConvertable</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>IsEnum</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>IsInstantiable</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>IsNullable</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>IsReadOnlyOrFixedSize</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>IsSealed</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>NonNullableUnderlyingType</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.JsonConverter()</signature>
                        <name>Converter</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>CreatedType</name>
                    </property>
                    <property>
                        <signature>System.Func`1&lt;object&gt;()</signature>
                        <name>DefaultCreator</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>DefaultCreatorNonPublic</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.JsonConverter()</signature>
                        <name>InternalConverter</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>IsReference</name>
                    </property>
                    <property>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>OnDeserialized</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;()</signature>
                        <name>OnDeserializedCallbacks</name>
                    </property>
                    <property>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>OnDeserializing</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;()</signature>
                        <name>OnDeserializingCallbacks</name>
                    </property>
                    <property>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>OnError</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationErrorCallback&gt;()</signature>
                        <name>OnErrorCallbacks</name>
                    </property>
                    <property>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>OnSerialized</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;()</signature>
                        <name>OnSerializedCallbacks</name>
                    </property>
                    <property>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>OnSerializing</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Serialization.SerializationCallback&gt;()</signature>
                        <name>OnSerializingCallbacks</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>UnderlyingType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonContract/&lt;&gt;c__DisplayClass1</name>
                <newname>Newtonsoft.Json.Serialization.JsonContract/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>&lt;CreateSerializationCallback&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>callbackMethodInfo</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonContract/&lt;&gt;c__DisplayClass4</name>
                <newname>Newtonsoft.Json.Serialization.JsonContract/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext)</signature>
                        <name>&lt;CreateSerializationErrorCallback&gt;b__3</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>callbackMethodInfo</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonContractType</name>
                <newname>au</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContractType</signature>
                        <name>Array</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContractType</signature>
                        <name>Dictionary</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContractType</signature>
                        <name>Dynamic</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContractType</signature>
                        <name>Linq</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContractType</signature>
                        <name>None</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContractType</signature>
                        <name>Object</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContractType</signature>
                        <name>Primitive</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContractType</signature>
                        <name>Serializable</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContractType</signature>
                        <name>String</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonDictionaryContract</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.IDictionary()</signature>
                        <name>CreateTemporaryDictionary</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.IWrappedDictionary(object)</signature>
                        <name>CreateWrapper</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;string,string&gt;()</signature>
                        <name>get_DictionaryKeyResolver</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_DictionaryKeyType</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_DictionaryValueType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasParametrizedCreator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonContract()</signature>
                        <name>get_KeyContract</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;()</signature>
                        <name>get_ParametrizedCreator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;string,string&gt;()</signature>
                        <name>get_PropertyNameResolver</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ShouldCreateWrapper</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;string,string&gt;)</signature>
                        <name>set_DictionaryKeyResolver</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_DictionaryKeyType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_DictionaryValueType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonContract)</signature>
                        <name>set_KeyContract</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;string,string&gt;)</signature>
                        <name>set_PropertyNameResolver</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ShouldCreateWrapper</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>_genericCollectionDefinitionType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`1&lt;object&gt;</signature>
                        <name>_genericTemporaryDictionaryCreator</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;</signature>
                        <name>_genericWrapperCreator</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>_genericWrapperType</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.ConstructorInfo</signature>
                        <name>_parametrizedConstructor</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;</signature>
                        <name>_parametrizedCreator</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,string&gt;</signature>
                        <name>&lt;DictionaryKeyResolver&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;DictionaryKeyType&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;DictionaryValueType&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContract</signature>
                        <name>&lt;KeyContract&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ShouldCreateWrapper&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Func`2&lt;string,string&gt;()</signature>
                        <name>DictionaryKeyResolver</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>DictionaryKeyType</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>DictionaryValueType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasParametrizedCreator</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.JsonContract()</signature>
                        <name>KeyContract</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;()</signature>
                        <name>ParametrizedCreator</name>
                    </property>
                    <property>
                        <signature>System.Func`2&lt;string,string&gt;()</signature>
                        <name>PropertyNameResolver</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ShouldCreateWrapper</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonDynamicContract</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,object&gt;&gt;(string)</signature>
                        <name>CreateCallSiteGetter</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;(string)</signature>
                        <name>CreateCallSiteSetter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonPropertyCollection()</signature>
                        <name>get_Properties</name>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;string,string&gt;()</signature>
                        <name>get_PropertyNameResolver</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonPropertyCollection)</signature>
                        <name>set_Properties</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;string,string&gt;)</signature>
                        <name>set_PropertyNameResolver</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.IDynamicMetaObjectProvider, string, object&amp;)</signature>
                        <name>TryGetMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.IDynamicMetaObjectProvider, string, object)</signature>
                        <name>TrySetMember</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ThreadSafeStore`2&lt;string,System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,object&gt;&gt;&gt;</signature>
                        <name>_callSiteGetters</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ThreadSafeStore`2&lt;string,System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;&gt;</signature>
                        <name>_callSiteSetters</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonPropertyCollection</signature>
                        <name>&lt;Properties&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,string&gt;</signature>
                        <name>&lt;PropertyNameResolver&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.JsonPropertyCollection()</signature>
                        <name>Properties</name>
                    </property>
                    <property>
                        <signature>System.Func`2&lt;string,string&gt;()</signature>
                        <name>PropertyNameResolver</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonFormatterConverter</name>
                <newname>al</newname>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonSerializerInternalReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object, System.Type)</signature>
                        <name>Convert</name>
                    </method>
                    <method>
                        <signature>object(object, System.TypeCode)</signature>
                        <name>Convert</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object)</signature>
                        <name>GetTokenValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>ToBoolean</name>
                    </method>
                    <method>
                        <signature>unsigned int8(object)</signature>
                        <name>ToByte</name>
                    </method>
                    <method>
                        <signature>char(object)</signature>
                        <name>ToChar</name>
                    </method>
                    <method>
                        <signature>System.DateTime(object)</signature>
                        <name>ToDateTime</name>
                    </method>
                    <method>
                        <signature>System.Decimal(object)</signature>
                        <name>ToDecimal</name>
                    </method>
                    <method>
                        <signature>float64(object)</signature>
                        <name>ToDouble</name>
                    </method>
                    <method>
                        <signature>int16(object)</signature>
                        <name>ToInt16</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>ToInt32</name>
                    </method>
                    <method>
                        <signature>int64(object)</signature>
                        <name>ToInt64</name>
                    </method>
                    <method>
                        <signature>int8(object)</signature>
                        <name>ToSByte</name>
                    </method>
                    <method>
                        <signature>float32(object)</signature>
                        <name>ToSingle</name>
                    </method>
                    <method>
                        <signature>string(object)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>unsigned int16(object)</signature>
                        <name>ToUInt16</name>
                    </method>
                    <method>
                        <signature>unsigned int32(object)</signature>
                        <name>ToUInt32</name>
                    </method>
                    <method>
                        <signature>unsigned int64(object)</signature>
                        <name>ToUInt64</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonISerializableContract</signature>
                        <name>_contract</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonProperty</signature>
                        <name>_member</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonSerializerInternalReader</signature>
                        <name>_reader</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonISerializableContract</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;()</signature>
                        <name>get_ISerializableCreator</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;)</signature>
                        <name>set_ISerializableCreator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;</signature>
                        <name>&lt;ISerializableCreator&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;()</signature>
                        <name>ISerializableCreator</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonLinqContract</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonObjectContract</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonPropertyCollection()</signature>
                        <name>get_ConstructorParameters</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonPropertyCollection()</signature>
                        <name>get_CreatorParameters</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ExtensionDataGetter()</signature>
                        <name>get_ExtensionDataGetter</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ExtensionDataSetter()</signature>
                        <name>get_ExtensionDataSetter</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasRequiredOrDefaultValueProperties</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Required&gt;()</signature>
                        <name>get_ItemRequired</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.MemberSerialization()</signature>
                        <name>get_MemberSerialization</name>
                    </method>
                    <method>
                        <signature>System.Reflection.ConstructorInfo()</signature>
                        <name>get_OverrideConstructor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;()</signature>
                        <name>get_OverrideCreator</name>
                    </method>
                    <method>
                        <signature>System.Reflection.ConstructorInfo()</signature>
                        <name>get_ParametrizedConstructor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;()</signature>
                        <name>get_ParametrizedCreator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonPropertyCollection()</signature>
                        <name>get_Properties</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>GetUninitializedObject</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonPropertyCollection)</signature>
                        <name>set_CreatorParameters</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.ExtensionDataGetter)</signature>
                        <name>set_ExtensionDataGetter</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.ExtensionDataSetter)</signature>
                        <name>set_ExtensionDataSetter</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;Newtonsoft.Json.Required&gt;)</signature>
                        <name>set_ItemRequired</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.MemberSerialization)</signature>
                        <name>set_MemberSerialization</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.ConstructorInfo)</signature>
                        <name>set_OverrideConstructor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;)</signature>
                        <name>set_OverrideCreator</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.ConstructorInfo)</signature>
                        <name>set_ParametrizedConstructor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonPropertyCollection)</signature>
                        <name>set_Properties</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>_hasRequiredOrDefaultValueProperties</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.ConstructorInfo</signature>
                        <name>_overrideConstructor</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;</signature>
                        <name>_overrideCreator</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.ConstructorInfo</signature>
                        <name>_parametrizedConstructor</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;</signature>
                        <name>_parametrizedCreator</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonPropertyCollection</signature>
                        <name>&lt;CreatorParameters&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ExtensionDataGetter</signature>
                        <name>&lt;ExtensionDataGetter&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ExtensionDataSetter</signature>
                        <name>&lt;ExtensionDataSetter&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Required&gt;</signature>
                        <name>&lt;ItemRequired&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.MemberSerialization</signature>
                        <name>&lt;MemberSerialization&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonPropertyCollection</signature>
                        <name>&lt;Properties&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.JsonPropertyCollection()</signature>
                        <name>ConstructorParameters</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.JsonPropertyCollection()</signature>
                        <name>CreatorParameters</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.ExtensionDataGetter()</signature>
                        <name>ExtensionDataGetter</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.ExtensionDataSetter()</signature>
                        <name>ExtensionDataSetter</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasRequiredOrDefaultValueProperties</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Required&gt;()</signature>
                        <name>ItemRequired</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.MemberSerialization()</signature>
                        <name>MemberSerialization</name>
                    </property>
                    <property>
                        <signature>System.Reflection.ConstructorInfo()</signature>
                        <name>OverrideConstructor</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;()</signature>
                        <name>OverrideCreator</name>
                    </property>
                    <property>
                        <signature>System.Reflection.ConstructorInfo()</signature>
                        <name>ParametrizedConstructor</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;()</signature>
                        <name>ParametrizedCreator</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.JsonPropertyCollection()</signature>
                        <name>Properties</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonPrimitiveContract</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode()</signature>
                        <name>get_TypeCode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Utilities.PrimitiveTypeCode)</signature>
                        <name>set_TypeCode</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>&lt;TypeCode&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode()</signature>
                        <name>TypeCode</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonProperty</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.IAttributeProvider()</signature>
                        <name>get_AttributeProvider</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverter()</signature>
                        <name>get_Converter</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_DeclaringType</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_DefaultValue</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.DefaultValueHandling&gt;()</signature>
                        <name>get_DefaultValueHandling</name>
                    </method>
                    <method>
                        <signature>System.Predicate`1&lt;object&gt;()</signature>
                        <name>get_GetIsSpecified</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasMemberAttribute</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Ignored</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>get_IsReference</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverter()</signature>
                        <name>get_ItemConverter</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>get_ItemIsReference</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;()</signature>
                        <name>get_ItemReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;()</signature>
                        <name>get_ItemTypeNameHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverter()</signature>
                        <name>get_MemberConverter</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.NullValueHandling&gt;()</signature>
                        <name>get_NullValueHandling</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ObjectCreationHandling&gt;()</signature>
                        <name>get_ObjectCreationHandling</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_Order</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonContract()</signature>
                        <name>get_PropertyContract</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PropertyName</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_PropertyType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Readable</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;()</signature>
                        <name>get_ReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Required()</signature>
                        <name>get_Required</name>
                    </method>
                    <method>
                        <signature>System.Action`2&lt;object,object&gt;()</signature>
                        <name>get_SetIsSpecified</name>
                    </method>
                    <method>
                        <signature>System.Predicate`1&lt;object&gt;()</signature>
                        <name>get_ShouldSerialize</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;()</signature>
                        <name>get_TypeNameHandling</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UnderlyingName</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.IValueProvider()</signature>
                        <name>get_ValueProvider</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Writable</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>GetResolvedDefaultValue</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.IAttributeProvider)</signature>
                        <name>set_AttributeProvider</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonConverter)</signature>
                        <name>set_Converter</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_DeclaringType</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_DefaultValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;Newtonsoft.Json.DefaultValueHandling&gt;)</signature>
                        <name>set_DefaultValueHandling</name>
                    </method>
                    <method>
                        <signature>void(System.Predicate`1&lt;object&gt;)</signature>
                        <name>set_GetIsSpecified</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_HasMemberAttribute</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Ignored</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>set_IsReference</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonConverter)</signature>
                        <name>set_ItemConverter</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>set_ItemIsReference</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;)</signature>
                        <name>set_ItemReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;)</signature>
                        <name>set_ItemTypeNameHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonConverter)</signature>
                        <name>set_MemberConverter</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;Newtonsoft.Json.NullValueHandling&gt;)</signature>
                        <name>set_NullValueHandling</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;Newtonsoft.Json.ObjectCreationHandling&gt;)</signature>
                        <name>set_ObjectCreationHandling</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_Order</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonContract)</signature>
                        <name>set_PropertyContract</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PropertyName</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_PropertyType</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Readable</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;)</signature>
                        <name>set_ReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Required)</signature>
                        <name>set_Required</name>
                    </method>
                    <method>
                        <signature>void(System.Action`2&lt;object,object&gt;)</signature>
                        <name>set_SetIsSpecified</name>
                    </method>
                    <method>
                        <signature>void(System.Predicate`1&lt;object&gt;)</signature>
                        <name>set_ShouldSerialize</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;)</signature>
                        <name>set_TypeNameHandling</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UnderlyingName</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.IValueProvider)</signature>
                        <name>set_ValueProvider</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Writable</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter)</signature>
                        <name>WritePropertyName</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>_defaultValue</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_hasExplicitDefaultValue</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_hasGeneratedDefaultValue</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_propertyName</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>_propertyType</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.Required&gt;</signature>
                        <name>_required</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_skipPropertyNameEscape</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.IAttributeProvider</signature>
                        <name>&lt;AttributeProvider&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonConverter</signature>
                        <name>&lt;Converter&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;DeclaringType&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.DefaultValueHandling&gt;</signature>
                        <name>&lt;DefaultValueHandling&gt;k__BackingField</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;object&gt;</signature>
                        <name>&lt;GetIsSpecified&gt;k__BackingField</name>
                        <newname>aa</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;HasMemberAttribute&gt;k__BackingField</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Ignored&gt;k__BackingField</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>&lt;IsReference&gt;k__BackingField</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonConverter</signature>
                        <name>&lt;ItemConverter&gt;k__BackingField</name>
                        <newname>ac</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>&lt;ItemIsReference&gt;k__BackingField</name>
                        <newname>ad</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;</signature>
                        <name>&lt;ItemReferenceLoopHandling&gt;k__BackingField</name>
                        <newname>af</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;</signature>
                        <name>&lt;ItemTypeNameHandling&gt;k__BackingField</name>
                        <newname>ae</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonConverter</signature>
                        <name>&lt;MemberConverter&gt;k__BackingField</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.NullValueHandling&gt;</signature>
                        <name>&lt;NullValueHandling&gt;k__BackingField</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ObjectCreationHandling&gt;</signature>
                        <name>&lt;ObjectCreationHandling&gt;k__BackingField</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;Order&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContract</signature>
                        <name>&lt;PropertyContract&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Readable&gt;k__BackingField</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;</signature>
                        <name>&lt;ReferenceLoopHandling&gt;k__BackingField</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>System.Action`2&lt;object,object&gt;</signature>
                        <name>&lt;SetIsSpecified&gt;k__BackingField</name>
                        <newname>ab</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;object&gt;</signature>
                        <name>&lt;ShouldSerialize&gt;k__BackingField</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;</signature>
                        <name>&lt;TypeNameHandling&gt;k__BackingField</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;UnderlyingName&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.IValueProvider</signature>
                        <name>&lt;ValueProvider&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Writable&gt;k__BackingField</name>
                        <newname>r</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.IAttributeProvider()</signature>
                        <name>AttributeProvider</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.JsonConverter()</signature>
                        <name>Converter</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>DeclaringType</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>DefaultValue</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.DefaultValueHandling&gt;()</signature>
                        <name>DefaultValueHandling</name>
                    </property>
                    <property>
                        <signature>System.Predicate`1&lt;object&gt;()</signature>
                        <name>GetIsSpecified</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasMemberAttribute</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Ignored</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>IsReference</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.JsonConverter()</signature>
                        <name>ItemConverter</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>ItemIsReference</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;()</signature>
                        <name>ItemReferenceLoopHandling</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;()</signature>
                        <name>ItemTypeNameHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.JsonConverter()</signature>
                        <name>MemberConverter</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.NullValueHandling&gt;()</signature>
                        <name>NullValueHandling</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ObjectCreationHandling&gt;()</signature>
                        <name>ObjectCreationHandling</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>Order</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.JsonContract()</signature>
                        <name>PropertyContract</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PropertyName</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>PropertyType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Readable</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.ReferenceLoopHandling&gt;()</signature>
                        <name>ReferenceLoopHandling</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Required()</signature>
                        <name>Required</name>
                    </property>
                    <property>
                        <signature>System.Action`2&lt;object,object&gt;()</signature>
                        <name>SetIsSpecified</name>
                    </property>
                    <property>
                        <signature>System.Predicate`1&lt;object&gt;()</signature>
                        <name>ShouldSerialize</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;Newtonsoft.Json.TypeNameHandling&gt;()</signature>
                        <name>TypeNameHandling</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>UnderlyingName</name>
                    </property>
                    <property>
                        <signature>Newtonsoft.Json.Serialization.IValueProvider()</signature>
                        <name>ValueProvider</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Writable</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonPropertyCollection</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>AddProperty</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonProperty(string)</signature>
                        <name>GetClosestMatchProperty</name>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>GetKeyForItem</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonProperty(string, System.StringComparison)</signature>
                        <name>GetProperty</name>
                    </method>
                    <method>
                        <signature>bool(string, Newtonsoft.Json.Serialization.JsonProperty&amp;)</signature>
                        <name>TryGetValue</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>_type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonSerializerInternalBase</name>
                <newname>at</newname>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonSerializer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearErrorContext</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.BidirectionalDictionary`2&lt;string,object&gt;()</signature>
                        <name>get_DefaultReferenceMappings</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ErrorContext(object, object, string, System.Exception)</signature>
                        <name>GetErrorContext</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)</signature>
                        <name>IsErrorHandled</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ErrorContext</signature>
                        <name>_currentErrorContext</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.BidirectionalDictionary`2&lt;string,object&gt;</signature>
                        <name>_mappings</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonSerializerProxy</signature>
                        <name>InternalSerializer</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonSerializer</signature>
                        <name>Serializer</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ITraceWriter</signature>
                        <name>TraceWriter</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonSerializerInternalBase/ReferenceEqualsEqualityComparer</name>
                <newname>at/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object, object)</signature>
                        <name>System.Collections.Generic.IEqualityComparer&lt;System.Object&gt;.Equals</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.Collections.Generic.IEqualityComparer&lt;System.Object&gt;.GetHashCode</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonSerializerInternalReader</name>
                <newname>ai</newname>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonSerializer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonProperty(Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>&lt;CreateObjectUsingCreatorWithParameters&gt;b__0</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonSerializerInternalReader/PropertyPresence(Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>&lt;CreateObjectUsingCreatorWithParameters&gt;b__1</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>&lt;CreateObjectUsingCreatorWithParameters&gt;b__2</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>&lt;CreateObjectUsingCreatorWithParameters&gt;b__3</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>&lt;CreateObjectUsingCreatorWithParameters&gt;b__4</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonProperty(Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>&lt;PopulateObject&gt;b__e</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonSerializerInternalReader/PropertyPresence(Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>&lt;PopulateObject&gt;b__f</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, string, object)</signature>
                        <name>AddReference</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonConverter&amp;, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonReader, object, bool&amp;, object&amp;, Newtonsoft.Json.Serialization.JsonContract&amp;, bool&amp;)</signature>
                        <name>CalculatePropertyDetails</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader)</signature>
                        <name>CheckedRead</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.JsonReader, string)</signature>
                        <name>CheckPropertyName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, Newtonsoft.Json.Serialization.JsonContract, string)</signature>
                        <name>CoerceEmptyStringToNull</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDynamicContract, Newtonsoft.Json.Serialization.JsonProperty, string)</signature>
                        <name>CreateDynamic</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)</signature>
                        <name>CreateISerializable</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.Linq.JToken, System.Type, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>CreateISerializableItem</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(Newtonsoft.Json.JsonReader)</signature>
                        <name>CreateJObject</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Linq.JToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)</signature>
                        <name>CreateJToken</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.Serialization.JsonProperty, object, string)</signature>
                        <name>CreateList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, bool&amp;)</signature>
                        <name>CreateNewDictionary</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IList(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonArrayContract, bool&amp;)</signature>
                        <name>CreateNewList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, bool&amp;)</signature>
                        <name>CreateNewObject</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty, object)</signature>
                        <name>CreateObject</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;, string)</signature>
                        <name>CreateObjectUsingCreatorWithParameters</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty, object)</signature>
                        <name>CreateValueInternal</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type, bool)</signature>
                        <name>Deserialize</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonConverter, Newtonsoft.Json.JsonReader, System.Type, object)</signature>
                        <name>DeserializeConvertable</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, int32, System.Collections.Generic.Dictionary`2&lt;Newtonsoft.Json.Serialization.JsonProperty,Newtonsoft.Json.Serialization.JsonSerializerInternalReader/PropertyPresence&gt;)</signature>
                        <name>EndObject</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonArrayContract(Newtonsoft.Json.JsonReader, System.Type, Newtonsoft.Json.Serialization.JsonContract)</signature>
                        <name>EnsureArrayContract</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)</signature>
                        <name>EnsureType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonContract(System.Type)</signature>
                        <name>GetContractSafe</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>GetConverter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Serialization.JsonContract)</signature>
                        <name>GetExpectedDescription</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonSerializerProxy()</signature>
                        <name>GetInternalSerializer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, bool, int32)</signature>
                        <name>HandleError</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.DefaultValueHandling, Newtonsoft.Json.DefaultValueHandling)</signature>
                        <name>HasFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Serialization.JsonContract)</signature>
                        <name>HasNoDefinedType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)</signature>
                        <name>OnDeserialized</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)</signature>
                        <name>OnDeserializing</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, object)</signature>
                        <name>Populate</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)</signature>
                        <name>PopulateDictionary</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(System.Collections.IList, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonArrayContract, Newtonsoft.Json.Serialization.JsonProperty, string)</signature>
                        <name>PopulateList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(System.Collections.IList, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonArrayContract, Newtonsoft.Json.Serialization.JsonProperty, string)</signature>
                        <name>PopulateMultidimensionalArray</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object(object, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, string)</signature>
                        <name>PopulateObject</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)</signature>
                        <name>ReadForType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.JsonReader, System.Type&amp;, Newtonsoft.Json.Serialization.JsonContract&amp;, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty, object, object&amp;, string&amp;)</signature>
                        <name>ReadMetadataProperties</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Linq.JTokenReader, System.Type&amp;, Newtonsoft.Json.Serialization.JsonContract&amp;, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty, object, object&amp;, string&amp;)</signature>
                        <name>ReadMetadataPropertiesToken</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;Newtonsoft.Json.Serialization.JsonProperty,object&gt;(Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonReader, System.Type, System.Collections.Generic.IDictionary`2&lt;string,object&gt;&amp;)</signature>
                        <name>ResolvePropertyAndCreatorValues</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, System.Type&amp;, Newtonsoft.Json.Serialization.JsonContract&amp;, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty, string)</signature>
                        <name>ResolveTypeName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonReader, string, object)</signature>
                        <name>SetExtensionData</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonProperty, System.Collections.Generic.Dictionary`2&lt;Newtonsoft.Json.Serialization.JsonProperty,Newtonsoft.Json.Serialization.JsonSerializerInternalReader/PropertyPresence&gt;)</signature>
                        <name>SetPropertyPresence</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonReader, object)</signature>
                        <name>SetPropertyValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Serialization.JsonProperty, object)</signature>
                        <name>ShouldSetPropertyValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object, string)</signature>
                        <name>ThrowUnexpectedEndException</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Serialization.JsonProperty,Newtonsoft.Json.Serialization.JsonProperty&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate10</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Serialization.JsonProperty,Newtonsoft.Json.Serialization.JsonSerializerInternalReader/PropertyPresence&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate11</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Serialization.JsonProperty,Newtonsoft.Json.Serialization.JsonProperty&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate6</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Serialization.JsonProperty,Newtonsoft.Json.Serialization.JsonSerializerInternalReader/PropertyPresence&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate7</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Serialization.JsonProperty,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate8</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Serialization.JsonProperty,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate9</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Newtonsoft.Json.Serialization.JsonProperty,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatea</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonSerializerInternalReader/&lt;&gt;c__DisplayClassc</name>
                <newname>ai/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>&lt;CreateObjectUsingCreatorWithParameters&gt;b__5</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonProperty</signature>
                        <name>property</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonSerializerInternalReader/PropertyPresence</name>
                <newname>ai/a</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonSerializerInternalReader/PropertyPresence</signature>
                        <name>None</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonSerializerInternalReader/PropertyPresence</signature>
                        <name>Null</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonSerializerInternalReader/PropertyPresence</signature>
                        <name>Value</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonSerializerInternalWriter</name>
                <newname>ap</newname>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonSerializer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract&amp;, object&amp;)</signature>
                        <name>CalculatePropertyValues</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>CheckForCircularReference</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonContract(object)</signature>
                        <name>GetContractSafe</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonSerializerProxy()</signature>
                        <name>GetInternalSerializer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonContract, bool&amp;)</signature>
                        <name>GetPropertyName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.JsonWriter, object)</signature>
                        <name>GetReference</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, int32)</signature>
                        <name>HandleError</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.DefaultValueHandling, Newtonsoft.Json.DefaultValueHandling)</signature>
                        <name>HasFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.PreserveReferencesHandling, Newtonsoft.Json.PreserveReferencesHandling)</signature>
                        <name>HasFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.TypeNameHandling, Newtonsoft.Json.TypeNameHandling)</signature>
                        <name>HasFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Serialization.JsonProperty, object)</signature>
                        <name>IsSpecified</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Serialization.JsonContract, object)</signature>
                        <name>OnSerialized</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Serialization.JsonContract, object)</signature>
                        <name>OnSerializing</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>ResolveIsReference</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, System.Type)</signature>
                        <name>Serialize</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.JsonConverter, object, Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>SerializeConvertable</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, System.Collections.IDictionary, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>SerializeDictionary</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, System.Dynamic.IDynamicMetaObjectProvider, Newtonsoft.Json.Serialization.JsonDynamicContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>SerializeDynamic</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, System.Runtime.Serialization.ISerializable, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>SerializeISerializable</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, System.Collections.IEnumerable, Newtonsoft.Json.Serialization.JsonArrayContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>SerializeList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, System.Array, Newtonsoft.Json.Serialization.JsonArrayContract, Newtonsoft.Json.Serialization.JsonProperty, int32, int32[])</signature>
                        <name>SerializeMultidimensionalArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, System.Array, Newtonsoft.Json.Serialization.JsonArrayContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>SerializeMultidimensionalArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>SerializeObject</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonPrimitiveContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>SerializePrimitive</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonStringContract)</signature>
                        <name>SerializeString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>SerializeValue</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Serialization.JsonProperty, object)</signature>
                        <name>ShouldSerialize</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>ShouldWriteDynamicProperty</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(object, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>ShouldWriteProperty</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(object, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>ShouldWriteReference</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.TypeNameHandling, Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>ShouldWriteType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(object, System.Type, string&amp;)</signature>
                        <name>TryConvertToString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>WriteObjectStart</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object)</signature>
                        <name>WriteReference</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, System.Type, object)</signature>
                        <name>WriteReferenceIdProperty</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.Serialization.JsonArrayContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)</signature>
                        <name>WriteStartArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, System.Type)</signature>
                        <name>WriteTypeProperty</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonContract</signature>
                        <name>_rootContract</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_rootLevel</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;object&gt;</signature>
                        <name>_serializeStack</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonSerializerProxy</name>
                <newname>cl</newname>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonSerializerInternalReader)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.JsonSerializerInternalWriter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Newtonsoft.Json.Serialization.ErrorEventArgs&gt;)</signature>
                        <name>add_Error</name>
                    </method>
                    <method>
                        <signature>object(Newtonsoft.Json.JsonReader, System.Type)</signature>
                        <name>DeserializeInternal</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.SerializationBinder()</signature>
                        <name>get_Binder</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CheckAdditionalContent</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.ConstructorHandling()</signature>
                        <name>get_ConstructorHandling</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.StreamingContext()</signature>
                        <name>get_Context</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.IContractResolver()</signature>
                        <name>get_ContractResolver</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverterCollection()</signature>
                        <name>get_Converters</name>
                    </method>
                    <method>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>get_Culture</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DateFormatHandling()</signature>
                        <name>get_DateFormatHandling</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DateFormatString</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DateParseHandling()</signature>
                        <name>get_DateParseHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DateTimeZoneHandling()</signature>
                        <name>get_DateTimeZoneHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.DefaultValueHandling()</signature>
                        <name>get_DefaultValueHandling</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEqualityComparer()</signature>
                        <name>get_EqualityComparer</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.FloatFormatHandling()</signature>
                        <name>get_FloatFormatHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.FloatParseHandling()</signature>
                        <name>get_FloatParseHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Formatting()</signature>
                        <name>get_Formatting</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_MaxDepth</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.MetadataPropertyHandling()</signature>
                        <name>get_MetadataPropertyHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.MissingMemberHandling()</signature>
                        <name>get_MissingMemberHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.NullValueHandling()</signature>
                        <name>get_NullValueHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.ObjectCreationHandling()</signature>
                        <name>get_ObjectCreationHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.PreserveReferencesHandling()</signature>
                        <name>get_PreserveReferencesHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.ReferenceLoopHandling()</signature>
                        <name>get_ReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.IReferenceResolver()</signature>
                        <name>get_ReferenceResolver</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.StringEscapeHandling()</signature>
                        <name>get_StringEscapeHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ITraceWriter()</signature>
                        <name>get_TraceWriter</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.Formatters.FormatterAssemblyStyle()</signature>
                        <name>get_TypeNameAssemblyFormat</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.TypeNameHandling()</signature>
                        <name>get_TypeNameHandling</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.JsonSerializerInternalBase()</signature>
                        <name>GetInternalSerializer</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader, object)</signature>
                        <name>PopulateInternal</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Newtonsoft.Json.Serialization.ErrorEventArgs&gt;)</signature>
                        <name>remove_Error</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter, object, System.Type)</signature>
                        <name>SerializeInternal</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationBinder)</signature>
                        <name>set_Binder</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CheckAdditionalContent</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.ConstructorHandling)</signature>
                        <name>set_ConstructorHandling</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.StreamingContext)</signature>
                        <name>set_Context</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.IContractResolver)</signature>
                        <name>set_ContractResolver</name>
                    </method>
                    <method>
                        <signature>void(System.Globalization.CultureInfo)</signature>
                        <name>set_Culture</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DateFormatHandling)</signature>
                        <name>set_DateFormatHandling</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DateFormatString</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DateParseHandling)</signature>
                        <name>set_DateParseHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DateTimeZoneHandling)</signature>
                        <name>set_DateTimeZoneHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.DefaultValueHandling)</signature>
                        <name>set_DefaultValueHandling</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.IEqualityComparer)</signature>
                        <name>set_EqualityComparer</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.FloatFormatHandling)</signature>
                        <name>set_FloatFormatHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.FloatParseHandling)</signature>
                        <name>set_FloatParseHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Formatting)</signature>
                        <name>set_Formatting</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_MaxDepth</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.MetadataPropertyHandling)</signature>
                        <name>set_MetadataPropertyHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.MissingMemberHandling)</signature>
                        <name>set_MissingMemberHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.NullValueHandling)</signature>
                        <name>set_NullValueHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.ObjectCreationHandling)</signature>
                        <name>set_ObjectCreationHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.PreserveReferencesHandling)</signature>
                        <name>set_PreserveReferencesHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.ReferenceLoopHandling)</signature>
                        <name>set_ReferenceLoopHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.IReferenceResolver)</signature>
                        <name>set_ReferenceResolver</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.StringEscapeHandling)</signature>
                        <name>set_StringEscapeHandling</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.ITraceWriter)</signature>
                        <name>set_TraceWriter</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle)</signature>
                        <name>set_TypeNameAssemblyFormat</name>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.TypeNameHandling)</signature>
                        <name>set_TypeNameHandling</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.JsonSerializer</signature>
                        <name>_serializer</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonSerializerInternalReader</signature>
                        <name>_serializerReader</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.JsonSerializerInternalWriter</signature>
                        <name>_serializerWriter</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonStringContract</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonTypeReflector</name>
                <newname>ae</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverter(System.Type, object[])</signature>
                        <name>CreateJsonConverterInstance</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_DynamicCodeGeneration</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_FullyTrusted</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.ReflectionDelegateFactory()</signature>
                        <name>get_ReflectionDelegateFactory</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>GetAssociatedMetadataType</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>GetAssociateMetadataTypeFromAttribute</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object)</signature>
                        <name>GetAttribute</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.Reflection.MemberInfo)</signature>
                        <name>GetAttribute</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.Type)</signature>
                        <name>GetAttribute</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object)</signature>
                        <name>GetCachedAttribute</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.DataContractAttribute(System.Type)</signature>
                        <name>GetDataContractAttribute</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.DataMemberAttribute(System.Reflection.MemberInfo)</signature>
                        <name>GetDataMemberAttribute</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverter(object)</signature>
                        <name>GetJsonConverter</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;object[],Newtonsoft.Json.JsonConverter&gt;(System.Type)</signature>
                        <name>GetJsonConverterCreator</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.MemberSerialization(System.Type, bool)</signature>
                        <name>GetObjectMemberSerialization</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.ComponentModel.TypeConverter(System.Type)</signature>
                        <name>GetTypeConverter</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>_dynamicCodeGeneration</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>_fullyTrusted</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ReflectionObject</signature>
                        <name>_metadataTypeAttributeReflectionObject</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ArrayValuesPropertyName</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ThreadSafeStore`2&lt;System.Type,System.Type&gt;</signature>
                        <name>AssociatedMetadataTypesCache</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>IdPropertyName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ThreadSafeStore`2&lt;System.Type,System.Func`2&lt;object[],Newtonsoft.Json.JsonConverter&gt;&gt;</signature>
                        <name>JsonConverterCreatorCache</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RefPropertyName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ShouldSerializePrefix</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SpecifiedPostfix</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TypePropertyName</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ValuePropertyName</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.JsonTypeReflector/&lt;&gt;c__DisplayClass2</name>
                <newname>ae/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonConverter(object[])</signature>
                        <name>&lt;GetJsonConverterCreator&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Type(object)</signature>
                        <name>&lt;GetJsonConverterCreator&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>converterType</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;object,System.Type&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate4</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`1&lt;object&gt;</signature>
                        <name>defaultConstructor</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.MemoryTraceWriter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Diagnostics.TraceLevel()</signature>
                        <name>get_LevelFilter</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>GetTraceMessages</name>
                    </method>
                    <method>
                        <signature>void(System.Diagnostics.TraceLevel)</signature>
                        <name>set_LevelFilter</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>void(System.Diagnostics.TraceLevel, string, System.Exception)</signature>
                        <name>Trace</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Queue`1&lt;string&gt;</signature>
                        <name>_traceMessages</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Diagnostics.TraceLevel</signature>
                        <name>&lt;LevelFilter&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Diagnostics.TraceLevel()</signature>
                        <name>LevelFilter</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>Newtonsoft.Json.Serialization.ObjectConstructor`1</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object[], System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>object(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>object(object[])</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.OnErrorAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.ReflectionAttributeProvider</name>
                <methodlist>
                    <method>
                        <signature>void(object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;System.Attribute&gt;(bool)</signature>
                        <name>GetAttributes</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;System.Attribute&gt;(System.Type, bool)</signature>
                        <name>GetAttributes</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>_attributeProvider</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.ReflectionValueProvider</name>
                <methodlist>
                    <method>
                        <signature>void(System.Reflection.MemberInfo)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>SetValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.MemberInfo</signature>
                        <name>_memberInfo</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.ResolverContractKey</name>
                <newname>ah</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Type, System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Serialization.ResolverContractKey)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>_contractType</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>_resolverType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.SerializationCallback</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, System.Runtime.Serialization.StreamingContext, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.SerializationErrorCallback</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.TraceJsonReader</name>
                <newname>cj</newname>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonReader)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Depth</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_QuoteChar</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.JsonToken()</signature>
                        <name>get_TokenType</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ValueType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetDeserializedJsonMessage</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.get_LineNumber</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.get_LinePosition</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Newtonsoft.Json.IJsonLineInfo.HasLineInfo</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>ReadAsBytes</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>ReadAsDateTime</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTimeOffset&gt;()</signature>
                        <name>ReadAsDateTimeOffset</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.Decimal&gt;()</signature>
                        <name>ReadAsDecimal</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>ReadAsInt32</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadAsString</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>set_QuoteChar</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.JsonReader</signature>
                        <name>_innerReader</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.IO.StringWriter</signature>
                        <name>_sw</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonTextWriter</signature>
                        <name>_textWriter</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Serialization.TraceJsonWriter</name>
                <newname>a5</newname>
                <methodlist>
                    <method>
                        <signature>void(Newtonsoft.Json.JsonWriter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetSerializedJsonMessage</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteComment</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteEndArray</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteEndConstructor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteEndObject</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteNull</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WritePropertyName</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>WritePropertyName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteRaw</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteRawValue</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteStartArray</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteStartConstructor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteStartObject</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteUndefined</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(float32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int16)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(int8)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.DateTimeOffset)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Decimal)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Guid)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;unsigned int8&gt;)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(System.Uri)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int64)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8)</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>WriteValue</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>WriteWhitespace</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.JsonWriter</signature>
                        <name>_innerWriter</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.IO.StringWriter</signature>
                        <name>_sw</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.JsonTextWriter</signature>
                        <name>_textWriter</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.StringEscapeHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.StringEscapeHandling</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.StringEscapeHandling</signature>
                        <name>EscapeHtml</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.StringEscapeHandling</signature>
                        <name>EscapeNonAscii</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.TypeNameHandling</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.TypeNameHandling</signature>
                        <name>All</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.TypeNameHandling</signature>
                        <name>Arrays</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.TypeNameHandling</signature>
                        <name>Auto</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.TypeNameHandling</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.TypeNameHandling</signature>
                        <name>Objects</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.Base64Encoder</name>
                <newname>ba</newname>
                <methodlist>
                    <method>
                        <signature>void(System.IO.TextWriter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>Encode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(char[], int32, int32)</signature>
                        <name>WriteChars</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>char[]</signature>
                        <name>_charsLine</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_leftOverBytes</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_leftOverBytesCount</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.IO.TextWriter</signature>
                        <name>_writer</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Base64LineSize</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LineSizeInBytes</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TFirst</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TSecond</name>
                    <newname>b</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.BidirectionalDictionary`2</name>
                <newname>cb</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEqualityComparer`1&lt;!0&gt;, System.Collections.Generic.IEqualityComparer`1&lt;!1&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEqualityComparer`1&lt;!0&gt;, System.Collections.Generic.IEqualityComparer`1&lt;!1&gt;, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>Set</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!0, !1&amp;)</signature>
                        <name>TryGetByFirst</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!1, !0&amp;)</signature>
                        <name>TryGetBySecond</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_duplicateFirstErrorMessage</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_duplicateSecondErrorMessage</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;!0,!1&gt;</signature>
                        <name>_firstToSecond</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;!1,!0&gt;</signature>
                        <name>_secondToFirst</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.CollectionUtils</name>
                <newname>bf</newname>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Collections.Generic.IList`1&lt;!!0&gt;, !!0)</signature>
                        <name>AddDistinct</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Collections.Generic.IList`1&lt;!!0&gt;, !!0, System.Collections.Generic.IEqualityComparer`1&lt;!!0&gt;)</signature>
                        <name>AddDistinct</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Collections.Generic.IList`1&lt;!!0&gt;, System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>AddRange</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Collections.Generic.IList`1&lt;!!0&gt;, System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Collections.Generic.IEqualityComparer`1&lt;!!0&gt;)</signature>
                        <name>AddRangeDistinct</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Collections.IEnumerable, object, System.Collections.IEqualityComparer)</signature>
                        <name>Contains</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, !!0, System.Collections.Generic.IEqualityComparer`1&lt;!!0&gt;)</signature>
                        <name>ContainsValue</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.IList, System.Array, int32[])</signature>
                        <name>CopyFromJaggedToMultidimensionalArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;int32&gt;(System.Collections.IList, int32)</signature>
                        <name>GetDimensions</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>int32(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, !!0, System.Collections.Generic.IEqualityComparer`1&lt;!!0&gt;)</signature>
                        <name>IndexOf</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>int32(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,bool&gt;)</signature>
                        <name>IndexOf</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsDictionaryType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Collections.Generic.ICollection`1&lt;!!0&gt;)</signature>
                        <name>IsNullOrEmpty</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(System.Collections.IList, int32[])</signature>
                        <name>JaggedArrayGetValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.ConstructorInfo(System.Type, System.Type)</signature>
                        <name>ResolveEnumerableCollectionConstructor</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Array(System.Collections.IList, System.Type, int32)</signature>
                        <name>ToMultidimensionalArray</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.CollectionWrapper`1</name>
                <newname>be</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.ICollection`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.IList)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(!0[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_UnderlyingCollection</name>
                        <newname>ah</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>IsCompatibleObject</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>System.Collections.ICollection.CopyTo</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.ICollection.get_IsSynchronized</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.ICollection.get_SyncRoot</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.Collections.IList.Add</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>System.Collections.IList.Contains</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.IList.get_IsFixedSize</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>System.Collections.IList.get_Item</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.Collections.IList.IndexOf</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Collections.IList.Insert</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>System.Collections.IList.Remove</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>System.Collections.IList.RemoveAt</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Collections.IList.set_Item</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>VerifyValueType</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.ICollection`1&lt;!0&gt;</signature>
                        <name>_genericCollection</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.IList</signature>
                        <name>_list</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_syncRoot</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ConvertUtils</name>
                <newname>bd</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>object(object, System.Globalization.CultureInfo, System.Type)</signature>
                        <name>Convert</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object(object, System.Globalization.CultureInfo, System.Type)</signature>
                        <name>ConvertOrCast</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;object,object&gt;(Newtonsoft.Json.Utilities.ConvertUtils/TypeConvertKey)</signature>
                        <name>CreateCastConverter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(object, System.Type, System.Type)</signature>
                        <name>EnsureTypeAssignable</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(System.Numerics.BigInteger, System.Type)</signature>
                        <name>FromBigInteger</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.ComponentModel.TypeConverter(System.Type)</signature>
                        <name>GetConverter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode(System.Type)</signature>
                        <name>GetTypeCode</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode(System.Type, bool&amp;)</signature>
                        <name>GetTypeCode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.TypeInformation(System.IConvertible)</signature>
                        <name>GetTypeInformation</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.ParseResult(char[], int32, int32, int32&amp;)</signature>
                        <name>Int32TryParse</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.ParseResult(char[], int32, int32, int64&amp;)</signature>
                        <name>Int64TryParse</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsConvertible</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>IsInteger</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.TimeSpan(string)</signature>
                        <name>ParseTimeSpan</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Numerics.BigInteger(object)</signature>
                        <name>ToBigInteger</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object(System.Data.SqlTypes.INullable)</signature>
                        <name>ToValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(object, System.Globalization.CultureInfo, System.Type, object&amp;)</signature>
                        <name>TryConvert</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(string, System.Guid&amp;)</signature>
                        <name>TryConvertGuid</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.ConvertUtils/ConvertResult(object, System.Globalization.CultureInfo, System.Type, object&amp;)</signature>
                        <name>TryConvertInternal</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ThreadSafeStore`2&lt;Newtonsoft.Json.Utilities.ConvertUtils/TypeConvertKey,System.Func`2&lt;object,object&gt;&gt;</signature>
                        <name>CastConverters</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.TypeInformation[]</signature>
                        <name>PrimitiveTypeCodes</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Type,Newtonsoft.Json.Utilities.PrimitiveTypeCode&gt;</signature>
                        <name>TypeCodeMap</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ConvertUtils/&lt;&gt;c__DisplayClass1</name>
                <newname>bd/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>&lt;CreateCastConverter&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>call</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ConvertUtils/ConvertResult</name>
                <newname>bd/b</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ConvertUtils/ConvertResult</signature>
                        <name>CannotConvertNull</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ConvertUtils/ConvertResult</signature>
                        <name>NotInstantiableType</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ConvertUtils/ConvertResult</signature>
                        <name>NoValidConversion</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ConvertUtils/ConvertResult</signature>
                        <name>Success</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ConvertUtils/TypeConvertKey</name>
                <newname>bd/a</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Type, System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.Utilities.ConvertUtils/TypeConvertKey)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_InitialType</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_TargetType</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>_initialType</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>_targetType</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.Creator`1</name>
                <newname>j</newname>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>!0(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.DateTimeParser</name>
                <newname>d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Parse</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32&amp;)</signature>
                        <name>Parse2Digit</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32&amp;)</signature>
                        <name>Parse4Digit</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>bool(int32, char)</signature>
                        <name>ParseChar</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>ParseDate</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>bool(int32&amp;)</signature>
                        <name>ParseTime</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>ParseTimeAndZoneAndWhitespace</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>ParseZone</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>_length</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_text</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Day</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Fraction</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Hour</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Lz_</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Lz_zz</name>
                        <newname>aa</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LzHH</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LzHH_</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LzHH_mm</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LzHH_mm_</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LzHH_mm_ss</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Lzyyyy</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Lzyyyy_</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Lzyyyy_MM</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Lzyyyy_MM_</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Lzyyyy_MM_dd</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Lzyyyy_MM_ddT</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>int16</signature>
                        <name>MaxFractionDigits</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Minute</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Month</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32[]</signature>
                        <name>Power10</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Second</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Year</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ParserTimeZone</signature>
                        <name>Zone</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ZoneHour</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ZoneMinute</name>
                        <newname>j</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.DateTimeUtils</name>
                <newname>r</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>int64(System.DateTime)</signature>
                        <name>ConvertDateTimeToJavaScriptTicks</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int64(System.DateTime, bool)</signature>
                        <name>ConvertDateTimeToJavaScriptTicks</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int64(System.DateTime, System.TimeSpan)</signature>
                        <name>ConvertDateTimeToJavaScriptTicks</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.DateTime(int64)</signature>
                        <name>ConvertJavaScriptTicksToDateTime</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(char[], int32, int32, int32)</signature>
                        <name>CopyIntToCharArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.DateTime(System.DateTime, Newtonsoft.Json.DateTimeZoneHandling)</signature>
                        <name>EnsureDateTime</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTime, int32&amp;, int32&amp;, int32&amp;)</signature>
                        <name>GetDateValues</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.TimeSpan(System.DateTime)</signature>
                        <name>GetUtcOffset</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>System.TimeSpan(string)</signature>
                        <name>ReadOffset</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.DateTime(System.DateTime)</signature>
                        <name>SwitchToLocalTime</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.DateTime(System.DateTime)</signature>
                        <name>SwitchToUtcTime</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Xml.XmlDateTimeSerializationMode(System.DateTimeKind)</signature>
                        <name>ToSerializationMode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int64(System.DateTime)</signature>
                        <name>ToUniversalTicks</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int64(System.DateTime, System.TimeSpan)</signature>
                        <name>ToUniversalTicks</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(string, Newtonsoft.Json.DateParseHandling, Newtonsoft.Json.DateTimeZoneHandling, string, System.Globalization.CultureInfo, object&amp;)</signature>
                        <name>TryParseDateExact</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string, Newtonsoft.Json.DateParseHandling, Newtonsoft.Json.DateTimeZoneHandling, object&amp;)</signature>
                        <name>TryParseDateIso</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(string, Newtonsoft.Json.DateParseHandling, Newtonsoft.Json.DateTimeZoneHandling, object&amp;)</signature>
                        <name>TryParseDateMicrosoft</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string, Newtonsoft.Json.DateParseHandling, Newtonsoft.Json.DateTimeZoneHandling, string, System.Globalization.CultureInfo, object&amp;)</signature>
                        <name>TryParseDateTime</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int64(int64)</signature>
                        <name>UniversialTicksToJavaScriptTicks</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(char[], int32, System.TimeSpan, Newtonsoft.Json.DateFormatHandling)</signature>
                        <name>WriteDateTimeOffset</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, System.DateTimeOffset, Newtonsoft.Json.DateFormatHandling, string, System.Globalization.CultureInfo)</signature>
                        <name>WriteDateTimeOffsetString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(char[], int32, System.DateTime, System.Nullable`1&lt;System.TimeSpan&gt;, System.DateTimeKind, Newtonsoft.Json.DateFormatHandling)</signature>
                        <name>WriteDateTimeString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, System.DateTime, Newtonsoft.Json.DateFormatHandling, string, System.Globalization.CultureInfo)</signature>
                        <name>WriteDateTimeString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(char[], int32, System.DateTime)</signature>
                        <name>WriteDefaultIsoDate</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>DaysPer100Years</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DaysPer400Years</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DaysPer4Years</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DaysPerYear</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32[]</signature>
                        <name>DaysToMonth365</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32[]</signature>
                        <name>DaysToMonth366</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>InitialJavaScriptDateTicks</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>TicksPerDay</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TKey</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TValue</name>
                    <newname>b</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DictionaryWrapper`2</name>
                <newname>bb</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;!0,!1&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.IDictionary)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;(System.Collections.DictionaryEntry)</signature>
                        <name>&lt;GetEnumerator&gt;b__0</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>ContainsKey</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.ICollection`1&lt;!0&gt;()</signature>
                        <name>get_Keys</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_UnderlyingDictionary</name>
                        <newname>ag</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.ICollection`1&lt;!1&gt;()</signature>
                        <name>get_Values</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>System.Collections.ICollection.CopyTo</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.ICollection.get_IsSynchronized</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.ICollection.get_SyncRoot</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>System.Collections.IDictionary.Add</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>System.Collections.IDictionary.Contains</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.IDictionary.get_IsFixedSize</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>System.Collections.IDictionary.get_Item</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>System.Collections.IDictionary.get_Keys</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>System.Collections.IDictionary.get_Values</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IDictionaryEnumerator()</signature>
                        <name>System.Collections.IDictionary.GetEnumerator</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>System.Collections.IDictionary.set_Item</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(!0, !1&amp;)</signature>
                        <name>TryGetValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.IDictionary</signature>
                        <name>_dictionary</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;!0,!1&gt;</signature>
                        <name>_genericDictionary</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_syncRoot</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.DictionaryEntry,System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>!1(!0)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <arity>4</arity>
                <genericparameter sequence="0">
                    <name>TKey</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TValue</name>
                    <newname>b</newname>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TEnumeratorKey</name>
                    <newname>c</newname>
                </genericparameter>
                <genericparameter sequence="3">
                    <name>TEnumeratorValue</name>
                    <newname>d</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DictionaryWrapper`2/DictionaryEnumerator`2</name>
                <newname>bb/a</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.KeyValuePair`2&lt;!2,!3&gt;&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>System.Collections.DictionaryEntry()</signature>
                        <name>get_Entry</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.KeyValuePair`2&lt;!2,!3&gt;&gt;</signature>
                        <name>_e</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxy`1</name>
                <newname>b4</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;(!0)</signature>
                        <name>GetDynamicMemberNames</name>
                        <newname>az</newname>
                    </method>
                    <method>
                        <signature>bool(!0, System.Dynamic.BinaryOperationBinder, object, object&amp;)</signature>
                        <name>TryBinaryOperation</name>
                        <newname>aj</newname>
                    </method>
                    <method>
                        <signature>bool(!0, System.Dynamic.ConvertBinder, object&amp;)</signature>
                        <name>TryConvert</name>
                        <newname>ai</newname>
                    </method>
                    <method>
                        <signature>bool(!0, System.Dynamic.CreateInstanceBinder, object[], object&amp;)</signature>
                        <name>TryCreateInstance</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!0, System.Dynamic.DeleteIndexBinder, object[])</signature>
                        <name>TryDeleteIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!0, System.Dynamic.DeleteMemberBinder)</signature>
                        <name>TryDeleteMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!0, System.Dynamic.GetIndexBinder, object[], object&amp;)</signature>
                        <name>TryGetIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!0, System.Dynamic.GetMemberBinder, object&amp;)</signature>
                        <name>TryGetMember</name>
                        <newname>ax</newname>
                    </method>
                    <method>
                        <signature>bool(!0, System.Dynamic.InvokeBinder, object[], object&amp;)</signature>
                        <name>TryInvoke</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!0, System.Dynamic.InvokeMemberBinder, object[], object&amp;)</signature>
                        <name>TryInvokeMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!0, System.Dynamic.SetIndexBinder, object[], object)</signature>
                        <name>TrySetIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!0, System.Dynamic.SetMemberBinder, object)</signature>
                        <name>TrySetMember</name>
                        <newname>ay</newname>
                    </method>
                    <method>
                        <signature>bool(!0, System.Dynamic.UnaryOperationBinder, object&amp;)</signature>
                        <name>TryUnaryOperation</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1</name>
                <newname>b6</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(System.Linq.Expressions.Expression, !0, Newtonsoft.Json.Utilities.DynamicProxy`1&lt;!0&gt;, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.UnaryExpression(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;GetArgs&gt;b__25</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.BinaryOperationBinder, System.Dynamic.DynamicMetaObject)</signature>
                        <name>BindBinaryOperation</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.ConvertBinder)</signature>
                        <name>BindConvert</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.CreateInstanceBinder, System.Dynamic.DynamicMetaObject[])</signature>
                        <name>BindCreateInstance</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DeleteIndexBinder, System.Dynamic.DynamicMetaObject[])</signature>
                        <name>BindDeleteIndex</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DeleteMemberBinder)</signature>
                        <name>BindDeleteMember</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.GetIndexBinder, System.Dynamic.DynamicMetaObject[])</signature>
                        <name>BindGetIndex</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.GetMemberBinder)</signature>
                        <name>BindGetMember</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.InvokeBinder, System.Dynamic.DynamicMetaObject[])</signature>
                        <name>BindInvoke</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.InvokeMemberBinder, System.Dynamic.DynamicMetaObject[])</signature>
                        <name>BindInvokeMember</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.SetIndexBinder, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)</signature>
                        <name>BindSetIndex</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.SetMemberBinder, System.Dynamic.DynamicMetaObject)</signature>
                        <name>BindSetMember</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.UnaryOperationBinder)</signature>
                        <name>BindUnaryOperation</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(string, System.Dynamic.DynamicMetaObjectBinder, System.Linq.Expressions.Expression[], System.Dynamic.DynamicMetaObject, Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/Fallback&lt;!0&gt;)</signature>
                        <name>BuildCallMethodWithResult</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(string, System.Dynamic.DynamicMetaObjectBinder, System.Linq.Expressions.Expression[], Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/Fallback&lt;!0&gt;)</signature>
                        <name>CallMethodNoResult</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(string, System.Dynamic.DynamicMetaObjectBinder, System.Linq.Expressions.Expression[], Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/Fallback&lt;!0&gt;)</signature>
                        <name>CallMethodReturnLast</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(string, System.Dynamic.DynamicMetaObjectBinder, System.Linq.Expressions.Expression[], Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/Fallback&lt;!0&gt;, Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/Fallback&lt;!0&gt;)</signature>
                        <name>CallMethodWithResult</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.ConstantExpression(System.Dynamic.DynamicMetaObjectBinder)</signature>
                        <name>Constant</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Value</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression[](System.Dynamic.DynamicMetaObject[])</signature>
                        <name>GetArgArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression[](System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)</signature>
                        <name>GetArgArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression[](System.Dynamic.DynamicMetaObject[])</signature>
                        <name>GetArgs</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>GetDynamicMemberNames</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.BindingRestrictions()</signature>
                        <name>GetRestrictions</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsOverridden</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_dontFallbackFirst</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicProxy`1&lt;!0&gt;</signature>
                        <name>_proxy</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Dynamic.DynamicMetaObject,System.Linq.Expressions.UnaryExpression&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate26</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Linq.Expressions.Expression[]</signature>
                        <name>NoArgs</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/&lt;&gt;c__DisplayClass1</name>
                <newname>b6/h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;BindGetMember&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.GetMemberBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/&lt;&gt;c__DisplayClass11</name>
                <newname>b6/e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;BindCreateInstance&gt;b__10</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.DynamicMetaObject[]</signature>
                        <name>args</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.CreateInstanceBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/&lt;&gt;c__DisplayClass14</name>
                <newname>b6/g</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;BindInvoke&gt;b__13</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.DynamicMetaObject[]</signature>
                        <name>args</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.InvokeBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/&lt;&gt;c__DisplayClass17</name>
                <newname>b6/f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;BindBinaryOperation&gt;b__16</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.DynamicMetaObject</signature>
                        <name>arg</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.BinaryOperationBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/&lt;&gt;c__DisplayClass1a</name>
                <newname>b6/n</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;BindUnaryOperation&gt;b__19</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.UnaryOperationBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/&lt;&gt;c__DisplayClass1d</name>
                <newname>b6/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;BindGetIndex&gt;b__1c</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.GetIndexBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.DynamicMetaObject[]</signature>
                        <name>indexes</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/&lt;&gt;c__DisplayClass20</name>
                <newname>b6/j</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;BindSetIndex&gt;b__1f</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.SetIndexBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.DynamicMetaObject[]</signature>
                        <name>indexes</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.DynamicMetaObject</signature>
                        <name>value</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/&lt;&gt;c__DisplayClass23</name>
                <newname>b6/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;BindDeleteIndex&gt;b__22</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.DeleteIndexBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.DynamicMetaObject[]</signature>
                        <name>indexes</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/&lt;&gt;c__DisplayClass4</name>
                <newname>b6/k</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;BindSetMember&gt;b__3</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.SetMemberBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.DynamicMetaObject</signature>
                        <name>value</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/&lt;&gt;c__DisplayClass7</name>
                <newname>b6/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;BindDeleteMember&gt;b__6</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.DeleteMemberBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/&lt;&gt;c__DisplayClassa</name>
                <newname>b6/i</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;BindConvert&gt;b__9</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.ConvertBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/&lt;&gt;c__DisplayClasse</name>
                <newname>b6/l</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;BindInvokeMember&gt;b__c</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>&lt;BindInvokeMember&gt;b__d</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.DynamicMetaObject[]</signature>
                        <name>args</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.InvokeMemberBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/Fallback</name>
                <newname>b6/m</newname>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(System.Dynamic.DynamicMetaObject, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1/GetBinderAdapter</name>
                <newname>b6/d</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Dynamic.InvokeMemberBinder)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)</signature>
                        <name>FallbackGetMember</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.DynamicReflectionDelegateFactory</name>
                <newname>ce</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Func`1&lt;!!0&gt;(System.Type)</signature>
                        <name>CreateDefaultConstructor</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.Emit.DynamicMethod(string, System.Type, System.Type[], System.Type)</signature>
                        <name>CreateDynamicMethod</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Func`2&lt;!!0,object&gt;(System.Reflection.FieldInfo)</signature>
                        <name>CreateGet</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Func`2&lt;!!0,object&gt;(System.Reflection.PropertyInfo)</signature>
                        <name>CreateGet</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;!!0,object&gt;(System.Reflection.MethodBase)</signature>
                        <name>CreateMethodCall</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;(System.Reflection.MethodBase)</signature>
                        <name>CreateParametrizedConstructor</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Action`2&lt;!!0,object&gt;(System.Reflection.FieldInfo)</signature>
                        <name>CreateSet</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Action`2&lt;!!0,object&gt;(System.Reflection.PropertyInfo)</signature>
                        <name>CreateSet</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void(System.Type, System.Reflection.Emit.ILGenerator)</signature>
                        <name>GenerateCreateDefaultConstructorIL</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.FieldInfo, System.Reflection.Emit.ILGenerator)</signature>
                        <name>GenerateCreateGetFieldIL</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.PropertyInfo, System.Reflection.Emit.ILGenerator)</signature>
                        <name>GenerateCreateGetPropertyIL</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodBase, System.Reflection.Emit.ILGenerator, int32)</signature>
                        <name>GenerateCreateMethodCallIL</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.FieldInfo, System.Reflection.Emit.ILGenerator)</signature>
                        <name>GenerateCreateSetFieldIL</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.PropertyInfo, System.Reflection.Emit.ILGenerator)</signature>
                        <name>GenerateCreateSetPropertyIL</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.DynamicReflectionDelegateFactory</signature>
                        <name>Instance</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.DynamicReflectionDelegateFactory/&lt;&gt;c__DisplayClass1`1</name>
                <newname>ce/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(!0)</signature>
                        <name>&lt;CreateGet&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>constantValue</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.DynamicUtils</name>
                <newname>av</newname>
                <methodlist>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;(System.Dynamic.IDynamicMetaObjectProvider)</signature>
                        <name>GetDynamicMemberNames</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.DynamicUtils/BinderWrapper</name>
                <newname>av/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>CreateMemberCalls</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(int32[])</signature>
                        <name>CreateSharpArgumentInfoArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Runtime.CompilerServices.CallSiteBinder(string, System.Type)</signature>
                        <name>GetMember</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Runtime.CompilerServices.CallSiteBinder(string, System.Type)</signature>
                        <name>SetMember</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>_getCSharpArgumentInfoArray</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>_getMemberCall</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_init</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_setCSharpArgumentInfoArray</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>_setMemberCall</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BinderTypeName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CSharpArgumentInfoFlagsTypeName</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CSharpArgumentInfoTypeName</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CSharpAssemblyName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CSharpBinderFlagsTypeName</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.EnumUtils</name>
                <newname>bk</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(Newtonsoft.Json.Utilities.EnumValue`1&lt;unsigned int64&gt;)</signature>
                        <name>&lt;GetFlagsValues&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.FieldInfo)</signature>
                        <name>&lt;GetNames&gt;b__5</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.FieldInfo)</signature>
                        <name>&lt;GetValues&gt;b__3</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(System.Runtime.Serialization.EnumMemberAttribute)</signature>
                        <name>&lt;InitializeEnumType&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IList`1&lt;!!0&gt;(!!0)</signature>
                        <name>GetFlagsValues</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;string&gt;(System.Type)</signature>
                        <name>GetNames</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Utilities.EnumValue`1&lt;!!0&gt;&gt;(System.Type)</signature>
                        <name>GetNamesAndValues</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Utilities.EnumValue`1&lt;unsigned int64&gt;&gt;()</signature>
                        <name>GetNamesAndValues</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;object&gt;(System.Type)</signature>
                        <name>GetValues</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.BidirectionalDictionary`2&lt;string,string&gt;(System.Type)</signature>
                        <name>InitializeEnumType</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>object(string, bool, System.Type)</signature>
                        <name>ParseEnumName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(Newtonsoft.Json.Utilities.BidirectionalDictionary`2&lt;string,string&gt;, string)</signature>
                        <name>ResolvedEnumName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(System.Type, string, bool)</signature>
                        <name>ToEnumName</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;System.Runtime.Serialization.EnumMemberAttribute,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.FieldInfo,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate4</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.FieldInfo,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate6</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ThreadSafeStore`2&lt;System.Type,Newtonsoft.Json.Utilities.BidirectionalDictionary`2&lt;string,string&gt;&gt;</signature>
                        <name>EnumMemberNamesPerType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.EnumValue`1</name>
                <newname>cn</newname>
                <methodlist>
                    <method>
                        <signature>void(string, !0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Value</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>_value</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                        <newname>a</newname>
                    </property>
                    <property>
                        <signature>!0()</signature>
                        <name>Value</name>
                        <newname>b</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ExpressionReflectionDelegateFactory</name>
                <newname>o</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Reflection.MethodBase, System.Type, System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.ParameterExpression)</signature>
                        <name>BuildMethodCall</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Func`1&lt;!!0&gt;(System.Type)</signature>
                        <name>CreateDefaultConstructor</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Func`2&lt;!!0,object&gt;(System.Reflection.FieldInfo)</signature>
                        <name>CreateGet</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Func`2&lt;!!0,object&gt;(System.Reflection.PropertyInfo)</signature>
                        <name>CreateGet</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;!!0,object&gt;(System.Reflection.MethodBase)</signature>
                        <name>CreateMethodCall</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;(System.Reflection.MethodBase)</signature>
                        <name>CreateParametrizedConstructor</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Action`2&lt;!!0,object&gt;(System.Reflection.FieldInfo)</signature>
                        <name>CreateSet</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Action`2&lt;!!0,object&gt;(System.Reflection.PropertyInfo)</signature>
                        <name>CreateSet</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.Expression, System.Type)</signature>
                        <name>EnsureCastExpression</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.ReflectionDelegateFactory()</signature>
                        <name>get_Instance</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ExpressionReflectionDelegateFactory</signature>
                        <name>_instance</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.ExpressionReflectionDelegateFactory/&lt;&gt;c__DisplayClass4`1</name>
                <newname>o/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>&lt;CreateDefaultConstructor&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>&lt;CreateDefaultConstructor&gt;b__2</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ExpressionReflectionDelegateFactory/ByRefParameter</name>
                <newname>o/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>IsOut</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Linq.Expressions.Expression</signature>
                        <name>Value</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Linq.Expressions.ParameterExpression</signature>
                        <name>Variable</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.FSharpFunction</name>
                <newname>q</newname>
                <methodlist>
                    <method>
                        <signature>void(object, Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object[])</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>_instance</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>_invoker</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.FSharpUtils</name>
                <newname>by</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;()</signature>
                        <name>BuildMapCreator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;(System.Type, string)</signature>
                        <name>CreateFSharpFuncCall</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;(System.Type, System.Type)</signature>
                        <name>CreateMap</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;(System.Type)</signature>
                        <name>CreateSeq</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly)</signature>
                        <name>EnsureInitialized</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly()</signature>
                        <name>get_FSharpCoreAssembly</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;object,object&gt;()</signature>
                        <name>get_GetUnionCaseInfoDeclaringType</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;()</signature>
                        <name>get_GetUnionCaseInfoFields</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;object,object&gt;()</signature>
                        <name>get_GetUnionCaseInfoName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;object,object&gt;()</signature>
                        <name>get_GetUnionCaseInfoTag</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;()</signature>
                        <name>get_GetUnionCases</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;()</signature>
                        <name>get_IsUnion</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;()</signature>
                        <name>get_PreComputeUnionConstructor</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;()</signature>
                        <name>get_PreComputeUnionReader</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;()</signature>
                        <name>get_PreComputeUnionTagReader</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly)</signature>
                        <name>set_FSharpCoreAssembly</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;object,object&gt;)</signature>
                        <name>set_GetUnionCaseInfoDeclaringType</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;)</signature>
                        <name>set_GetUnionCaseInfoFields</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;object,object&gt;)</signature>
                        <name>set_GetUnionCaseInfoName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;object,object&gt;)</signature>
                        <name>set_GetUnionCaseInfoTag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;)</signature>
                        <name>set_GetUnionCases</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;)</signature>
                        <name>set_IsUnion</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;)</signature>
                        <name>set_PreComputeUnionConstructor</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;)</signature>
                        <name>set_PreComputeUnionReader</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;)</signature>
                        <name>set_PreComputeUnionTagReader</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_initialized</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>_mapType</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>_ofSeq</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.Assembly</signature>
                        <name>&lt;FSharpCoreAssembly&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;object,object&gt;</signature>
                        <name>&lt;GetUnionCaseInfoDeclaringType&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>&lt;GetUnionCaseInfoFields&gt;k__BackingField</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;object,object&gt;</signature>
                        <name>&lt;GetUnionCaseInfoName&gt;k__BackingField</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;object,object&gt;</signature>
                        <name>&lt;GetUnionCaseInfoTag&gt;k__BackingField</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>&lt;GetUnionCases&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>&lt;IsUnion&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>&lt;PreComputeUnionConstructor&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>&lt;PreComputeUnionReader&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>&lt;PreComputeUnionTagReader&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FSharpListTypeName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FSharpMapTypeName</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FSharpSetTypeName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>Lock</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.FSharpUtils/&lt;&gt;c__DisplayClass2</name>
                <newname>by/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object, object[])</signature>
                        <name>&lt;CreateFSharpFuncCall&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>call</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>invoke</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TKey</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TValue</name>
                    <newname>b</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.FSharpUtils/&lt;&gt;c__DisplayClass6`2</name>
                <newname>by/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object[])</signature>
                        <name>&lt;BuildMapCreator&gt;b__4</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Tuple`2&lt;!0,!1&gt;(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;)</signature>
                        <name>&lt;BuildMapCreator&gt;b__5</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;,System.Tuple`2&lt;!0,!1&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate8</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;</signature>
                        <name>ctorDelegate</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ILGeneratorExtensions</name>
                <newname>k</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Reflection.Emit.ILGenerator, System.Type)</signature>
                        <name>BoxIfNeeded</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)</signature>
                        <name>CallMethod</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.ILGenerator, int32, int32)</signature>
                        <name>PushArrayInstance</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.ILGenerator, System.Type)</signature>
                        <name>PushInstance</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.ILGenerator)</signature>
                        <name>Return</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.ILGenerator, System.Type)</signature>
                        <name>UnboxIfNeeded</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.IWrappedCollection</name>
                <newname>bi</newname>
                <methodlist>
                    <method>
                        <signature>object()</signature>
                        <name>get_UnderlyingCollection</name>
                        <newname>ah</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.IWrappedDictionary</name>
                <newname>aj</newname>
                <methodlist>
                    <method>
                        <signature>object()</signature>
                        <name>get_UnderlyingDictionary</name>
                        <newname>ag</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.JavaScriptUtils</name>
                <newname>ca</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>bool[](Newtonsoft.Json.StringEscapeHandling, char)</signature>
                        <name>GetCharEscapeFlags</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string, bool[])</signature>
                        <name>ShouldEscapeJavaScriptString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string, char, bool)</signature>
                        <name>ToEscapedJavaScriptString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string, char, bool, Newtonsoft.Json.StringEscapeHandling)</signature>
                        <name>ToEscapedJavaScriptString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, string, char, bool, bool[], Newtonsoft.Json.StringEscapeHandling, char[]&amp;)</signature>
                        <name>WriteEscapedJavaScriptString</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool[]</signature>
                        <name>DoubleQuoteCharEscapeFlags</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>EscapedUnicodeText</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool[]</signature>
                        <name>HtmlCharEscapeFlags</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool[]</signature>
                        <name>SingleQuoteCharEscapeFlags</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.JsonTokenUtils</name>
                <newname>b0</newname>
                <methodlist>
                    <method>
                        <signature>bool(Newtonsoft.Json.JsonToken)</signature>
                        <name>IsEndToken</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.JsonToken)</signature>
                        <name>IsPrimitiveToken</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Newtonsoft.Json.JsonToken)</signature>
                        <name>IsStartToken</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory</name>
                <newname>a8</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Func`1&lt;!!0&gt;(System.Type)</signature>
                        <name>CreateDefaultConstructor</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Func`2&lt;!!0,object&gt;(System.Reflection.FieldInfo)</signature>
                        <name>CreateGet</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Func`2&lt;!!0,object&gt;(System.Reflection.PropertyInfo)</signature>
                        <name>CreateGet</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;!!0,object&gt;(System.Reflection.MethodBase)</signature>
                        <name>CreateMethodCall</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;(System.Reflection.MethodBase)</signature>
                        <name>CreateParametrizedConstructor</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Action`2&lt;!!0,object&gt;(System.Reflection.FieldInfo)</signature>
                        <name>CreateSet</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Action`2&lt;!!0,object&gt;(System.Reflection.PropertyInfo)</signature>
                        <name>CreateSet</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.ReflectionDelegateFactory()</signature>
                        <name>get_Instance</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory</signature>
                        <name>_instance</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory/&lt;&gt;c__DisplayClass11`1</name>
                <newname>a8/f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(!0)</signature>
                        <name>&lt;CreateGet&gt;b__10</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.FieldInfo</signature>
                        <name>fieldInfo</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory/&lt;&gt;c__DisplayClass14`1</name>
                <newname>a8/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0, object)</signature>
                        <name>&lt;CreateSet&gt;b__13</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.FieldInfo</signature>
                        <name>fieldInfo</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory/&lt;&gt;c__DisplayClass17`1</name>
                <newname>a8/g</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0, object)</signature>
                        <name>&lt;CreateSet&gt;b__16</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.PropertyInfo</signature>
                        <name>propertyInfo</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory/&lt;&gt;c__DisplayClass3</name>
                <newname>a8/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object[])</signature>
                        <name>&lt;CreateParametrizedConstructor&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object(object[])</signature>
                        <name>&lt;CreateParametrizedConstructor&gt;b__1</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.ConstructorInfo</signature>
                        <name>c</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>method</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory/&lt;&gt;c__DisplayClass7`1</name>
                <newname>a8/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(!0, object[])</signature>
                        <name>&lt;CreateMethodCall&gt;b__5</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>object(!0, object[])</signature>
                        <name>&lt;CreateMethodCall&gt;b__6</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.ConstructorInfo</signature>
                        <name>c</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>method</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory/&lt;&gt;c__DisplayClassb`1</name>
                <newname>a8/e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>&lt;CreateDefaultConstructor&gt;b__9</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>&lt;CreateDefaultConstructor&gt;b__a</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.ConstructorInfo</signature>
                        <name>constructorInfo</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory/&lt;&gt;c__DisplayClasse`1</name>
                <newname>a8/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(!0)</signature>
                        <name>&lt;CreateGet&gt;b__d</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.PropertyInfo</signature>
                        <name>propertyInfo</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.MathUtils</name>
                <newname>ch</newname>
                <methodlist>
                    <method>
                        <signature>bool(float64, float64)</signature>
                        <name>ApproxEquals</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(unsigned int64)</signature>
                        <name>IntLength</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>char(int32)</signature>
                        <name>IntToHex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;(System.Nullable`1&lt;float64&gt;, System.Nullable`1&lt;float64&gt;)</signature>
                        <name>Max</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;(System.Nullable`1&lt;int32&gt;, System.Nullable`1&lt;int32&gt;)</signature>
                        <name>Max</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;(System.Nullable`1&lt;int32&gt;, System.Nullable`1&lt;int32&gt;)</signature>
                        <name>Min</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TResult</name>
                    <newname>b</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.MethodCall`2</name>
                <newname>s</newname>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!0, object[], System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>!1(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>!1(!0, object[])</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.MiscellaneousUtils</name>
                <newname>ar</newname>
                <methodlist>
                    <method>
                        <signature>int32(unsigned int8[], unsigned int8[])</signature>
                        <name>ByteArrayCompare</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.ArgumentOutOfRangeException(string, object, string)</signature>
                        <name>CreateArgumentOutOfRangeException</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(object)</signature>
                        <name>FormatValueForPrint</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetLocalName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetPrefix</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string, string&amp;, string&amp;)</signature>
                        <name>GetQualifiedNameParts</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(object)</signature>
                        <name>ToString</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(object, object)</signature>
                        <name>ValueEquals</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.NoThrowExpressionVisitor</name>
                <newname>u</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Linq.Expressions.Expression(System.Linq.Expressions.ConditionalExpression)</signature>
                        <name>VisitConditional</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>ErrorResult</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.NoThrowGetBinderMember</name>
                <newname>bl</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Dynamic.GetMemberBinder)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)</signature>
                        <name>FallbackGetMember</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Dynamic.GetMemberBinder</signature>
                        <name>_innerBinder</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.NoThrowSetBinderMember</name>
                <newname>co</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Dynamic.SetMemberBinder)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Dynamic.DynamicMetaObject(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)</signature>
                        <name>FallbackSetMember</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Dynamic.SetMemberBinder</signature>
                        <name>_innerBinder</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ParseResult</name>
                <newname>bp</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ParseResult</signature>
                        <name>Invalid</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ParseResult</signature>
                        <name>None</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ParseResult</signature>
                        <name>Overflow</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ParseResult</signature>
                        <name>Success</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ParserTimeZone</name>
                <newname>cc</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ParserTimeZone</signature>
                        <name>LocalEastOfUtc</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ParserTimeZone</signature>
                        <name>LocalWestOfUtc</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ParserTimeZone</signature>
                        <name>Unspecified</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.ParserTimeZone</signature>
                        <name>Utc</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.PrimitiveTypeCode</name>
                <newname>bw</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>BigInteger</name>
                        <newname>ak</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>BigIntegerNullable</name>
                        <newname>al</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Boolean</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>BooleanNullable</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Byte</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>ByteNullable</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Bytes</name>
                        <newname>ao</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Char</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>CharNullable</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>DateTime</name>
                        <newname>aa</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>DateTimeNullable</name>
                        <newname>ab</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>DateTimeOffset</name>
                        <newname>ac</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>DateTimeOffsetNullable</name>
                        <newname>ad</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>DBNull</name>
                        <newname>ap</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Decimal</name>
                        <newname>ae</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>DecimalNullable</name>
                        <newname>af</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Double</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>DoubleNullable</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Empty</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Guid</name>
                        <newname>ag</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>GuidNullable</name>
                        <newname>ah</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Int16</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Int16Nullable</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Int32</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Int32Nullable</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Int64</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Int64Nullable</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Object</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>SByte</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>SByteNullable</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Single</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>SingleNullable</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>String</name>
                        <newname>an</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>TimeSpan</name>
                        <newname>ai</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>TimeSpanNullable</name>
                        <newname>aj</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>UInt16</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>UInt16Nullable</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>UInt32</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>UInt32Nullable</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>UInt64</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>UInt64Nullable</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>Uri</name>
                        <newname>am</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.PropertyNameTable</name>
                <newname>bc</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>Add</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string, int32)</signature>
                        <name>AddEntry</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(char[], int32, int32)</signature>
                        <name>Get</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Grow</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string, char[], int32, int32)</signature>
                        <name>TextEquals</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>_count</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PropertyNameTable/Entry[]</signature>
                        <name>_entries</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_mask</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>HashCodeRandomizer</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.PropertyNameTable/Entry</name>
                <newname>bc/a</newname>
                <methodlist>
                    <method>
                        <signature>void(string, int32, Newtonsoft.Json.Utilities.PropertyNameTable/Entry)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>HashCode</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PropertyNameTable/Entry</signature>
                        <name>Next</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Value</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ReflectionDelegateFactory</name>
                <newname>b1</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Func`1&lt;!!0&gt;(System.Type)</signature>
                        <name>CreateDefaultConstructor</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Func`2&lt;!!0,object&gt;(System.Reflection.FieldInfo)</signature>
                        <name>CreateGet</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Func`2&lt;!!0,object&gt;(System.Reflection.MemberInfo)</signature>
                        <name>CreateGet</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Func`2&lt;!!0,object&gt;(System.Reflection.PropertyInfo)</signature>
                        <name>CreateGet</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;!!0,object&gt;(System.Reflection.MethodBase)</signature>
                        <name>CreateMethodCall</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;(System.Reflection.MethodBase)</signature>
                        <name>CreateParametrizedConstructor</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Action`2&lt;!!0,object&gt;(System.Reflection.FieldInfo)</signature>
                        <name>CreateSet</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Action`2&lt;!!0,object&gt;(System.Reflection.MemberInfo)</signature>
                        <name>CreateSet</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Action`2&lt;!!0,object&gt;(System.Reflection.PropertyInfo)</signature>
                        <name>CreateSet</name>
                        <newname>x</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ReflectionMember</name>
                <newname>ag</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;object,object&gt;()</signature>
                        <name>get_Getter</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_MemberType</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Action`2&lt;object,object&gt;()</signature>
                        <name>get_Setter</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;object,object&gt;)</signature>
                        <name>set_Getter</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_MemberType</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(System.Action`2&lt;object,object&gt;)</signature>
                        <name>set_Setter</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;object,object&gt;</signature>
                        <name>&lt;Getter&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;MemberType&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Action`2&lt;object,object&gt;</signature>
                        <name>&lt;Setter&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ReflectionObject</name>
                <newname>ax</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.ReflectionObject(System.Type, string[])</signature>
                        <name>Create</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.ReflectionObject(System.Type, System.Reflection.MethodBase, string[])</signature>
                        <name>Create</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;()</signature>
                        <name>get_Creator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Utilities.ReflectionMember&gt;()</signature>
                        <name>get_Members</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Type(string)</signature>
                        <name>GetType</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object(object, string)</signature>
                        <name>GetValue</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;)</signature>
                        <name>set_Creator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Utilities.ReflectionMember&gt;)</signature>
                        <name>set_Members</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(object, string, object)</signature>
                        <name>SetValue</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Serialization.ObjectConstructor`1&lt;object&gt;</signature>
                        <name>&lt;Creator&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Newtonsoft.Json.Utilities.ReflectionMember&gt;</signature>
                        <name>&lt;Members&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ReflectionObject/&lt;&gt;c__DisplayClass3</name>
                <newname>ax/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object[])</signature>
                        <name>&lt;Create&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`1&lt;object&gt;</signature>
                        <name>ctor</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ReflectionObject/&lt;&gt;c__DisplayClass5</name>
                <newname>ax/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>&lt;Create&gt;b__1</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>call</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ReflectionObject/&lt;&gt;c__DisplayClass7</name>
                <newname>ax/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>&lt;Create&gt;b__2</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.MethodCall`2&lt;object,object&gt;</signature>
                        <name>call</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ReflectionUtils</name>
                <newname>bm</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.FieldInfo)</signature>
                        <name>&lt;GetChildPrivateFields&gt;b__6</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.ConstructorInfo)</signature>
                        <name>&lt;GetDefaultConstructor&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(System.Reflection.MemberInfo)</signature>
                        <name>&lt;GetFieldsAndProperties&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Reflection.ParameterInfo)</signature>
                        <name>&lt;GetMemberInfoFromType&gt;b__4</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo, bool)</signature>
                        <name>CanReadMemberValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo, bool, bool)</signature>
                        <name>CanSetMemberValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>EnsureNotNullableType</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;(string)</signature>
                        <name>GetAssemblyDelimiterIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object)</signature>
                        <name>GetAttribute</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object, bool)</signature>
                        <name>GetAttribute</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0[](object, bool)</signature>
                        <name>GetAttributes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Attribute[](object, System.Type, bool)</signature>
                        <name>GetAttributes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(System.Reflection.PropertyInfo)</signature>
                        <name>GetBaseDefinition</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;System.Reflection.MemberInfo&gt;, System.Type, System.Reflection.BindingFlags)</signature>
                        <name>GetChildPrivateFields</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;System.Reflection.PropertyInfo&gt;, System.Type, System.Reflection.BindingFlags)</signature>
                        <name>GetChildPrivateProperties</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>GetCollectionItemType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.ConstructorInfo(System.Type)</signature>
                        <name>GetDefaultConstructor</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.ConstructorInfo(System.Type, bool)</signature>
                        <name>GetDefaultConstructor</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(System.Type)</signature>
                        <name>GetDefaultValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Type, System.Type&amp;, System.Type&amp;)</signature>
                        <name>GetDictionaryKeyValueTypes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Reflection.FieldInfo&gt;(System.Type, System.Reflection.BindingFlags)</signature>
                        <name>GetFields</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;System.Reflection.MemberInfo&gt;(System.Type, System.Reflection.BindingFlags)</signature>
                        <name>GetFieldsAndProperties</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.MemberInfo(System.Type, System.Reflection.MemberInfo)</signature>
                        <name>GetMemberInfoFromType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Reflection.MemberInfo)</signature>
                        <name>GetMemberUnderlyingType</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object(System.Reflection.MemberInfo, object)</signature>
                        <name>GetMemberValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Type(object)</signature>
                        <name>GetObjectType</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Reflection.PropertyInfo&gt;(System.Type, System.Reflection.BindingFlags)</signature>
                        <name>GetProperties</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)</signature>
                        <name>GetTypeName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, bool)</signature>
                        <name>HasDefaultConstructor</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type)</signature>
                        <name>ImplementsGenericDefinition</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type, System.Type&amp;)</signature>
                        <name>ImplementsGenericDefinition</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type)</signature>
                        <name>InheritsGenericDefinition</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type, System.Type&amp;)</signature>
                        <name>InheritsGenericDefinition</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type, System.Type&amp;)</signature>
                        <name>InheritsGenericDefinitionInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type)</signature>
                        <name>IsGenericDefinition</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>IsIndexedProperty</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>IsIndexedProperty</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type, string)</signature>
                        <name>IsMethodOverridden</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsNullable</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsNullableType</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo, System.Reflection.BindingFlags)</signature>
                        <name>IsOverridenGenericMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>IsPublic</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>IsVirtual</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>RemoveAssemblyDetails</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.BindingFlags(System.Reflection.BindingFlags, System.Reflection.BindingFlags)</signature>
                        <name>RemoveFlag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MemberInfo, object, object)</signature>
                        <name>SetMemberValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, string&amp;, string&amp;)</signature>
                        <name>SplitFullyQualifiedTypeName</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.ConstructorInfo,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.MemberInfo,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.ParameterInfo,System.Type&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.FieldInfo,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate7</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Type[]</signature>
                        <name>EmptyTypes</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ReflectionUtils/&lt;&gt;c__DisplayClass11</name>
                <newname>bm/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MethodInfo)</signature>
                        <name>&lt;IsMethodOverridden&gt;b__10</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>method</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>methodDeclaringType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ReflectionUtils/&lt;&gt;c__DisplayClasse</name>
                <newname>bm/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;GetChildPrivateProperties&gt;b__8</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;GetChildPrivateProperties&gt;b__9</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;GetChildPrivateProperties&gt;b__a</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.PropertyInfo</signature>
                        <name>subTypeProperty</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.StringBuffer</name>
                <newname>cp</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>Append</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(char[], int32, int32)</signature>
                        <name>Append</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>EnsureSize</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Position</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>char[]()</signature>
                        <name>GetInternalBuffer</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Position</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(int32, int32)</signature>
                        <name>ToString</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>char[]</signature>
                        <name>_buffer</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_position</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>EmptyBuffer</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.StringReference</name>
                <newname>as</newname>
                <methodlist>
                    <method>
                        <signature>void(char[], int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>char[]()</signature>
                        <name>get_Chars</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Length</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_StartIndex</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>char[]</signature>
                        <name>_chars</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_length</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_startIndex</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.StringUtils</name>
                <newname>cg</newname>
                <methodlist>
                    <method>
                        <signature>System.IO.StringWriter(int32)</signature>
                        <name>CreateStringWriter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string, char)</signature>
                        <name>EndsWith</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,string&gt;, string)</signature>
                        <name>ForgivingCaseSensitiveFind</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string, System.IFormatProvider, object)</signature>
                        <name>FormatWith</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string, System.IFormatProvider, object, object)</signature>
                        <name>FormatWith</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string, System.IFormatProvider, object, object, object)</signature>
                        <name>FormatWith</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string, System.IFormatProvider, object, object, object, object)</signature>
                        <name>FormatWith</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string, System.IFormatProvider, object[])</signature>
                        <name>FormatWith</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;(string)</signature>
                        <name>GetLength</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>IsHighSurrogate</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>IsLowSurrogate</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsWhiteSpace</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>NullEmptyString</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(string, char)</signature>
                        <name>StartsWith</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ToCamelCase</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(char, char[])</signature>
                        <name>ToCharAsUnicode</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>char</signature>
                        <name>CarriageReturn</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CarriageReturnLineFeed</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Empty</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>char</signature>
                        <name>LineFeed</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>char</signature>
                        <name>Tab</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TSource</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.StringUtils/&lt;&gt;c__DisplayClass3`1</name>
                <newname>cg/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>&lt;ForgivingCaseSensitiveFind&gt;b__0</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>&lt;ForgivingCaseSensitiveFind&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>testValue</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,string&gt;</signature>
                        <name>valueSelector</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TKey</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TValue</name>
                    <newname>b</newname>
                </genericparameter>
                <name>Newtonsoft.Json.Utilities.ThreadSafeStore`2</name>
                <newname>cf</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Func`2&lt;!0,!1&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>AddValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>Get</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;!0,!1&gt;</signature>
                        <name>_creator</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_lock</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;!0,!1&gt;</signature>
                        <name>_store</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.TypeExtensions</name>
                <newname>bu</newname>
                <methodlist>
                    <method>
                        <signature>System.Reflection.Assembly(System.Type)</signature>
                        <name>Assembly</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, string)</signature>
                        <name>AssignableToTypeName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type, string, System.Type&amp;)</signature>
                        <name>AssignableToTypeName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>BaseType</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>ContainsGenericParameters</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsAbstract</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsClass</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsEnum</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsGenericType</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsGenericTypeDefinition</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsInterface</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsSealed</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsValueType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsVisible</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.MemberTypes(System.Reflection.MemberInfo)</signature>
                        <name>MemberType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(System.Delegate)</signature>
                        <name>Method</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.TypeInformation</name>
                <newname>am</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_Type</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode()</signature>
                        <name>get_TypeCode</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_Type</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Newtonsoft.Json.Utilities.PrimitiveTypeCode)</signature>
                        <name>set_TypeCode</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;Type&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.Utilities.PrimitiveTypeCode</signature>
                        <name>&lt;TypeCode&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.Utilities.ValidationUtils</name>
                <newname>l</newname>
                <methodlist>
                    <method>
                        <signature>void(object, string)</signature>
                        <name>ArgumentNotNull</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>ArgumentNotNullOrEmpty</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Type, string)</signature>
                        <name>ArgumentTypeIsEnum</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Newtonsoft.Json.WriteState</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Newtonsoft.Json.WriteState</signature>
                        <name>Array</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.WriteState</signature>
                        <name>Closed</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.WriteState</signature>
                        <name>Constructor</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.WriteState</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.WriteState</signature>
                        <name>Object</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.WriteState</signature>
                        <name>Property</name>
                    </field>
                    <field>
                        <signature>Newtonsoft.Json.WriteState</signature>
                        <name>Start</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
        </module>
    </mapping>
    <statistics>
        <statisticline>
            <description>Total Classes</description>
            <statistic>370</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods</description>
            <statistic>3575</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields</description>
            <statistic>1481</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties</description>
            <statistic>448</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events</description>
            <statistic>7</statistic>
        </statisticline>
        <statisticline>
            <description>Total Classes Renamed</description>
            <statistic>236</statistic>
            <statistic>63,78%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods Renamed</description>
            <statistic>1566</statistic>
            <statistic>43,80%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields Renamed</description>
            <statistic>1293</statistic>
            <statistic>87,31%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties Renamed</description>
            <statistic>41</statistic>
            <statistic>9,15%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events Renamed</description>
            <statistic>0</statistic>
            <statistic>0,00%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'a'</description>
            <statistic>507</statistic>
            <statistic>14,18%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'b'</description>
            <statistic>190</statistic>
            <statistic>5,31%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'c'</description>
            <statistic>150</statistic>
            <statistic>4,20%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'd'</description>
            <statistic>76</statistic>
            <statistic>2,13%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'g'</description>
            <statistic>59</statistic>
            <statistic>1,65%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'e'</description>
            <statistic>51</statistic>
            <statistic>1,43%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'h'</description>
            <statistic>46</statistic>
            <statistic>1,29%</statistic>
        </statisticline>
    </statistics>
</dotfuscatorMap>